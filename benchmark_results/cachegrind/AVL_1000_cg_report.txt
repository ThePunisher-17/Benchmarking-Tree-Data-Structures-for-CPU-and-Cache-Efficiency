--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13410
Command:          ./benchmark AVL 1000 benchmark_results/csv/AVL_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir________________ 

3,090,827 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir____________________  file:function

< 795,772 (25.7%, 25.7%)  ./elf/./elf/dl-lookup.c:
  497,744 (16.1%)           do_lookup_x
  185,267  (6.0%)           _dl_lookup_symbol_x
  112,761  (3.6%)           check_match

< 732,849 (23.7%, 49.5%)  /home/pratik/Desktop/Details 3/main.cpp:
  470,953 (15.2%)           avl_insert(AVLNode*, int)
  228,481  (7.4%)           avl_delete(AVLNode*, int)
   12,684  (0.4%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
   11,978  (0.4%)           rotateLeft(AVLNode*)
    7,257  (0.2%)           rotateRight(AVLNode*)

< 492,502 (15.9%, 65.4%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

< 306,532  (9.9%, 75.3%)  ./malloc/./malloc/malloc.c:
  154,993  (5.0%)           _int_malloc
   53,095  (1.7%)           malloc
   45,822  (1.5%)           _int_free
   23,911  (0.8%)           malloc_consolidate
   18,564  (0.6%)           free
    5,127  (0.2%)           unlink_chunk.isra.0
    4,032  (0.1%)           alloc_perturb

< 146,990  (4.8%, 80.1%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

< 118,533  (3.8%, 83.9%)  ./elf/../sysdeps/x86_64/dl-machine.h:
  118,396  (3.8%)           _dl_relocate_object

< 110,601  (3.6%, 87.5%)  ./elf/./elf/do-rel.h:
  110,545  (3.6%)           _dl_relocate_object

<  68,077  (2.2%, 89.7%)  ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S:
   68,045  (2.2%)           strcmp

<  60,586  (2.0%, 91.6%)  /usr/include/c++/13/bits/stl_algobase.h:
   40,254  (1.3%)           avl_insert(AVLNode*, int)
   17,822  (0.6%)           avl_delete(AVLNode*, int)

<  36,270  (1.2%, 92.8%)  ???:
   12,192  (0.4%)           std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)
   10,056  (0.3%)           ???

<  31,565  (1.0%, 93.8%)  ./elf/./elf/dl-tunables.c:
   30,377  (1.0%)           __GI___tunables_init

<  19,914  (0.6%, 94.5%)  ./elf/../sysdeps/generic/ldsodefs.h:
   10,433  (0.3%)           _dl_relocate_object
    9,475  (0.3%)           do_lookup_x

<  17,500  (0.6%, 95.0%)  /usr/include/c++/13/bits/uniform_int_dist.h:
   15,500  (0.5%)           unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  16,447  (0.5%, 95.6%)  ./elf/./elf/dl-version.c:
   16,336  (0.5%)           _dl_check_map_versions

<   9,216  (0.3%, 95.9%)  ./wcsmbs/./wcsmbs/btowc.c:btowc

<   8,669  (0.3%, 96.2%)  ./elf/./elf/dl-load.c:
    3,856  (0.1%)           _dl_map_object_from_fd

<   7,580  (0.2%, 96.4%)  ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x

<   7,031  (0.2%, 96.6%)  ./elf/./elf/dl-runtime.c:_dl_fixup

<   7,000  (0.2%, 96.9%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<   6,212  (0.2%, 97.1%)  ./stdlib/./stdlib/random_r.c:srandom_r

<   5,008  (0.2%, 97.2%)  /usr/include/c++/13/bits/stl_numeric.h:main

<   4,800  (0.2%, 97.4%)  ./elf/./elf/dl-cache.c:
    3,403  (0.1%)           _dl_cache_libcmp

<   4,496  (0.1%, 97.5%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   4,294  (0.1%, 97.7%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:
    3,322  (0.1%)           intel_check_word.constprop.0

<   4,013  (0.1%, 97.8%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<   3,656  (0.1%, 97.9%)  ./elf/./elf/dl-tunables.h:
    3,631  (0.1%)           __GI___tunables_init

<   3,515  (0.1%, 98.0%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   3,412  (0.1%, 98.1%)  ./elf/./elf/dl-misc.c:
    3,208  (0.1%)           _dl_name_match_p

<   3,200  (0.1%, 98.2%)  ./wcsmbs/./wcsmbs/wctob.c:wctob

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir____________________  function:file

> 677,769 (21.9%, 21.9%)  _dl_lookup_symbol_x:
  492,502 (15.9%)           ./elf/../sysdeps/generic/dl-new-hash.h
  185,267  (6.0%)           ./elf/./elf/dl-lookup.c

> 514,812 (16.7%, 38.6%)  do_lookup_x:
  497,744 (16.1%)           ./elf/./elf/dl-lookup.c
    9,475  (0.3%)           ./elf/../sysdeps/generic/ldsodefs.h
    7,580  (0.2%)           ./elf/../sysdeps/generic/dl-protected.h

> 511,207 (16.5%, 55.1%)  avl_insert(AVLNode*, int):
  470,953 (15.2%)           /home/pratik/Desktop/Details 3/main.cpp
   40,254  (1.3%)           /usr/include/c++/13/bits/stl_algobase.h

> 386,364 (12.5%, 67.6%)  _dl_relocate_object:
  146,990  (4.8%)           ./elf/./elf/dl-reloc.c
  118,396  (3.8%)           ./elf/../sysdeps/x86_64/dl-machine.h
  110,545  (3.6%)           ./elf/./elf/do-rel.h
   10,433  (0.3%)           ./elf/../sysdeps/generic/ldsodefs.h

> 246,303  (8.0%, 75.6%)  avl_delete(AVLNode*, int):
  228,481  (7.4%)           /home/pratik/Desktop/Details 3/main.cpp
   17,822  (0.6%)           /usr/include/c++/13/bits/stl_algobase.h

> 154,993  (5.0%, 80.6%)  _int_malloc:./malloc/./malloc/malloc.c

> 112,761  (3.6%, 84.3%)  check_match:./elf/./elf/dl-lookup.c

>  68,067  (2.2%, 86.5%)  strcmp:
   68,045  (2.2%)           ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S

>  55,110  (1.8%, 88.2%)  malloc:
   53,095  (1.7%)           ./malloc/./malloc/malloc.c

>  45,822  (1.5%, 89.7%)  _int_free:./malloc/./malloc/malloc.c

>  34,008  (1.1%, 90.8%)  __GI___tunables_init:
   30,377  (1.0%)           ./elf/./elf/dl-tunables.c
    3,631  (0.1%)           ./elf/./elf/dl-tunables.h

>  23,911  (0.8%, 91.6%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  22,500  (0.7%, 92.3%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   15,500  (0.5%)           /usr/include/c++/13/bits/uniform_int_dist.h
    7,000  (0.2%)           /usr/include/c++/13/bits/random.h

>  20,553  (0.7%, 93.0%)  free:
   18,564  (0.6%)           ./malloc/./malloc/malloc.c

>  16,390  (0.5%, 93.5%)  _dl_check_map_versions:
   16,336  (0.5%)           ./elf/./elf/dl-version.c

>  13,542  (0.4%, 94.0%)  rotateLeft(AVLNode*):
   11,978  (0.4%)           /home/pratik/Desktop/Details 3/main.cpp

>  12,739  (0.4%, 94.4%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
   12,684  (0.4%)           /home/pratik/Desktop/Details 3/main.cpp

>  12,514  (0.4%, 94.8%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
    4,496  (0.1%)           /usr/include/c++/13/bits/move.h
    3,515  (0.1%)           /usr/include/c++/13/bits/stl_algo.h

>  12,192  (0.4%, 95.2%)  std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*):???

>  10,056  (0.3%, 95.5%)  ???:???

>   9,728  (0.3%, 95.8%)  btowc:
    9,216  (0.3%)           ./wcsmbs/./wcsmbs/btowc.c

>   8,179  (0.3%, 96.1%)  rotateRight(AVLNode*):
    7,257  (0.2%)           /home/pratik/Desktop/Details 3/main.cpp

>   7,174  (0.2%, 96.3%)  _dl_fixup:
    7,031  (0.2%)           ./elf/./elf/dl-runtime.c

>   6,597  (0.2%, 96.5%)  _dl_map_object_from_fd:
    3,856  (0.1%)           ./elf/./elf/dl-load.c

>   6,212  (0.2%, 96.7%)  srandom_r:./stdlib/./stdlib/random_r.c

>   5,590  (0.2%, 96.9%)  intel_check_word.constprop.0:
    3,322  (0.1%)           ./elf/../sysdeps/x86/dl-cacheinfo.h

>   5,189  (0.2%, 97.1%)  main:
    5,008  (0.2%)           /usr/include/c++/13/bits/stl_numeric.h

>   5,127  (0.2%, 97.2%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>   4,032  (0.1%, 97.4%)  alloc_perturb:./malloc/./malloc/malloc.c

>   4,013  (0.1%, 97.5%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>   3,403  (0.1%, 97.6%)  _dl_cache_libcmp:./elf/./elf/dl-cache.c

>   3,208  (0.1%, 97.7%)  _dl_name_match_p:./elf/./elf/dl-misc.c

>   3,200  (0.1%, 97.8%)  wctob:./wcsmbs/./wcsmbs/wctob.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-protected.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-protected.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/ldsodefs.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/ldsodefs.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86/dl-cacheinfo.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86/dl-cacheinfo.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-cache.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-cache.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-load.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-load.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-misc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-misc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-runtime.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-runtime.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-version.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-version.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./wcsmbs/./wcsmbs/btowc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./wcsmbs/./wcsmbs/btowc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./wcsmbs/./wcsmbs/wctob.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./wcsmbs/./wcsmbs/wctob.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir____________ 

-- line 15 ----------------------------------------
      .         using namespace std;
      .         using namespace chrono;
      .         
      .         // ================= Memory Profiler =================
      .         size_t current_allocated_bytes = 0;
      .         size_t peak_allocated_bytes = 0;
      .         
      .         void *operator new(std::size_t size) noexcept(false)
      1 (0.0%)  {
  3,537 (0.1%)      current_allocated_bytes += size;
  2,356 (0.1%)      if (current_allocated_bytes > peak_allocated_bytes)
  1,181 (0.0%)          peak_allocated_bytes = current_allocated_bytes;
  2,359 (0.1%)      return malloc(size);
      .         }
      .         
      .         void operator delete(void *ptr) noexcept
    663 (0.0%)  {
    663 (0.0%)      free(ptr);
      .         }
      .         
      .         long get_peak_rss_kb()
      .         {
      .             struct rusage r;
      3 (0.0%)      getrusage(RUSAGE_SELF, &r);
      .             return r.ru_maxrss;
      .         }
      .         
      .         void report_memory_usage(std::ostream &out = std::cout)
      7 (0.0%)  {
      .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
      .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
      2 (0.0%)  }
      .         
      .         // ================= Benchmark Struct =================
      .         struct OperationStats
      .         {
      .             double insert_time = 0;
      .             double search_time = 0;
      .             double update_time = 0;
      .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 138 ----------------------------------------
      .                 return bst_successor(root->left, key, root->key);
      .         }
      .         
      .         // ==================== AVL Tree ====================
      .         struct AVLNode
      .         {
      .             int key, height;
      .             AVLNode *left, *right;
  4,692 (0.2%)      AVLNode(int k) : key(k), height(1), left(nullptr), right(nullptr) {}
      .         };
      .         
      .         int height(AVLNode *node)
      .         {
126,546 (4.1%)      return node ? node->height : 0;
      .         }
      .         
      .         int balanceFactor(AVLNode *node)
      .         {
 18,616 (0.6%)      return node ? height(node->left) - height(node->right) : 0;
      .         }
      .         
      .         void updateHeight(AVLNode *node)
      .         {
      .             if (node)
 63,219 (2.0%)          node->height = 1 + max(height(node->left), height(node->right));
      .         }
      .         
      .         AVLNode *rotateRight(AVLNode *y)
    323 (0.0%)  {
    323 (0.0%)      AVLNode *x = y->left;
    447 (0.0%)      AVLNode *T2 = x->right;
    485 (0.0%)      x->right = y;
    485 (0.0%)      y->left = T2;
      .             updateHeight(y);
      .             updateHeight(x);
      .             return x;
    646 (0.0%)  }
      .         
      .         AVLNode *rotateLeft(AVLNode *x)
    543 (0.0%)  {
    543 (0.0%)      AVLNode *y = x->right;
    543 (0.0%)      AVLNode *T2 = y->left;
    543 (0.0%)      y->left = x;
    543 (0.0%)      x->right = T2;
      .             updateHeight(x);
      .             updateHeight(y);
      .             return y;
  1,086 (0.0%)  }
      .         
      .         AVLNode *avl_insert(AVLNode *node, int key)
 73,650 (2.4%)  {
 43,017 (1.4%)      if (!node)
      .                 return new AVLNode(key);
 27,114 (0.9%)      if (key < node->key)
 19,932 (0.6%)          node->left = avl_insert(node->left, key);
  6,913 (0.2%)      else if (key > node->key)
 25,944 (0.8%)          node->right = avl_insert(node->right, key);
      .             else
 13,044 (0.4%)          return node;
      .         
      .             updateHeight(node);
      .             int balance = balanceFactor(node);
      .         
 26,782 (0.9%)      if (balance > 1 && key < node->left->key)
      .                 return rotateRight(node);
 26,242 (0.8%)      if (balance < -1 && key > node->right->key)
      .                 return rotateLeft(node);
    137 (0.0%)      if (balance > 1 && key > node->left->key)
      .             {
    411 (0.0%)          node->left = rotateLeft(node->left);
    274 (0.0%)          return rotateRight(node);
      .             }
    122 (0.0%)      if (balance < -1 && key < node->right->key)
      .             {
    244 (0.0%)          node->right = rotateRight(node->right);
    504 (0.0%)          return rotateLeft(node);
      .             }
      .         
      .             return node;
 58,531 (1.9%)  }
      .         
      .         AVLNode *minValueNode(AVLNode *node)
      .         {
    438 (0.0%)      AVLNode *current = node;
  4,208 (0.1%)      while (current->left != nullptr)
      .                 current = current->left;
      .             return current;
      .         }
      .         
      .         AVLNode *avl_delete(AVLNode *root, int key)
 26,852 (0.9%)  {
 20,097 (0.7%)      if (!root)
     84 (0.0%)          return root;
 13,342 (0.4%)      if (key < root->key)
 12,804 (0.4%)          root->left = avl_delete(root->left, key);
  3,470 (0.1%)      else if (key > root->key)
  3,470 (0.1%)          root->right = avl_delete(root->right, key);
      .             else
      .             {
  4,498 (0.1%)          if (!root->left || !root->right)
      .                 {
     26 (0.0%)              AVLNode *temp = root->left ? root->left : root->right;
  1,974 (0.1%)              delete root;
      .                     return temp;
      .                 }
      .                 AVLNode *temp = minValueNode(root->right);
    824 (0.0%)          root->key = temp->key;
 11,248 (0.4%)          root->right = avl_delete(root->right, temp->key);
      .             }
      .         
      .             updateHeight(root);
      .             int balance = balanceFactor(root);
      .         
 11,891 (0.4%)      if (balance > 1 && balanceFactor(root->left) >= 0)
      .                 return rotateRight(root);
     32 (0.0%)      if (balance > 1 && balanceFactor(root->left) < 0)
      .             {
     99 (0.0%)          root->left = rotateLeft(root->left);
     66 (0.0%)          return rotateRight(root);
      .             }
 12,012 (0.4%)      if (balance < -1 && balanceFactor(root->right) <= 0)
      .                 return rotateLeft(root);
     24 (0.0%)      if (balance < -1 && balanceFactor(root->right) > 0)
      .             {
     62 (0.0%)          root->right = rotateRight(root->right);
    242 (0.0%)          return rotateLeft(root);
      .             }
      .         
  5,821 (0.2%)      return root;
 33,257 (1.1%)  }
      .         
      .         bool avl_search(AVLNode *root, int key)
      .         {
      .             if (!root)
      .                 return false;
      .             if (root->key == key)
      .                 return true;
      .             return avl_search(key < root->key ? root->left : root->right, key);
-- line 275 ----------------------------------------
-- line 439 ----------------------------------------
      .         {
      .             auto it = tree.upper_bound(key);
      .             if (it == tree.end())
      .                 return -1;
      .             return *it;
      .         }
      .         
      .         // ==================== vEB Tree ====================
      4 (0.0%)  vector<int> vebTree;
      .         
      .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
      .         {
      .             if (low > high || index >= (int)vebTree.size())
      .                 return;
      .             int mid = (low + high) / 2;
      .             vebTree[index] = sorted[mid];
      .             build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
      .         }
      .         
      .         // ==================== Benchmark Dispatcher ====================
      .         OperationStats benchmark_tree(const string &tree_type,
      .                                       const vector<int> &data,
      .                                       const vector<int> &update_data,
      .                                       const vector<int> &delete_data,
      .                                       const vector<int> &pred_succ_data)
     16 (0.0%)  {
      4 (0.0%)      OperationStats stats;
      1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
      .         
      .             if (tree_type == "BST")
      .             {
      .                 BSTNode *root = nullptr;
      .                 t1 = high_resolution_clock::now();
      .                 for (int x : data)
      .                     root = bst_insert(root, x);
      .                 t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 518 ----------------------------------------
      .                 for (int x : pred_succ_data)
      .                     bst_successor(root, x);
      .                 t2 = high_resolution_clock::now();
      .                 stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
      .             }
      .         
      .             else if (tree_type == "AVL")
      .             {
      1 (0.0%)          AVLNode *root = nullptr;
      2 (0.0%)          t1 = high_resolution_clock::now();
  3,004 (0.1%)          for (int x : data)
  3,000 (0.1%)              root = avl_insert(root, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : data)
      .                     avl_search(root, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
  2,405 (0.1%)          for (int x : update_data)
      .                 {
  1,800 (0.1%)              root = avl_delete(root, x);
  1,800 (0.1%)              root = avl_insert(root, x + 1);
      .                 }
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
    304 (0.0%)          for (int x : delete_data)
    300 (0.0%)              root = avl_delete(root, x);
      .                 t2 = high_resolution_clock::now();
      .                 stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      .                 t1 = high_resolution_clock::now();
      .                 for (int x : pred_succ_data)
      .                     avl_predecessor(root, x);
      .                 t2 = high_resolution_clock::now();
      .                 stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
-- line 558 ----------------------------------------
-- line 586 ----------------------------------------
      .                     root = treap_insert(root, x + 1);
      .                 }
      .                 t2 = high_resolution_clock::now();
      .                 stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      .                 t1 = high_resolution_clock::now();
      .                 for (int x : delete_data)
      .                     root = treap_delete(root, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : pred_succ_data)
      .                     treap_predecessor(root, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : pred_succ_data)
      .                     treap_successor(root, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      4 (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
      .             }
      .         
      .             else if (tree_type == "RB")
      .             {
      .                 RBTree tree;
      .                 t1 = high_resolution_clock::now();
      .                 for (int x : data)
      .                     rbtree_insert(tree, x);
-- line 615 ----------------------------------------
-- line 669 ----------------------------------------
      .         
      .                 stats.update_time = 0;
      .                 stats.delete_time = 0;
      .                 stats.pred_time = 0;
      .                 stats.succ_time = 0;
      .             }
      .         
      .             return stats;
     12 (0.0%)  }
      .         
      .         // =========================== MAIN ===============================
      .         int main(int argc, char **argv)
     13 (0.0%)  {
      2 (0.0%)      if (argc != 4)
      .             {
      .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
      .                 return 1;
      .             }
      .         
      6 (0.0%)      string tree_type = argv[1];
      7 (0.0%)      int N = stoi(argv[2]);
      6 (0.0%)      string output_file = argv[3];
      .         
      2 (0.0%)      srand(42);
      .             vector<int> data(N);
      .             iota(data.begin(), data.end(), 0);
      4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
      .         
     10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
      9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
      9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
      .         
      8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
      .         
      .             // Always run benchmarks, only suppress writing
      4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
      .             {
      .                 ofstream out(output_file, ios::app);
      .                 if (!out)
      .                 {
      .                     cerr << "Failed to open " << output_file << endl;
      .                     return 1;
      .                 }
      .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
      .         
      .                 out << tree_type << "," << N << ","
      .                     << stats.insert_time << "," << stats.search_time << ","
      .                     << stats.update_time << "," << stats.delete_time << ","
      .                     << stats.pred_time << "," << stats.succ_time << ","
      .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
      .             }
      .         
      2 (0.0%)      report_memory_usage();
      .         
      1 (0.0%)      return 0;
     21 (0.0%)  }
      .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 189 ----------------------------------------
    .             swap(_Tp& __a, _Tp& __b)
    .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
    .         				is_nothrow_move_assignable<_Tp>>::value)
    .             {
    .         #if __cplusplus < 201103L
    .               // concept requirements
    .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
    .         #endif
1,498 (0.0%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
1,998 (0.1%)        __a = _GLIBCXX_MOVE(__b);
1,000 (0.0%)        __b = _GLIBCXX_MOVE(__tmp);
    .             }
    .         
    .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .           // DR 809. std::swap should be overloaded for array types.
    .           /// Swap the contents of two arrays.
    .           template<typename _Tp, size_t _Nm>
    .             _GLIBCXX20_CONSTEXPR
    .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 133 ----------------------------------------
    .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
    .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
    .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
    .               struct _Mod<_Tp, __m, __a, __c, true, __s>
    .               {
    .         	static _Tp
    .         	__calc(_Tp __x)
    .         	{
  500 (0.0%)  	  _Tp __res = __a * __x + __c;
    .         	  if (__m)
6,500 (0.2%)  	    __res %= __m;
    .         	  return __res;
    .         	}
    .               };
    .         
    .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
    .               inline _Tp
    .               __mod(_Tp __x)
    .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 3715 ----------------------------------------
    .            *  invocation, and significantly reduce the waste.
    .           */
    .           template<typename _IntType, typename _UniformRandomBitGenerator>
    .             pair<_IntType, _IntType>
    .             __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
    .         			   _UniformRandomBitGenerator&& __g)
    .             {
    .               _IntType __x
  998 (0.0%)  	= uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
    .               return std::make_pair(__x / __b1, __x % __b1);
    .             }
    .         
    .           /**
    .            *  @brief Shuffle the elements of a sequence using a uniform random
    .            *         number generator.
    .            *  @ingroup mutating_algorithms
    .            *  @param  __first   A forward iterator.
-- line 3731 ----------------------------------------
-- line 3734 ----------------------------------------
    .            *  @return  Nothing.
    .            *
    .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
    .            *  provide random numbers.
    .           */
    .           template<typename _RandomAccessIterator,
    .         	   typename _UniformRandomNumberGenerator>
    .             void
    4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
    .         	    _UniformRandomNumberGenerator&& __g)
    .             {
    .               // concept requirements
    .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
    .         	    _RandomAccessIterator>)
    .               __glibcxx_requires_valid_range(__first, __last);
    .         
    2 (0.0%)        if (__first == __last)
    .         	return;
    .         
    .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
    .         	_DistanceType;
    .         
    .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
    .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
    .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
    .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
    .         	_Gen;
    .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
    .         	__uc_type;
    .         
    .               const __uc_type __urngrange = __g.max() - __g.min();
    .               const __uc_type __urange = __uc_type(__last - __first);
    .         
    7 (0.0%)        if (__urngrange / __urange >= __urange)
    .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
    .               {
    .         	_RandomAccessIterator __i = __first + 1;
    .         
    .         	// Since we know the range isn't empty, an even number of elements
    .         	// means an uneven number of elements /to swap/, in which case we
    .         	// do the first one up front:
    .         
    2 (0.0%)  	if ((__urange % 2) == 0)
    .         	{
    .         	  __distr_type __d{0, 1};
    .         	  std::iter_swap(__i++, __first + __d(__g));
    .         	}
    .         
    .         	// Now we know that __last - __i is even, so we do the rest in pairs,
    .         	// using a single distribution invocation to produce swap positions
    .         	// for two successive elements at a time:
    .         
1,500 (0.0%)  	while (__i != __last)
    .         	{
  499 (0.0%)  	  const __uc_type __swap_range = __uc_type(__i - __first) + 1;
    .         
    .         	  const pair<__uc_type, __uc_type> __pospos =
  499 (0.0%)  	    __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);
    .         
    .         	  std::iter_swap(__i++, __first + __pospos.first);
    .         	  std::iter_swap(__i++, __first + __pospos.second);
    .         	}
    .         
    .         	return;
    .               }
    .         
    .               __distr_type __d;
    .         
    .               for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    .         	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    4 (0.0%)      }
    .         #endif // USE C99_STDINT
    .         
    .         #endif // C++11
    .         
    .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
    .         
    .           /**
    .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 254 ----------------------------------------
     .           template<typename _Tp>
     .             _GLIBCXX14_CONSTEXPR
     .             inline const _Tp&
     .             max(const _Tp& __a, const _Tp& __b)
     .             {
     .               // concept requirements
     .               __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
     .               //return  __a < __b ? __b : __a;
60,562 (2.0%)        if (__a < __b)
     .         	return __b;
     .               return __a;
     .             }
     .         
     .           /**
     .            *  @brief This does what you think it does.
     .            *  @ingroup sorting_algorithms
     .            *  @param  __a  A thing of arbitrary type.
-- line 270 ----------------------------------------
-- line 428 ----------------------------------------
     .             struct __copy_move<_IsMove, true, random_access_iterator_tag>
     .             {
     .               template<typename _Tp, typename _Up>
     .         	_GLIBCXX20_CONSTEXPR
     .         	static _Up*
     .         	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
     .         	{
     .         	  const ptrdiff_t _Num = __last - __first;
     6 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
     9 (0.0%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
     .         	  else if (_Num == 1)
     .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
     .         	      __assign_one(__result, __first);
     .         	  return __result + _Num;
     .         	}
     .             };
     .         
     .         _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
-- line 445 ----------------------------------------
-- line 922 ----------------------------------------
     .           template<typename _ForwardIterator, typename _Tp>
     .             _GLIBCXX20_CONSTEXPR
     .             inline typename
     .             __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
     .             __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
     .         	      const _Tp& __value)
     .             {
     .               const _Tp __tmp = __value;
     2 (0.0%)        for (; __first != __last; ++__first)
     5 (0.0%)  	*__first = __tmp;
     .             }
     .         
     .           // Specialization: for char types we can use memset.
     .           template<typename _Tp>
     .             _GLIBCXX20_CONSTEXPR
     .             inline typename
     .             __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
     .             __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
-- line 939 ----------------------------------------
-- line 1115 ----------------------------------------
     .             _GLIBCXX20_CONSTEXPR
     .             inline _OutputIterator
     .             __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
     .         	       std::random_access_iterator_tag)
     .             {
     .         #if __cplusplus >= 201103L
     .               static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
     .         #endif
     2 (0.0%)        if (__n <= 0)
     .         	return __first;
     .         
     .               __glibcxx_requires_can_increment(__first, __n);
     .         
     .               std::__fill_a(__first, __first + __n, __value);
     .               return __first + __n;
     .             }
     .         
-- line 1131 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 89 ----------------------------------------
    .             {
    .               // concept requirements
    .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
    .         				  _ForwardIterator>)
    .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
    .         	    typename iterator_traits<_ForwardIterator>::value_type>)
    .               __glibcxx_requires_valid_range(__first, __last);
    .         
4,008 (0.1%)        for (; __first != __last; ++__first)
    .         	{
1,000 (0.0%)  	  *__first = __value;
    .         	  ++__value;
    .         	}
    .             }
    .         #endif
    .         
    .         _GLIBCXX_END_NAMESPACE_VERSION
    .         
    .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 196 ----------------------------------------
    .               { return this->b(); }
    .         
    .               /**
    .                * @brief Generating functions.
    .                */
    .               template<typename _UniformRandomBitGenerator>
    .         	result_type
    .         	operator()(_UniformRandomBitGenerator& __urng)
2,000 (0.1%)          { return this->operator()(__urng, _M_param); }
    .         
    .               template<typename _UniformRandomBitGenerator>
    .         	result_type
    .         	operator()(_UniformRandomBitGenerator& __urng,
    .         		   const param_type& __p);
    .         
    .               template<typename _ForwardIterator,
    .         	       typename _UniformRandomBitGenerator>
-- line 212 ----------------------------------------
-- line 279 ----------------------------------------
    .         	    }
    .         	  return __product >> _Up_traits::__digits;
    .         	}
    .             };
    .         
    .           template<typename _IntType>
    .             template<typename _UniformRandomBitGenerator>
    .               typename uniform_int_distribution<_IntType>::result_type
3,500 (0.1%)        uniform_int_distribution<_IntType>::
    .               operator()(_UniformRandomBitGenerator& __urng,
    .         		 const param_type& __param)
    .               {
    .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
    .         	typedef typename make_unsigned<result_type>::type __utype;
    .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
    .         
    .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
    .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
    .         	static_assert( __urngmin < __urngmax,
    .         	    "Uniform random bit generator must define min() < max()");
    .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
    .         
1,000 (0.0%)  	const __uctype __urange
    .         	  = __uctype(__param.b()) - __uctype(__param.a());
    .         
    .         	__uctype __ret;
1,000 (0.0%)  	if (__urngrange > __urange)
    .         	  {
    .         	    // downscaling
    .         
  500 (0.0%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
    .         
    .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
    .         #if __SIZEOF_INT128__
    .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
    .         	      {
    .         		// __urng produces values that use exactly 64-bits,
    .         		// so use 128-bit integers to downscale to desired range.
    .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
    .         		// so use 64-bit integers to downscale to desired range.
    .         		__UINT32_TYPE__ __u32erange = __uerange;
    .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
    .         	      }
    .         	    else
    .         #endif
    .         	      {
    .         		// fallback case (2 divisions)
2,500 (0.1%)  		const __uctype __scaling = __urngrange / __uerange;
  500 (0.0%)  		const __uctype __past = __uerange * __scaling;
    .         		do
  500 (0.0%)  		  __ret = __uctype(__urng()) - __urngmin;
1,000 (0.0%)  		while (__ret >= __past);
1,500 (0.0%)  		__ret /= __scaling;
    .         	      }
    .         	  }
    .         	else if (__urngrange < __urange)
    .         	  {
    .         	    // upscaling
    .         	    /*
    .         	      Note that every value in [0, urange]
    .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
    .         			 (__urng, param_type(0, __urange / __uerngrange)));
    .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
    .         	      }
    .         	    while (__ret > __urange || __ret < __tmp);
    .         	  }
    .         	else
    .         	  __ret = __uctype(__urng()) - __urngmin;
    .         
  500 (0.0%)  	return __ret + __param.a();
3,000 (0.1%)        }
    .         
    .         
    .           template<typename _IntType>
    .             template<typename _ForwardIterator,
    .         	     typename _UniformRandomBitGenerator>
    .               void
    .               uniform_int_distribution<_IntType>::
    .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_______________ 

  830,954 (26.9%)    annotated: files known & above threshold & readable, line numbers known
        0            annotated: files known & above threshold & readable, line numbers unknown
        0          unannotated: files known & above threshold & two or more non-identical
2,169,016 (70.2%)  unannotated: files known & above threshold & unreadable 
   54,587  (1.8%)  unannotated: files known & below threshold
   36,270  (1.2%)  unannotated: files unknown

