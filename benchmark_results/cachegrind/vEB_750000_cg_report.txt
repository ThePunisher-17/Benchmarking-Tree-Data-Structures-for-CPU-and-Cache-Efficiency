--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13873
Command:          ./benchmark vEB 750000 benchmark_results/csv/vEB_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ 

190,177,187 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________  file:function

< 69,903,174 (36.8%, 36.8%)  /usr/include/c++/13/bits/stl_algo.h:
  53,944,851 (28.4%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
  11,458,079  (6.0%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
   4,500,012  (2.4%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

< 29,898,534 (15.7%, 52.5%)  /usr/include/c++/13/bits/predefined_ops.h:
  27,134,366 (14.3%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   2,764,081  (1.5%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

< 23,250,158 (12.2%, 64.7%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

< 20,517,420 (10.8%, 75.5%)  /home/pratik/Desktop/Details 3/main.cpp:
  20,517,165 (10.8%)           build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int)

< 14,718,450  (7.7%, 83.2%)  /usr/include/c++/13/bits/stl_iterator.h:
   6,190,201  (3.3%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   5,528,163  (2.9%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
   3,000,002  (1.6%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

< 10,500,805  (5.5%, 88.8%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  8,797,958  (4.6%, 93.4%)  /usr/include/c++/13/bits/move.h:
   5,797,962  (3.0%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   2,999,996  (1.6%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<  3,750,008  (2.0%, 95.4%)  /usr/include/c++/13/bits/stl_numeric.h:main

<  3,000,013  (1.6%, 96.9%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<  1,875,077  (1.0%, 97.9%)  /usr/include/c++/13/bits/stl_algobase.h:
   1,875,000  (1.0%)           std::vector<int, std::allocator<int> >::_M_fill_assign(unsigned long, int const&)

<  1,048,747  (0.6%, 98.5%)  /usr/include/c++/13/bits/stl_vector.h:
   1,048,576  (0.6%)           build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int)

<    979,294  (0.5%, 99.0%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
     978,317  (0.5%)           __memcpy_avx_unaligned_erms

<    795,772  (0.4%, 99.4%)  ./elf/./elf/dl-lookup.c:
     497,744  (0.3%)           do_lookup_x

<    492,502  (0.3%, 99.7%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________  function:file

> 93,067,380 (48.9%, 48.9%)  void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]:
  53,944,851 (28.4%)           /usr/include/c++/13/bits/stl_algo.h
  27,134,366 (14.3%)           /usr/include/c++/13/bits/predefined_ops.h
   6,190,201  (3.3%)           /usr/include/c++/13/bits/stl_iterator.h
   5,797,962  (3.0%)           /usr/include/c++/13/bits/move.h

> 33,750,963 (17.7%, 66.7%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
  23,250,158 (12.2%)           /usr/include/c++/13/bits/uniform_int_dist.h
  10,500,805  (5.5%)           /usr/include/c++/13/bits/random.h

> 21,565,741 (11.3%, 78.0%)  build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int):
  20,517,165 (10.8%)           /home/pratik/Desktop/Details 3/main.cpp
   1,048,576  (0.6%)           /usr/include/c++/13/bits/stl_vector.h

> 19,750,451 (10.4%, 88.4%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
  11,458,079  (6.0%)           /usr/include/c++/13/bits/stl_algo.h
   5,528,163  (2.9%)           /usr/include/c++/13/bits/stl_iterator.h
   2,764,081  (1.5%)           /usr/include/c++/13/bits/predefined_ops.h

> 10,500,010  (5.5%, 93.9%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
   4,500,012  (2.4%)           /usr/include/c++/13/bits/stl_algo.h
   3,000,002  (1.6%)           /usr/include/c++/13/bits/stl_iterator.h
   2,999,996  (1.6%)           /usr/include/c++/13/bits/move.h

>  3,750,189  (2.0%, 95.9%)  main:
   3,750,008  (2.0%)           /usr/include/c++/13/bits/stl_numeric.h

>  3,000,013  (1.6%, 97.5%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>  1,875,044  (1.0%, 98.5%)  std::vector<int, std::allocator<int> >::_M_fill_assign(unsigned long, int const&):
   1,875,000  (1.0%)           /usr/include/c++/13/bits/stl_algobase.h

>    978,317  (0.5%, 99.0%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    677,769  (0.4%, 99.3%)  _dl_lookup_symbol_x:
     492,502  (0.3%)           ./elf/../sysdeps/generic/dl-new-hash.h

>    514,812  (0.3%, 99.6%)  do_lookup_x:
     497,744  (0.3%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir______________ 

-- line 15 ----------------------------------------
        .         using namespace std;
        .         using namespace chrono;
        .         
        .         // ================= Memory Profiler =================
        .         size_t current_allocated_bytes = 0;
        .         size_t peak_allocated_bytes = 0;
        .         
        .         void *operator new(std::size_t size) noexcept(false)
        1 (0.0%)  {
       24 (0.0%)      current_allocated_bytes += size;
       14 (0.0%)      if (current_allocated_bytes > peak_allocated_bytes)
       11 (0.0%)          peak_allocated_bytes = current_allocated_bytes;
       19 (0.0%)      return malloc(size);
        .         }
        .         
        .         void operator delete(void *ptr) noexcept
        7 (0.0%)  {
        7 (0.0%)      free(ptr);
        .         }
        .         
        .         long get_peak_rss_kb()
        .         {
        .             struct rusage r;
        3 (0.0%)      getrusage(RUSAGE_SELF, &r);
        .             return r.ru_maxrss;
        .         }
        .         
        .         void report_memory_usage(std::ostream &out = std::cout)
        7 (0.0%)  {
        .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
        .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
        2 (0.0%)  }
        .         
        .         // ================= Benchmark Struct =================
        .         struct OperationStats
        .         {
        .             double insert_time = 0;
        .             double search_time = 0;
        .             double update_time = 0;
        .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 439 ----------------------------------------
        .         {
        .             auto it = tree.upper_bound(key);
        .             if (it == tree.end())
        .                 return -1;
        .             return *it;
        .         }
        .         
        .         // ==================== vEB Tree ====================
        4 (0.0%)  vector<int> vebTree;
        .         
        .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
3,242,898 (1.7%)  {
4,253,032 (2.2%)      if (low > high || index >= (int)vebTree.size())
        .                 return;
3,107,285 (1.6%)      int mid = (low + high) / 2;
3,107,285 (1.6%)      vebTree[index] = sorted[mid];
3,107,285 (1.6%)      build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
1,242,914 (0.7%)      build_veb_layout(sorted, mid + 1, high, 2 * index + 2);
2,456,466 (1.3%)  }
        .         
        .         bool veb_search(int key)
        .         {
        .             int i = 0, n = vebTree.size();
        .             while (i < n && vebTree[i] != -1)
        .             {
        .                 if (vebTree[i] == key)
        .                     return true;
-- line 465 ----------------------------------------
-- line 469 ----------------------------------------
        .         }
        .         
        .         // ==================== Benchmark Dispatcher ====================
        .         OperationStats benchmark_tree(const string &tree_type,
        .                                       const vector<int> &data,
        .                                       const vector<int> &update_data,
        .                                       const vector<int> &delete_data,
        .                                       const vector<int> &pred_succ_data)
       16 (0.0%)  {
        4 (0.0%)      OperationStats stats;
        1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
        .         
        .             if (tree_type == "BST")
        .             {
        .                 BSTNode *root = nullptr;
        .                 t1 = high_resolution_clock::now();
        .                 for (int x : data)
        .                     root = bst_insert(root, x);
        .                 t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 649 ----------------------------------------
        .                 t2 = high_resolution_clock::now();
        .                 stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
        .             }
        .         
        .             else if (tree_type == "vEB")
        .             {
        .                 vector<int> sorted = data;
        .                 sort(sorted.begin(), sorted.end());
        1 (0.0%)          vebTree.assign(sorted.size(), -1);
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
        5 (0.0%)          build_veb_layout(sorted, 0, sorted.size() - 1, 0);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
        .                 for (int x : data)
        .                     veb_search(x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        .                 stats.update_time = 0;
        .                 stats.delete_time = 0;
        .                 stats.pred_time = 0;
        .                 stats.succ_time = 0;
        .             }
        .         
        1 (0.0%)      return stats;
       12 (0.0%)  }
        .         
        .         // =========================== MAIN ===============================
        .         int main(int argc, char **argv)
       13 (0.0%)  {
        2 (0.0%)      if (argc != 4)
        .             {
        .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
        .                 return 1;
        .             }
        .         
        6 (0.0%)      string tree_type = argv[1];
        7 (0.0%)      int N = stoi(argv[2]);
        6 (0.0%)      string output_file = argv[3];
        .         
        2 (0.0%)      srand(42);
        .             vector<int> data(N);
        .             iota(data.begin(), data.end(), 0);
        4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
        .         
       10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
        9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
        9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
        .         
        8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
        .         
        .             // Always run benchmarks, only suppress writing
        4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
        .             {
        .                 ofstream out(output_file, ios::app);
        .                 if (!out)
        .                 {
        .                     cerr << "Failed to open " << output_file << endl;
        .                     return 1;
        .                 }
        .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
        .         
        .                 out << tree_type << "," << N << ","
        .                     << stats.insert_time << "," << stats.search_time << ","
        .                     << stats.update_time << "," << stats.delete_time << ","
        .                     << stats.pred_time << "," << stats.succ_time << ","
        .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
        .             }
        .         
        2 (0.0%)      report_memory_usage();
        .         
        1 (0.0%)      return 0;
       21 (0.0%)  }
        .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 189 ----------------------------------------
        .             swap(_Tp& __a, _Tp& __b)
        .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        .         				is_nothrow_move_assignable<_Tp>>::value)
        .             {
        .         #if __cplusplus < 201103L
        .               // concept requirements
        .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        .         #endif
  749,999 (0.4%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
4,423,605 (2.3%)        __a = _GLIBCXX_MOVE(__b);
3,624,354 (1.9%)        __b = _GLIBCXX_MOVE(__tmp);
        .             }
        .         
        .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           // DR 809. std::swap should be overloaded for array types.
        .           /// Swap the contents of two arrays.
        .           template<typename _Tp, size_t _Nm>
        .             _GLIBCXX20_CONSTEXPR
        .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir_______________ 

-- line 36 ----------------------------------------
         .         {
         .         namespace __ops
         .         {
         .           struct _Iter_less_iter
         .           {
         .             template<typename _Iterator1, typename _Iterator2>
         .               _GLIBCXX14_CONSTEXPR
         .               bool
 8,875,484 (4.7%)        operator()(_Iterator1 __it1, _Iterator2 __it2) const
18,258,927 (9.6%)        { return *__it1 < *__it2; }
         .           };
         .         
         .           _GLIBCXX14_CONSTEXPR
         .           inline _Iter_less_iter
         .           __iter_less_iter()
         .           { return _Iter_less_iter(); }
         .         
         .           struct _Iter_less_val
-- line 53 ----------------------------------------
-- line 90 ----------------------------------------
         .             _GLIBCXX20_CONSTEXPR
         .             explicit
         .             _Val_less_iter(_Iter_less_iter) { }
         .         
         .             template<typename _Value, typename _Iterator>
         .               _GLIBCXX20_CONSTEXPR
         .               bool
         .               operator()(_Value& __val, _Iterator __it) const
 2,764,123 (1.5%)        { return __val < *__it; }
         .           };
         .         
         .           _GLIBCXX20_CONSTEXPR
         .           inline _Val_less_iter
         .           __val_less_iter()
         .           { return _Val_less_iter(); }
         .         
         .           _GLIBCXX20_CONSTEXPR
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 133 ----------------------------------------
        .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
        .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
        .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
        .               struct _Mod<_Tp, __m, __a, __c, true, __s>
        .               {
        .         	static _Tp
        .         	__calc(_Tp __x)
        .         	{
  750,062 (0.4%)  	  _Tp __res = __a * __x + __c;
        .         	  if (__m)
9,750,743 (5.1%)  	    __res %= __m;
        .         	  return __res;
        .         	}
        .               };
        .         
        .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
        .               inline _Tp
        .               __mod(_Tp __x)
        .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir________________ 

-- line 80 ----------------------------------------
         .          
         .            /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
         .            template<typename _Iterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              void
         .              __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
         .          			   _Iterator __c, _Compare __comp)
         .              {
   156,212  (0.1%)        if (__comp(__a, __b))
         .          	{
    77,844  (0.0%)  	  if (__comp(__b, __c))
         .          	    std::iter_swap(__result, __b);
    41,172  (0.0%)  	  else if (__comp(__a, __c))
         .          	    std::iter_swap(__result, __c);
         .          	  else
         .          	    std::iter_swap(__result, __a);
         .          	}
    78,368  (0.0%)        else if (__comp(__a, __c))
         .          	std::iter_swap(__result, __a);
    42,006  (0.0%)        else if (__comp(__b, __c))
         .          	std::iter_swap(__result, __c);
         .                else
         .          	std::iter_swap(__result, __b);
         .              }
         .          
         .            /// Provided for stable_partition to use.
         .            template<typename _InputIterator, typename _Predicate>
         .              _GLIBCXX20_CONSTEXPR
-- line 107 ----------------------------------------
-- line 1788 ----------------------------------------
         .            /// This is a helper function for the sort routine.
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              void
         .              __unguarded_linear_insert(_RandomAccessIterator __last,
         .          			      _Compare __comp)
         .              {
         .                typename iterator_traits<_RandomAccessIterator>::value_type
   749,984  (0.4%)  	__val = _GLIBCXX_MOVE(*__last);
         .                _RandomAccessIterator __next = __last;
         .                --__next;
 6,444,127  (3.4%)        while (__comp(__val, __next))
         .          	{
 2,014,129  (1.1%)  	  *__last = _GLIBCXX_MOVE(*__next);
         .          	  __last = __next;
         .          	  --__next;
         .          	}
   749,994  (0.4%)        *__last = _GLIBCXX_MOVE(__val);
         .              }
         .          
         .            /// This is a helper function for the sort routine.
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              void
         7  (0.0%)      __insertion_sort(_RandomAccessIterator __first,
         .          		     _RandomAccessIterator __last, _Compare __comp)
         .              {
         2  (0.0%)        if (__first == __last) return;
         .          
        47  (0.0%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
         .          	{
        30  (0.0%)  	  if (__comp(__i, __first))
         .          	    {
         .          	      typename iterator_traits<_RandomAccessIterator>::value_type
         .          		__val = _GLIBCXX_MOVE(*__i);
         .          	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
         5  (0.0%)  	      *__first = _GLIBCXX_MOVE(__val);
         .          	    }
         .          	  else
         .          	    std::__unguarded_linear_insert(__i,
         .          				__gnu_cxx::__ops::__val_comp_iter(__comp));
         .          	}
         6  (0.0%)      }
         .          
         .            /// This is a helper function for the sort routine.
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              inline void
         .              __unguarded_insertion_sort(_RandomAccessIterator __first,
         .          			       _RandomAccessIterator __last, _Compare __comp)
         .              {
 1,499,971  (0.8%)        for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
         .          	std::__unguarded_linear_insert(__i,
         .          				__gnu_cxx::__ops::__val_comp_iter(__comp));
         .              }
         .          
         .            /**
         .             *  @doctodo
         .             *  This controls some aspect of the sort routines.
         .            */
-- line 1847 ----------------------------------------
-- line 1849 ----------------------------------------
         .          
         .            /// This is a helper function for the sort routine.
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              void
         .              __final_insertion_sort(_RandomAccessIterator __first,
         .          			   _RandomAccessIterator __last, _Compare __comp)
         .              {
         2  (0.0%)        if (__last - __first > int(_S_threshold))
         .          	{
         3  (0.0%)  	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
         .          	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
         .          					  __comp);
         .          	}
         .                else
         .          	std::__insertion_sort(__first, __last, __comp);
         .              }
         .          
         .            /// This is a helper function...
-- line 1867 ----------------------------------------
-- line 1869 ----------------------------------------
         .              _GLIBCXX20_CONSTEXPR
         .              _RandomAccessIterator
         .              __unguarded_partition(_RandomAccessIterator __first,
         .          			  _RandomAccessIterator __last,
         .          			  _RandomAccessIterator __pivot, _Compare __comp)
         .              {
         .                while (true)
         .          	{
24,250,941 (12.8%)  	  while (__comp(__first, __pivot))
         .          	    ++__first;
         .          	  --__last;
21,882,377 (11.5%)  	  while (__comp(__pivot, __last))
         .          	    --__last;
 5,846,259  (3.1%)  	  if (!(__first < __last))
         .          	    return __first;
         .          	  std::iter_swap(__first, __last);
         .          	  ++__first;
         .          	}
         .              }
         .          
         .            /// This is a helper function...
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              inline _RandomAccessIterator
         .              __unguarded_partition_pivot(_RandomAccessIterator __first,
         .          				_RandomAccessIterator __last, _Compare __comp)
         .              {
    78,106  (0.0%)        _RandomAccessIterator __mid = __first + (__last - __first) / 2;
         .                std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
         .          				  __comp);
         .                return std::__unguarded_partition(__first + 1, __last, __first, __comp);
         .              }
         .          
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              inline void
-- line 1904 ----------------------------------------
-- line 1910 ----------------------------------------
         .                std::__heap_select(__first, __middle, __last, __comp);
         .                std::__sort_heap(__first, __middle, __comp);
         .              }
         .          
         .            /// This is a helper function for the sort routine.
         .            template<typename _RandomAccessIterator, typename _Size, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              void
   289,512  (0.2%)      __introsort_loop(_RandomAccessIterator __first,
         .          		     _RandomAccessIterator __last,
         .          		     _Size __depth_limit, _Compare __comp)
         .              {
   312,426  (0.2%)        while (__last - __first > int(_S_threshold))
         .          	{
   240,046  (0.1%)  	  if (__depth_limit == 0)
         .          	    {
         .          	      std::__partial_sort(__first, __last, __last, __comp);
         .          	      return;
         .          	    }
    78,106  (0.0%)  	  --__depth_limit;
         .          	  _RandomAccessIterator __cut =
         .          	    std::__unguarded_partition_pivot(__first, __last, __comp);
   312,424  (0.2%)  	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
         .          	  __last = __cut;
         .          	}
   259,052  (0.1%)      }
         .          
         .            // sort
         .          
         .            template<typename _RandomAccessIterator, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
         .              inline void
         .              __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
         .          	   _Compare __comp)
         .              {
         .                if (__first != __last)
         .          	{
         4  (0.0%)  	  std::__introsort_loop(__first, __last,
         .          				std::__lg(__last - __first) * 2,
         .          				__comp);
         .          	  std::__final_insertion_sort(__first, __last, __comp);
         .          	}
         .              }
         .          
         .            template<typename _RandomAccessIterator, typename _Size, typename _Compare>
         .              _GLIBCXX20_CONSTEXPR
-- line 1955 ----------------------------------------
-- line 3734 ----------------------------------------
         .             *  @return  Nothing.
         .             *
         .             *  Reorders the elements in the range @p [__first,__last) using @p __g to
         .             *  provide random numbers.
         .            */
         .            template<typename _RandomAccessIterator,
         .          	   typename _UniformRandomNumberGenerator>
         .              void
         4  (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
         .          	    _UniformRandomNumberGenerator&& __g)
         .              {
         .                // concept requirements
         .                __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
         .          	    _RandomAccessIterator>)
         .                __glibcxx_requires_valid_range(__first, __last);
         .          
         2  (0.0%)        if (__first == __last)
         .          	return;
         .          
         .                typedef typename iterator_traits<_RandomAccessIterator>::difference_type
         .          	_DistanceType;
         .          
         .                typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
         .                typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
         .                typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
         .                typedef typename remove_reference<_UniformRandomNumberGenerator>::type
         .          	_Gen;
         .                typedef typename common_type<typename _Gen::result_type, __ud_type>::type
         .          	__uc_type;
         .          
         .                const __uc_type __urngrange = __g.max() - __g.min();
         .                const __uc_type __urange = __uc_type(__last - __first);
         .          
         6  (0.0%)        if (__urngrange / __urange >= __urange)
         .                  // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
         .                {
         .          	_RandomAccessIterator __i = __first + 1;
         .          
         .          	// Since we know the range isn't empty, an even number of elements
         .          	// means an uneven number of elements /to swap/, in which case we
         .          	// do the first one up front:
         .          
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
         .          	  std::iter_swap(__i++, __first + __pospos.second);
         .          	}
         .          
         .          	return;
         .                }
         .          
         .                __distr_type __d;
         .          
 2,249,999  (1.2%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 2,249,997  (1.2%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
         4  (0.0%)      }
         .          #endif // USE C99_STDINT
         .          
         .          #endif // C++11
         .          
         .          _GLIBCXX_BEGIN_NAMESPACE_ALGO
         .          
         .            /**
         .             *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 415 ----------------------------------------
        .         	      ++__result;
        .         	    }
        .         	  return __result;
        .         	}
        .         
        .               template<typename _Tp, typename _Up>
        .         	static void
        .         	__assign_one(_Tp* __to, _Up* __from)
        2 (0.0%)  	{ *__to = std::move(*__from); }
        .             };
        .         #endif
        .         
        .           template<bool _IsMove>
        .             struct __copy_move<_IsMove, true, random_access_iterator_tag>
        .             {
        .               template<typename _Tp, typename _Up>
        .         	_GLIBCXX20_CONSTEXPR
        .         	static _Up*
        .         	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
        .         	{
        .         	  const ptrdiff_t _Num = __last - __first;
        8 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
       13 (0.0%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
        .         	  else if (_Num == 1)
        .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
        .         	      __assign_one(__result, __first);
        .         	  return __result + _Num;
        .         	}
        .             };
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
-- line 445 ----------------------------------------
-- line 738 ----------------------------------------
        .           template<bool _IsMove>
        .             struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
        .             {
        .               template<typename _Tp, typename _Up>
        .         	_GLIBCXX20_CONSTEXPR
        .         	static _Up*
        .         	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
        .         	{
       10 (0.0%)  	  const ptrdiff_t _Num = __last - __first;
       10 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
       22 (0.0%)  	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
        1 (0.0%)  	  else if (_Num == 1)
        .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
        .         	      __assign_one(__result - 1, __first);
        .         	  return __result - _Num;
        .         	}
        .             };
        .         
        .           template<bool _IsMove, typename _BI1, typename _BI2>
        .             _GLIBCXX20_CONSTEXPR
-- line 757 ----------------------------------------
-- line 922 ----------------------------------------
        .           template<typename _ForwardIterator, typename _Tp>
        .             _GLIBCXX20_CONSTEXPR
        .             inline typename
        .             __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
        .             __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
        .         	      const _Tp& __value)
        .             {
        .               const _Tp __tmp = __value;
1,125,002 (0.6%)        for (; __first != __last; ++__first)
  750,005 (0.4%)  	*__first = __tmp;
        .             }
        .         
        .           // Specialization: for char types we can use memset.
        .           template<typename _Tp>
        .             _GLIBCXX20_CONSTEXPR
        .             inline typename
        .             __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
        .             __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
-- line 939 ----------------------------------------
-- line 1115 ----------------------------------------
        .             _GLIBCXX20_CONSTEXPR
        .             inline _OutputIterator
        .             __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        .         	       std::random_access_iterator_tag)
        .             {
        .         #if __cplusplus >= 201103L
        .               static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
        .         #endif
        2 (0.0%)        if (__n <= 0)
        .         	return __first;
        .         
        .               __glibcxx_requires_can_increment(__first, __n);
        .         
        .               std::__fill_a(__first, __first + __n, __value);
        .               return __first + __n;
        .             }
        .         
-- line 1131 ----------------------------------------
-- line 1510 ----------------------------------------
        .         
        .           /// This is a helper function for the sort routines and for random.tcc.
        .           //  Precondition: __n > 0.
        .           template<typename _Tp>
        .             inline _GLIBCXX_CONSTEXPR _Tp
        .             __lg(_Tp __n)
        .             {
        .         #if __cplusplus >= 201402L
        2 (0.0%)        return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
        .         #else
        .               // Use +__n so it promotes to at least int.
        .               return (sizeof(+__n) * __CHAR_BIT__ - 1)
        .         	       - (sizeof(+__n) == sizeof(long long)
        .         		    ? __builtin_clzll(+__n)
        .         		    : (sizeof(+__n) == sizeof(long)
        .         			 ? __builtin_clzl(+__n)
        .         			 : __builtin_clz(+__n)));
-- line 1526 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 1103 ----------------------------------------
        .               pointer
        .               operator->() const _GLIBCXX_NOEXCEPT
        .               { return _M_current; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator++() _GLIBCXX_NOEXCEPT
        .               {
5,041,846 (2.7%)  	++_M_current;
        .         	return *this;
        .               }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator++(int) _GLIBCXX_NOEXCEPT
        .               { return __normal_iterator(_M_current++); }
        .         
        .               // Bidirectional iterator requirements
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
2,014,129 (1.1%)        operator--() _GLIBCXX_NOEXCEPT
        .               {
4,235,741 (2.2%)  	--_M_current;
        .         	return *this;
        .               }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator--(int) _GLIBCXX_NOEXCEPT
        .               { return __normal_iterator(_M_current--); }
        .         
-- line 1133 ----------------------------------------
-- line 1140 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current += __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  864,304 (0.5%)        { return __normal_iterator(_M_current + __n); }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current -= __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
        .             { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
        .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
        .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
        .             _GLIBCXX_NOEXCEPT
2,562,430 (1.3%)      { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline __normal_iterator<_Iterator, _Container>
        .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
        .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
        .             _GLIBCXX_NOEXCEPT
        .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 89 ----------------------------------------
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .         				  _ForwardIterator>)
        .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
        .         	    typename iterator_traits<_ForwardIterator>::value_type>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
3,000,008 (1.6%)        for (; __first != __last; ++__first)
        .         	{
  750,000 (0.4%)  	  *__first = __value;
        .         	  ++__value;
        .         	}
        .             }
        .         #endif
        .         
        .         _GLIBCXX_END_NAMESPACE_VERSION
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 92 ----------------------------------------
        .               struct _Vector_impl_data
        .               {
        .         	pointer _M_start;
        .         	pointer _M_finish;
        .         	pointer _M_end_of_storage;
        .         
        .         	_GLIBCXX20_CONSTEXPR
        .         	_Vector_impl_data() _GLIBCXX_NOEXCEPT
       17 (0.0%)  	: _M_start(), _M_finish(), _M_end_of_storage()
        .         	{ }
        .         
        .         #if __cplusplus >= 201103L
        .         	_GLIBCXX20_CONSTEXPR
        .         	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
        .         	: _M_start(__x._M_start), _M_finish(__x._M_finish),
        .         	  _M_end_of_storage(__x._M_end_of_storage)
        .         	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
        .         #endif
        .         
        .         	_GLIBCXX20_CONSTEXPR
        .         	void
        .         	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
        .         	{
        1 (0.0%)  	  _M_start = __x._M_start;
        1 (0.0%)  	  _M_finish = __x._M_finish;
        1 (0.0%)  	  _M_end_of_storage = __x._M_end_of_storage;
        .         	}
        .         
        .         	_GLIBCXX20_CONSTEXPR
        .         	void
        .         	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
        .         	{
        .         	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
        .         	  // information used by TBAA.
-- line 125 ----------------------------------------
-- line 362 ----------------------------------------
        .               : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
        .               { }
        .         #endif
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               ~_Vector_base() _GLIBCXX_NOEXCEPT
        .               {
        .         	_M_deallocate(_M_impl._M_start,
       18 (0.0%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
        .               }
        .         
        .             public:
        .               _Vector_impl _M_impl;
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               pointer
        .               _M_allocate(size_t __n)
        .               {
        .         	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
        9 (0.0%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
        .               }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               _M_deallocate(pointer __p, size_t __n)
        .               {
        .         	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
       14 (0.0%)  	if (__p)
        .         	  _Tr::deallocate(_M_impl, __p, __n);
        .               }
        .         
        .             protected:
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               _M_create_storage(size_t __n)
        .               {
        6 (0.0%)  	this->_M_impl._M_start = this->_M_allocate(__n);
        .         	this->_M_impl._M_finish = this->_M_impl._M_start;
        7 (0.0%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        .               }
        .             };
        .         
        .           /**
        .            *  @brief A standard container which offers fixed time access to
        .            *  individual elements in any order.
        .            *
        .            *  @ingroup sequences
-- line 408 ----------------------------------------
-- line 597 ----------------------------------------
        .                *  The newly-created %vector uses a copy of the allocator object used
        .                *  by @a __x (unless the allocator traits dictate a different object).
        .                */
        .               _GLIBCXX20_CONSTEXPR
        .               vector(const vector& __x)
        .               : _Base(__x.size(),
        .         	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
        .               {
        1 (0.0%)  	this->_M_impl._M_finish =
        .         	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
        .         				      this->_M_impl._M_start,
        .         				      _M_get_Tp_allocator());
        .               }
        .         
        .         #if __cplusplus >= 201103L
        .               /**
        .                *  @brief  %Vector move constructor.
-- line 613 ----------------------------------------
-- line 699 ----------------------------------------
        .                *  no memory reallocation.  But if only input iterators are
        .                *  used, then this will do at most 2N calls to the copy
        .                *  constructor, and logN memory reallocations.
        .                */
        .         #if __cplusplus >= 201103L
        .               template<typename _InputIterator,
        .         	       typename = std::_RequireInputIter<_InputIterator>>
        .         	_GLIBCXX20_CONSTEXPR
       21 (0.0%)  	vector(_InputIterator __first, _InputIterator __last,
        .         	       const allocator_type& __a = allocator_type())
        .         	: _Base(__a)
        .         	{
        .         	  _M_range_initialize(__first, __last,
        .         			      std::__iterator_category(__first));
       18 (0.0%)  	}
        .         #else
        .               template<typename _InputIterator>
        .         	vector(_InputIterator __first, _InputIterator __last,
        .         	       const allocator_type& __a = allocator_type())
        .         	: _Base(__a)
        .         	{
        .         	  // Check whether it's an integral type.  If so, it's not an iterator.
        .         	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
-- line 721 ----------------------------------------
-- line 725 ----------------------------------------
        .         
        .               /**
        .                *  The dtor only erases the elements, and note that if the
        .                *  elements themselves are pointers, the pointed-to memory is
        .                *  not touched in any way.  Managing the pointer is the user's
        .                *  responsibility.
        .                */
        .               _GLIBCXX20_CONSTEXPR
        5 (0.0%)        ~vector() _GLIBCXX_NOEXCEPT
        .               {
        .         	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .         		      _M_get_Tp_allocator());
        .         	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
        .               }
        .         
        .               /**
        .                *  @brief  %Vector assignment operator.
-- line 741 ----------------------------------------
-- line 801 ----------------------------------------
        .                *  This function fills a %vector with @a __n copies of the given
        .                *  value.  Note that the assignment completely changes the
        .                *  %vector and that the resulting %vector's size is the same as
        .                *  the number of elements assigned.
        .                */
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               assign(size_type __n, const value_type& __val)
        3 (0.0%)        { _M_fill_assign(__n, __val); }
        .         
        .               /**
        .                *  @brief  Assigns a range to a %vector.
        .                *  @param  __first  An input iterator.
        .                *  @param  __last   An input iterator.
        .                *
        .                *  This function fills a %vector with copies of the elements in the
        .                *  range [__first,__last).
-- line 817 ----------------------------------------
-- line 985 ----------------------------------------
        .               { return const_reverse_iterator(begin()); }
        .         #endif
        .         
        .               // [23.2.4.2] capacity
        .               /**  Returns the number of elements in the %vector.  */
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               size_type
        .               size() const _GLIBCXX_NOEXCEPT
1,048,588 (0.6%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
        .         
        .               /**  Returns the size() of the largest possible %vector.  */
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               size_type
        .               max_size() const _GLIBCXX_NOEXCEPT
        .               { return _S_max_size(_M_get_Tp_allocator()); }
        .         
        .         #if __cplusplus >= 201103L
-- line 1001 ----------------------------------------
-- line 1072 ----------------------------------------
        .               /**
        .                *  Returns the total number of elements that the %vector can
        .                *  hold before needing to allocate more memory.
        .                */
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               size_type
        .               capacity() const _GLIBCXX_NOEXCEPT
        .               { return size_type(this->_M_impl._M_end_of_storage
        5 (0.0%)  			 - this->_M_impl._M_start); }
        .         
        .               /**
        .                *  Returns true if the %vector is empty.  (Thus begin() would
        .                *  equal end().)
        .                */
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               bool
        .               empty() const _GLIBCXX_NOEXCEPT
-- line 1088 ----------------------------------------
-- line 1684 ----------------------------------------
        .               template<typename _ForwardIterator>
        .         	_GLIBCXX20_CONSTEXPR
        .         	void
        .         	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
        .         			    std::forward_iterator_tag)
        .         	{
        .         	  const size_type __n = std::distance(__first, __last);
        .         	  this->_M_impl._M_start
        3 (0.0%)  	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
        6 (0.0%)  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        3 (0.0%)  	  this->_M_impl._M_finish =
        .         	    std::__uninitialized_copy_a(__first, __last,
        .         					this->_M_impl._M_start,
        .         					_M_get_Tp_allocator());
        .         	}
        .         
        .               // Called by the first initialize_dispatch above and by the
        .               // vector(n,value,a) constructor.
        .               _GLIBCXX20_CONSTEXPR
        .               void
        1 (0.0%)        _M_fill_initialize(size_type __n, const value_type& __value)
        .               {
        .         	this->_M_impl._M_finish =
        .         	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
        .         					_M_get_Tp_allocator());
        .               }
        .         
        .         #if __cplusplus >= 201103L
        .               // Called by the vector(n) constructor.
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               _M_default_initialize(size_type __n)
        .               {
        1 (0.0%)  	this->_M_impl._M_finish =
        .         	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        .         					   _M_get_Tp_allocator());
        .               }
        .         #endif
        .         
        .               // Internal assign functions follow.  The *_aux functions do the actual
        .               // assignment work for the range versions.
        .         
-- line 1725 ----------------------------------------
-- line 1901 ----------------------------------------
        .         	const size_type __len = size() + (std::max)(size(), __n);
        .         	return (__len < size() || __len > max_size()) ? max_size() : __len;
        .               }
        .         
        .               // Called by constructors to check initial size.
        .               static _GLIBCXX20_CONSTEXPR size_type
        .               _S_check_init_len(size_type __n, const allocator_type& __a)
        .               {
       18 (0.0%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
        .         	  __throw_length_error(
        .         	      __N("cannot create std::vector larger than max_size()"));
        .         	return __n;
        .               }
        .         
        .               static _GLIBCXX20_CONSTEXPR size_type
        .               _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        .               {
-- line 1917 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 279 ----------------------------------------
        .         	    }
        .         	  return __product >> _Up_traits::__digits;
        .         	}
        .             };
        .         
        .           template<typename _IntType>
        .             template<typename _UniformRandomBitGenerator>
        .               typename uniform_int_distribution<_IntType>::result_type
5,249,993 (2.8%)        uniform_int_distribution<_IntType>::
        .               operator()(_UniformRandomBitGenerator& __urng,
        .         		 const param_type& __param)
        .               {
        .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
        .         	typedef typename make_unsigned<result_type>::type __utype;
        .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
        .         
        .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
        .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
        .         	static_assert( __urngmin < __urngmax,
        .         	    "Uniform random bit generator must define min() < max()");
        .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
        .         
1,499,998 (0.8%)  	const __uctype __urange
        .         	  = __uctype(__param.b()) - __uctype(__param.a());
        .         
        .         	__uctype __ret;
1,499,998 (0.8%)  	if (__urngrange > __urange)
        .         	  {
        .         	    // downscaling
        .         
  749,999 (0.4%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
        .         
        .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
        .         #if __SIZEOF_INT128__
        .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
        .         	      {
        .         		// __urng produces values that use exactly 64-bits,
        .         		// so use 128-bit integers to downscale to desired range.
        .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
        .         		// so use 64-bit integers to downscale to desired range.
        .         		__UINT32_TYPE__ __u32erange = __uerange;
        .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
        .         	      }
        .         	    else
        .         #endif
        .         	      {
        .         		// fallback case (2 divisions)
3,749,995 (2.0%)  		const __uctype __scaling = __urngrange / __uerange;
  749,999 (0.4%)  		const __uctype __past = __uerange * __scaling;
        .         		do
  750,062 (0.4%)  		  __ret = __uctype(__urng()) - __urngmin;
1,500,124 (0.8%)  		while (__ret >= __past);
2,249,997 (1.2%)  		__ret /= __scaling;
        .         	      }
        .         	  }
        .         	else if (__urngrange < __urange)
        .         	  {
        .         	    // upscaling
        .         	    /*
        .         	      Note that every value in [0, urange]
        .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
        .         			 (__urng, param_type(0, __urange / __uerngrange)));
        .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
        .         	      }
        .         	    while (__ret > __urange || __ret < __tmp);
        .         	  }
        .         	else
        .         	  __ret = __uctype(__urng()) - __urngmin;
        .         
  749,999 (0.4%)  	return __ret + __param.a();
4,499,994 (2.4%)        }
        .         
        .         
        .           template<typename _IntType>
        .             template<typename _ForwardIterator,
        .         	     typename _UniformRandomBitGenerator>
        .               void
        .               uniform_int_distribution<_IntType>::
        .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ 

184,260,331 (96.9%)    annotated: files known & above threshold & readable, line numbers known
          0            annotated: files known & above threshold & readable, line numbers unknown
          0          unannotated: files known & above threshold & two or more non-identical
  5,267,581  (2.8%)  unannotated: files known & above threshold & unreadable 
    620,701  (0.3%)  unannotated: files known & below threshold
     28,574  (0.0%)  unannotated: files unknown

