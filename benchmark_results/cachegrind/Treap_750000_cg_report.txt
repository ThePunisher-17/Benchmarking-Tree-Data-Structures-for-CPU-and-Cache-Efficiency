--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13631
Command:          ./benchmark Treap 750000 benchmark_results/csv/Treap_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir____________________ 

1,292,724,266 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir________________________  file:function

< 957,921,798 (74.1%, 74.1%)  /home/pratik/Desktop/Details 3/main.cpp:
  676,733,189 (52.3%)           treap_insert(TreapNode*, int)
  270,755,987 (20.9%)           treap_delete(TreapNode*, int)
    9,450,084  (0.7%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

< 220,372,840 (17.0%, 91.1%)  ./malloc/./malloc/malloc.c:
  104,889,311  (8.1%)           _int_malloc
   39,811,534  (3.1%)           malloc
   34,009,758  (2.6%)           _int_free
   18,457,289  (1.4%)           malloc_consolidate
   13,753,184  (1.1%)           free
    6,449,748  (0.5%)           unlink_chunk.isra.0
    3,000,032  (0.2%)           alloc_perturb

<  24,749,106  (1.9%, 93.1%)  ./stdlib/./stdlib/random_r.c:
   24,742,894  (1.9%)           random_r

<  23,250,158  (1.8%, 94.9%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  20,347,982  (1.6%, 96.4%)  ./stdlib/./stdlib/random.c:
   20,347,962  (1.6%)           random

<  10,500,805  (0.8%, 97.2%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<   7,496,912  (0.6%, 97.8%)  ???:
    6,489,656  (0.5%)           ???

<   5,308,164  (0.4%, 98.2%)  ./stdlib/./stdlib/rand.c:rand

<   4,500,012  (0.3%, 98.6%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   3,750,008  (0.3%, 98.9%)  /usr/include/c++/13/bits/stl_numeric.h:main

<   3,000,017  (0.2%, 99.1%)  /usr/include/c++/13/bits/stl_iterator.h:
    3,000,002  (0.2%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   3,000,013  (0.2%, 99.3%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<   2,999,996  (0.2%, 99.6%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   2,973,627  (0.2%, 99.8%)  ./malloc/./malloc/arena.c:
    1,500,015  (0.1%)           malloc
    1,473,540  (0.1%)           free

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________  function:file

> 676,733,189 (52.3%, 52.3%)  treap_insert(TreapNode*, int):/home/pratik/Desktop/Details 3/main.cpp

> 270,755,987 (20.9%, 73.3%)  treap_delete(TreapNode*, int):/home/pratik/Desktop/Details 3/main.cpp

> 104,889,311  (8.1%, 81.4%)  _int_malloc:./malloc/./malloc/malloc.c

>  41,311,549  (3.2%, 84.6%)  malloc:
   39,811,534  (3.1%)           ./malloc/./malloc/malloc.c
    1,500,015  (0.1%)           ./malloc/./malloc/arena.c

>  34,009,758  (2.6%, 87.2%)  _int_free:./malloc/./malloc/malloc.c

>  33,750,963  (2.6%, 89.8%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   23,250,158  (1.8%)           /usr/include/c++/13/bits/uniform_int_dist.h
   10,500,805  (0.8%)           /usr/include/c++/13/bits/random.h

>  24,742,894  (1.9%, 91.8%)  random_r:./stdlib/./stdlib/random_r.c

>  20,347,962  (1.6%, 93.3%)  random:./stdlib/./stdlib/random.c

>  18,457,289  (1.4%, 94.8%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  15,226,724  (1.2%, 95.9%)  free:
   13,753,184  (1.1%)           ./malloc/./malloc/malloc.c
    1,473,540  (0.1%)           ./malloc/./malloc/arena.c

>  10,500,010  (0.8%, 96.8%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
    4,500,012  (0.3%)           /usr/include/c++/13/bits/stl_algo.h
    3,000,002  (0.2%)           /usr/include/c++/13/bits/stl_iterator.h
    2,999,996  (0.2%)           /usr/include/c++/13/bits/move.h

>   9,450,139  (0.7%, 97.5%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
    9,450,084  (0.7%)           /home/pratik/Desktop/Details 3/main.cpp

>   6,489,656  (0.5%, 98.0%)  ???:???

>   6,449,748  (0.5%, 98.5%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>   5,308,164  (0.4%, 98.9%)  rand:./stdlib/./stdlib/rand.c

>   3,750,189  (0.3%, 99.2%)  main:
    3,750,008  (0.3%)           /usr/include/c++/13/bits/stl_numeric.h

>   3,000,032  (0.2%, 99.4%)  alloc_perturb:./malloc/./malloc/malloc.c

>   3,000,013  (0.2%, 99.6%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir_________________ 

-- line 15 ----------------------------------------
          .          using namespace std;
          .          using namespace chrono;
          .          
          .          // ================= Memory Profiler =================
          .          size_t current_allocated_bytes = 0;
          .          size_t peak_allocated_bytes = 0;
          .          
          .          void *operator new(std::size_t size) noexcept(false)
          1  (0.0%)  {
  2,654,100  (0.2%)      current_allocated_bytes += size;
  1,769,398  (0.1%)      if (current_allocated_bytes > peak_allocated_bytes)
    884,702  (0.1%)          peak_allocated_bytes = current_allocated_bytes;
  3,538,789  (0.3%)      return malloc(size);
          .          }
          .          
          .          void operator delete(void *ptr) noexcept
    491,184  (0.0%)  {
    491,184  (0.0%)      free(ptr);
          .          }
          .          
          .          long get_peak_rss_kb()
          .          {
          .              struct rusage r;
          3  (0.0%)      getrusage(RUSAGE_SELF, &r);
          .              return r.ru_maxrss;
          .          }
          .          
          .          void report_memory_usage(std::ostream &out = std::cout)
          7  (0.0%)  {
          .              out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
          .              out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
          2  (0.0%)  }
          .          
          .          // ================= Benchmark Struct =================
          .          struct OperationStats
          .          {
          .              double insert_time = 0;
          .              double search_time = 0;
          .              double update_time = 0;
          .              double delete_time = 0;
-- line 54 ----------------------------------------
-- line 295 ----------------------------------------
          .                  return avl_successor(root->left, key, root->key);
          .          }
          .          
          .          // ==================== Treap ====================
          .          struct TreapNode
          .          {
          .              int key, priority;
          .              TreapNode *left, *right;
  5,308,164  (0.4%)      TreapNode(int k) : key(k), priority(rand()), left(nullptr), right(nullptr) {}
          .          };
          .          
          .          TreapNode *treap_rotateRight(TreapNode *y)
          .          {
          .              TreapNode *x = y->left;
  1,132,101  (0.1%)      TreapNode *T2 = x->right;
  1,132,101  (0.1%)      x->right = y;
  1,132,101  (0.1%)      y->left = T2;
          .              return x;
          .          }
          .          
          .          TreapNode *treap_rotateLeft(TreapNode *x)
          .          {
          .              TreapNode *y = x->right;
  1,127,956  (0.1%)      TreapNode *T2 = y->left;
  1,127,956  (0.1%)      y->left = x;
  1,127,956  (0.1%)      x->right = T2;
    882,764  (0.1%)      return y;
          .          }
          .          
          .          TreapNode *treap_insert(TreapNode *root, int key)
146,301,776 (11.3%)  {
 88,487,613  (6.8%)      if (!root)
          .                  return new TreapNode(key);
 57,812,150  (4.5%)      if (key < root->key)
          .              {
 56,814,584  (4.4%)          root->left = treap_insert(root->left, key);
 42,610,938  (3.3%)          if (root->left->priority > root->priority)
          .                      root = treap_rotateRight(root);
          .              }
 14,702,429  (1.1%)      else if (key > root->key)
          .              {
 57,548,492  (4.5%)          root->right = treap_insert(root->right, key);
 43,161,369  (3.3%)          if (root->right->priority > root->priority)
          .                      root = treap_rotateLeft(root);
          .              }
          .              return root;
148,953,845 (11.5%)  }
          .          
          .          TreapNode *treap_delete(TreapNode *root, int key)
 54,058,380  (4.2%)  {
 40,509,964  (3.1%)      if (!root)
 12,564,555  (1.0%)          return root;
 26,961,548  (2.1%)      if (key < root->key)
 24,753,616  (1.9%)          root->left = treap_delete(root->left, key);
  7,292,370  (0.6%)      else if (key > root->key)
 26,217,897  (2.0%)          root->right = treap_delete(root->right, key);
          .              else
          .              {
  2,951,583  (0.2%)          if (!root->left)
          .                  {
          .                      TreapNode *temp = root->right;
    655,206  (0.1%)              delete root;
  1,473,193  (0.1%)              return temp;
          .                  }
  1,312,516  (0.1%)          else if (!root->right)
          .                  {
          .                      TreapNode *temp = root->left;
    327,152  (0.0%)              delete root;
    163,576  (0.0%)              return temp;
          .                  }
          .                  else
          .                  {
  1,478,046  (0.1%)              if (root->left->priority > root->right->priority)
          .                      {
          .                          root = treap_rotateRight(root);
    494,980  (0.0%)                  root->right = treap_delete(root->right, key);
          .                      }
          .                      else
          .                      {
          .                          root = treap_rotateLeft(root);
    490,384  (0.0%)                  root->left = treap_delete(root->left, key);
          .                      }
          .                  }
          .              }
          .              return root;
 67,572,975  (5.2%)  }
          .          
          .          bool treap_search(TreapNode *root, int key)
          .          {
          .              if (!root)
          .                  return false;
          .              if (root->key == key)
          .                  return true;
          .              return treap_search(key < root->key ? root->left : root->right, key);
-- line 388 ----------------------------------------
-- line 439 ----------------------------------------
          .          {
          .              auto it = tree.upper_bound(key);
          .              if (it == tree.end())
          .                  return -1;
          .              return *it;
          .          }
          .          
          .          // ==================== vEB Tree ====================
          4  (0.0%)  vector<int> vebTree;
          .          
          .          void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
          .          {
          .              if (low > high || index >= (int)vebTree.size())
          .                  return;
          .              int mid = (low + high) / 2;
          .              vebTree[index] = sorted[mid];
          .              build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
          .          }
          .          
          .          // ==================== Benchmark Dispatcher ====================
          .          OperationStats benchmark_tree(const string &tree_type,
          .                                        const vector<int> &data,
          .                                        const vector<int> &update_data,
          .                                        const vector<int> &delete_data,
          .                                        const vector<int> &pred_succ_data)
         16  (0.0%)  {
          4  (0.0%)      OperationStats stats;
          1  (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
          .          
          .              if (tree_type == "BST")
          .              {
          .                  BSTNode *root = nullptr;
          .                  t1 = high_resolution_clock::now();
          .                  for (int x : data)
          .                      root = bst_insert(root, x);
          .                  t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 561 ----------------------------------------
          .                  for (int x : pred_succ_data)
          .                      avl_successor(root, x);
          .                  t2 = high_resolution_clock::now();
          .                  stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
          .              }
          .          
          .              else if (tree_type == "Treap")
          .              {
          1  (0.0%)          TreapNode *root = nullptr;
          2  (0.0%)          t1 = high_resolution_clock::now();
  2,250,003  (0.2%)          for (int x : data)
  2,250,000  (0.2%)              root = treap_insert(root, x);
          1  (0.0%)          t2 = high_resolution_clock::now();
          3  (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
          .          
          2  (0.0%)          t1 = high_resolution_clock::now();
          .                  for (int x : data)
          .                      treap_search(root, x);
          1  (0.0%)          t2 = high_resolution_clock::now();
          3  (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
          .          
          2  (0.0%)          t1 = high_resolution_clock::now();
  1,800,005  (0.1%)          for (int x : update_data)
          .                  {
  1,350,000  (0.1%)              root = treap_delete(root, x);
  1,350,000  (0.1%)              root = treap_insert(root, x + 1);
          .                  }
          1  (0.0%)          t2 = high_resolution_clock::now();
          3  (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
          .          
          2  (0.0%)          t1 = high_resolution_clock::now();
    225,005  (0.0%)          for (int x : delete_data)
    225,000  (0.0%)              root = treap_delete(root, x);
          1  (0.0%)          t2 = high_resolution_clock::now();
          3  (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
          .          
          2  (0.0%)          t1 = high_resolution_clock::now();
          .                  for (int x : pred_succ_data)
          .                      treap_predecessor(root, x);
          1  (0.0%)          t2 = high_resolution_clock::now();
          3  (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
          .          
          2  (0.0%)          t1 = high_resolution_clock::now();
          .                  for (int x : pred_succ_data)
          .                      treap_successor(root, x);
          1  (0.0%)          t2 = high_resolution_clock::now();
          4  (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
          .              }
          .          
          .              else if (tree_type == "RB")
          .              {
          .                  RBTree tree;
          .                  t1 = high_resolution_clock::now();
          .                  for (int x : data)
          .                      rbtree_insert(tree, x);
-- line 615 ----------------------------------------
-- line 669 ----------------------------------------
          .          
          .                  stats.update_time = 0;
          .                  stats.delete_time = 0;
          .                  stats.pred_time = 0;
          .                  stats.succ_time = 0;
          .              }
          .          
          .              return stats;
         12  (0.0%)  }
          .          
          .          // =========================== MAIN ===============================
          .          int main(int argc, char **argv)
         13  (0.0%)  {
          2  (0.0%)      if (argc != 4)
          .              {
          .                  cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
          .                  return 1;
          .              }
          .          
          6  (0.0%)      string tree_type = argv[1];
          7  (0.0%)      int N = stoi(argv[2]);
          6  (0.0%)      string output_file = argv[3];
          .          
          2  (0.0%)      srand(42);
          .              vector<int> data(N);
          .              iota(data.begin(), data.end(), 0);
          4  (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
          .          
         10  (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
          9  (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
          9  (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
          .          
          8  (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
          .          
          .              // Always run benchmarks, only suppress writing
          4  (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
          .              {
          .                  ofstream out(output_file, ios::app);
          .                  if (!out)
          .                  {
          .                      cerr << "Failed to open " << output_file << endl;
          .                      return 1;
          .                  }
          .          
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
          .          
          .                  out << tree_type << "," << N << ","
          .                      << stats.insert_time << "," << stats.search_time << ","
          .                      << stats.update_time << "," << stats.delete_time << ","
          .                      << stats.pred_time << "," << stats.succ_time << ","
          .                      << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
          .              }
          .          
          2  (0.0%)      report_memory_usage();
          .          
          1  (0.0%)      return 0;
         21  (0.0%)  }
          .          

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 189 ----------------------------------------
        .             swap(_Tp& __a, _Tp& __b)
        .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        .         				is_nothrow_move_assignable<_Tp>>::value)
        .             {
        .         #if __cplusplus < 201103L
        .               // concept requirements
        .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        .         #endif
  749,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
1,499,998 (0.1%)        __a = _GLIBCXX_MOVE(__b);
  749,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
        .             }
        .         
        .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           // DR 809. std::swap should be overloaded for array types.
        .           /// Swap the contents of two arrays.
        .           template<typename _Tp, size_t _Nm>
        .             _GLIBCXX20_CONSTEXPR
        .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 133 ----------------------------------------
        .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
        .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
        .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
        .               struct _Mod<_Tp, __m, __a, __c, true, __s>
        .               {
        .         	static _Tp
        .         	__calc(_Tp __x)
        .         	{
  750,062 (0.1%)  	  _Tp __res = __a * __x + __c;
        .         	  if (__m)
9,750,743 (0.8%)  	    __res %= __m;
        .         	  return __res;
        .         	}
        .               };
        .         
        .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
        .               inline _Tp
        .               __mod(_Tp __x)
        .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 3734 ----------------------------------------
        .            *  @return  Nothing.
        .            *
        .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
        .            *  provide random numbers.
        .           */
        .           template<typename _RandomAccessIterator,
        .         	   typename _UniformRandomNumberGenerator>
        .             void
        4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .         	    _UniformRandomNumberGenerator&& __g)
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
        .         	    _RandomAccessIterator>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
        2 (0.0%)        if (__first == __last)
        .         	return;
        .         
        .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
        .         	_DistanceType;
        .         
        .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
        .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
        .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
        .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
        .         	_Gen;
        .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
        .         	__uc_type;
        .         
        .               const __uc_type __urngrange = __g.max() - __g.min();
        .               const __uc_type __urange = __uc_type(__last - __first);
        .         
        6 (0.0%)        if (__urngrange / __urange >= __urange)
        .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
        .               {
        .         	_RandomAccessIterator __i = __first + 1;
        .         
        .         	// Since we know the range isn't empty, an even number of elements
        .         	// means an uneven number of elements /to swap/, in which case we
        .         	// do the first one up front:
        .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
        .         	  std::iter_swap(__i++, __first + __pospos.second);
        .         	}
        .         
        .         	return;
        .               }
        .         
        .               __distr_type __d;
        .         
2,249,999 (0.2%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
2,249,997 (0.2%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
        4 (0.0%)      }
        .         #endif // USE C99_STDINT
        .         
        .         #endif // C++11
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
        .         
        .           /**
        .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 1069 ----------------------------------------
        .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
        .         #endif
        .         
        .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
        .               : _M_current(_Iterator()) { }
        .         
        .               explicit _GLIBCXX20_CONSTEXPR
        .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
        6 (0.0%)        : _M_current(__i) { }
        .         
        .               // Allow iterator to const_iterator conversion
        .         #if __cplusplus >= 201103L
        .               template<typename _Iter, typename = __convertible_from<_Iter>>
        .         	_GLIBCXX20_CONSTEXPR
        .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
        .         	noexcept
        .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current += __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  750,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current -= __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
        .             { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
        .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
        .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
        .             _GLIBCXX_NOEXCEPT
2,250,004 (0.2%)      { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline __normal_iterator<_Iterator, _Container>
        .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
        .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
        .             _GLIBCXX_NOEXCEPT
        .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 89 ----------------------------------------
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .         				  _ForwardIterator>)
        .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
        .         	    typename iterator_traits<_ForwardIterator>::value_type>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
3,000,008 (0.2%)        for (; __first != __last; ++__first)
        .         	{
  750,000 (0.1%)  	  *__first = __value;
        .         	  ++__value;
        .         	}
        .             }
        .         #endif
        .         
        .         _GLIBCXX_END_NAMESPACE_VERSION
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 279 ----------------------------------------
        .         	    }
        .         	  return __product >> _Up_traits::__digits;
        .         	}
        .             };
        .         
        .           template<typename _IntType>
        .             template<typename _UniformRandomBitGenerator>
        .               typename uniform_int_distribution<_IntType>::result_type
5,249,993 (0.4%)        uniform_int_distribution<_IntType>::
        .               operator()(_UniformRandomBitGenerator& __urng,
        .         		 const param_type& __param)
        .               {
        .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
        .         	typedef typename make_unsigned<result_type>::type __utype;
        .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
        .         
        .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
        .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
        .         	static_assert( __urngmin < __urngmax,
        .         	    "Uniform random bit generator must define min() < max()");
        .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
        .         
1,499,998 (0.1%)  	const __uctype __urange
        .         	  = __uctype(__param.b()) - __uctype(__param.a());
        .         
        .         	__uctype __ret;
1,499,998 (0.1%)  	if (__urngrange > __urange)
        .         	  {
        .         	    // downscaling
        .         
  749,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
        .         
        .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
        .         #if __SIZEOF_INT128__
        .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
        .         	      {
        .         		// __urng produces values that use exactly 64-bits,
        .         		// so use 128-bit integers to downscale to desired range.
        .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
        .         		// so use 64-bit integers to downscale to desired range.
        .         		__UINT32_TYPE__ __u32erange = __uerange;
        .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
        .         	      }
        .         	    else
        .         #endif
        .         	      {
        .         		// fallback case (2 divisions)
3,749,995 (0.3%)  		const __uctype __scaling = __urngrange / __uerange;
  749,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
        .         		do
  750,062 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
1,500,124 (0.1%)  		while (__ret >= __past);
2,249,997 (0.2%)  		__ret /= __scaling;
        .         	      }
        .         	  }
        .         	else if (__urngrange < __urange)
        .         	  {
        .         	    // upscaling
        .         	    /*
        .         	      Note that every value in [0, urange]
        .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
        .         			 (__urng, param_type(0, __urange / __uerngrange)));
        .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
        .         	      }
        .         	    while (__ret > __urange || __ret < __tmp);
        .         	  }
        .         	else
        .         	  __ret = __uctype(__urng()) - __urngmin;
        .         
  749,999 (0.1%)  	return __ret + __param.a();
4,499,994 (0.3%)        }
        .         
        .         
        .           template<typename _IntType>
        .             template<typename _ForwardIterator,
        .         	     typename _UniformRandomBitGenerator>
        .               void
        .               uniform_int_distribution<_IntType>::
        .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir___________________ 

1,005,922,794 (77.8%)    annotated: files known & above threshold & readable, line numbers known
            0            annotated: files known & above threshold & readable, line numbers unknown
            0          unannotated: files known & above threshold & two or more non-identical
  276,751,732 (21.4%)  unannotated: files known & above threshold & unreadable 
    2,552,828  (0.2%)  unannotated: files known & below threshold
    7,496,912  (0.6%)  unannotated: files unknown

