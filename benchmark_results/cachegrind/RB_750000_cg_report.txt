--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13760
Command:          ./benchmark RB 750000 benchmark_results/csv/RB_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ 

801,982,113 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir________________________  file:function

< 300,413,339 (37.5%, 37.5%)  /usr/include/c++/13/bits/stl_tree.h:
  184,188,885 (23.0%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]
   92,705,870 (11.6%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]
   19,135,720  (2.4%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
    4,382,864  (0.5%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]

< 294,412,810 (36.7%, 74.2%)  ./malloc/./malloc/malloc.c:
  104,266,590 (13.0%)           _int_malloc
   63,525,207  (7.9%)           _int_free
   42,262,191  (5.3%)           malloc_consolidate
   39,811,534  (5.0%)           malloc
   24,771,604  (3.1%)           free
   16,773,024  (2.1%)           unlink_chunk.isra.0
    3,000,028  (0.4%)           alloc_perturb

< 105,859,076 (13.2%, 87.4%)  ???:
   41,165,166  (5.1%)           std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
   30,831,769  (3.8%)           std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
   12,121,374  (1.5%)           ???
   11,951,435  (1.5%)           std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
    7,995,046  (1.0%)           std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
    1,769,396  (0.2%)           operator delete(void*, unsigned long)

<  23,250,158  (2.9%, 90.3%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  23,055,555  (2.9%, 93.1%)  /usr/include/c++/13/bits/stl_function.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]

<  16,091,587  (2.0%, 95.1%)  /home/pratik/Desktop/Details 3/main.cpp:
   14,322,019  (1.8%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
    1,769,398  (0.2%)           operator delete(void*)

<  10,500,805  (1.3%, 96.5%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<   4,500,012  (0.6%, 97.0%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   4,154,172  (0.5%, 97.5%)  ./malloc/./malloc/arena.c:
    2,654,085  (0.3%)           free
    1,500,015  (0.2%)           malloc

<   3,750,008  (0.5%, 98.0%)  /usr/include/c++/13/bits/stl_numeric.h:main

<   3,000,018  (0.4%, 98.4%)  /usr/include/c++/13/bits/stl_iterator.h:
    3,000,002  (0.4%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   3,000,013  (0.4%, 98.8%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<   2,999,996  (0.4%, 99.1%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<   2,859,319  (0.4%, 99.5%)  /usr/include/c++/13/bits/new_allocator.h:
      992,258  (0.1%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]
      982,358  (0.1%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]
      884,694  (0.1%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

<   1,575,000  (0.2%, 99.7%)  /usr/include/c++/13/bits/stl_set.h:benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________  function:file

> 207,244,440 (25.8%, 25.8%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]:
  184,188,885 (23.0%)           /usr/include/c++/13/bits/stl_tree.h
   23,055,555  (2.9%)           /usr/include/c++/13/bits/stl_function.h

> 104,266,590 (13.0%, 38.8%)  _int_malloc:./malloc/./malloc/malloc.c

>  93,688,228 (11.7%, 50.5%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]:
   92,705,870 (11.6%)           /usr/include/c++/13/bits/stl_tree.h
      982,358  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>  63,525,207  (7.9%, 58.4%)  _int_free:./malloc/./malloc/malloc.c

>  42,262,191  (5.3%, 63.7%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  41,311,549  (5.2%, 68.9%)  malloc:
   39,811,534  (5.0%)           ./malloc/./malloc/malloc.c
    1,500,015  (0.2%)           ./malloc/./malloc/arena.c

>  41,165,166  (5.1%, 74.0%)  std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&):???

>  35,917,494  (4.5%, 78.5%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
   19,135,720  (2.4%)           /usr/include/c++/13/bits/stl_tree.h
   14,322,019  (1.8%)           /home/pratik/Desktop/Details 3/main.cpp
    1,575,000  (0.2%)           /usr/include/c++/13/bits/stl_set.h
      884,694  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>  33,750,963  (4.2%, 82.7%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   23,250,158  (2.9%)           /usr/include/c++/13/bits/uniform_int_dist.h
   10,500,805  (1.3%)           /usr/include/c++/13/bits/random.h

>  30,831,769  (3.8%, 86.5%)  std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&):???

>  27,425,689  (3.4%, 90.0%)  free:
   24,771,604  (3.1%)           ./malloc/./malloc/malloc.c
    2,654,085  (0.3%)           ./malloc/./malloc/arena.c

>  16,773,024  (2.1%, 92.0%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>  12,121,374  (1.5%, 93.6%)  ???:???

>  11,951,435  (1.5%, 95.0%)  std::_Rb_tree_decrement(std::_Rb_tree_node_base*):???

>  10,500,010  (1.3%, 96.4%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
    4,500,012  (0.6%)           /usr/include/c++/13/bits/stl_algo.h
    3,000,002  (0.4%)           /usr/include/c++/13/bits/stl_iterator.h
    2,999,996  (0.4%)           /usr/include/c++/13/bits/move.h

>   7,995,046  (1.0%, 97.4%)  std::_Rb_tree_increment(std::_Rb_tree_node_base const*):???

>   5,375,122  (0.7%, 98.0%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]:
    4,382,864  (0.5%)           /usr/include/c++/13/bits/stl_tree.h
      992,258  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>   3,750,189  (0.5%, 98.5%)  main:
    3,750,008  (0.5%)           /usr/include/c++/13/bits/stl_numeric.h

>   3,000,028  (0.4%, 98.9%)  alloc_perturb:./malloc/./malloc/malloc.c

>   3,000,013  (0.4%, 99.2%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>   1,769,398  (0.2%, 99.5%)  operator delete(void*):/home/pratik/Desktop/Details 3/main.cpp

>   1,769,396  (0.2%, 99.7%)  operator delete(void*, unsigned long):???

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir______________ 

-- line 15 ----------------------------------------
        .         using namespace std;
        .         using namespace chrono;
        .         
        .         // ================= Memory Profiler =================
        .         size_t current_allocated_bytes = 0;
        .         size_t peak_allocated_bytes = 0;
        .         
        .         void *operator new(std::size_t size) noexcept(false)
        1 (0.0%)  {
2,654,100 (0.3%)      current_allocated_bytes += size;
1,769,398 (0.2%)      if (current_allocated_bytes > peak_allocated_bytes)
  884,702 (0.1%)          peak_allocated_bytes = current_allocated_bytes;
3,538,789 (0.4%)      return malloc(size);
        .         }
        .         
        .         void operator delete(void *ptr) noexcept
  884,699 (0.1%)  {
  884,699 (0.1%)      free(ptr);
        .         }
        .         
        .         long get_peak_rss_kb()
        .         {
        .             struct rusage r;
        3 (0.0%)      getrusage(RUSAGE_SELF, &r);
        .             return r.ru_maxrss;
        .         }
        .         
        .         void report_memory_usage(std::ostream &out = std::cout)
        7 (0.0%)  {
        .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
        .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
        2 (0.0%)  }
        .         
        .         // ================= Benchmark Struct =================
        .         struct OperationStats
        .         {
        .             double insert_time = 0;
        .             double search_time = 0;
        .             double update_time = 0;
        .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 439 ----------------------------------------
        .         {
        .             auto it = tree.upper_bound(key);
        .             if (it == tree.end())
        .                 return -1;
        .             return *it;
        .         }
        .         
        .         // ==================== vEB Tree ====================
        4 (0.0%)  vector<int> vebTree;
        .         
        .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
        .         {
        .             if (low > high || index >= (int)vebTree.size())
        .                 return;
        .             int mid = (low + high) / 2;
        .             vebTree[index] = sorted[mid];
        .             build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
        .         }
        .         
        .         // ==================== Benchmark Dispatcher ====================
        .         OperationStats benchmark_tree(const string &tree_type,
        .                                       const vector<int> &data,
        .                                       const vector<int> &update_data,
        .                                       const vector<int> &delete_data,
        .                                       const vector<int> &pred_succ_data)
       16 (0.0%)  {
        4 (0.0%)      OperationStats stats;
        1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
        .         
        .             if (tree_type == "BST")
        .             {
        .                 BSTNode *root = nullptr;
        .                 t1 = high_resolution_clock::now();
        .                 for (int x : data)
        .                     root = bst_insert(root, x);
        .                 t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 605 ----------------------------------------
        .                     treap_successor(root, x);
        .                 t2 = high_resolution_clock::now();
        .                 stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
        .             }
        .         
        .             else if (tree_type == "RB")
        .             {
        .                 RBTree tree;
        3 (0.0%)          t1 = high_resolution_clock::now();
3,000,003 (0.4%)          for (int x : data)
        .                     rbtree_insert(tree, x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
        .                 for (int x : data)
        .                     rbtree_search(tree, x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        3 (0.0%)          t1 = high_resolution_clock::now();
1,800,002 (0.2%)          for (int x : update_data)
        .                 {
        .                     rbtree_delete(tree, x);
  450,000 (0.1%)              rbtree_insert(tree, x + 1);
        .                 }
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
  225,003 (0.0%)          for (int x : delete_data)
        .                     rbtree_delete(tree, x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
        .                 for (int x : pred_succ_data)
        .                     rbtree_predecessor(tree, x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
        .         
        2 (0.0%)          t1 = high_resolution_clock::now();
        .                 for (int x : pred_succ_data)
        .                     rbtree_successor(tree, x);
        1 (0.0%)          t2 = high_resolution_clock::now();
        3 (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
        .             }
        .         
        .             else if (tree_type == "vEB")
        .             {
        .                 vector<int> sorted = data;
        .                 sort(sorted.begin(), sorted.end());
        .                 vebTree.assign(sorted.size(), -1);
        .         
-- line 658 ----------------------------------------
-- line 669 ----------------------------------------
        .         
        .                 stats.update_time = 0;
        .                 stats.delete_time = 0;
        .                 stats.pred_time = 0;
        .                 stats.succ_time = 0;
        .             }
        .         
        .             return stats;
       12 (0.0%)  }
        .         
        .         // =========================== MAIN ===============================
        .         int main(int argc, char **argv)
       13 (0.0%)  {
        2 (0.0%)      if (argc != 4)
        .             {
        .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
        .                 return 1;
        .             }
        .         
        6 (0.0%)      string tree_type = argv[1];
        7 (0.0%)      int N = stoi(argv[2]);
        6 (0.0%)      string output_file = argv[3];
        .         
        2 (0.0%)      srand(42);
        .             vector<int> data(N);
        .             iota(data.begin(), data.end(), 0);
        4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
        .         
       10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
        9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
        9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
        .         
        8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
        .         
        .             // Always run benchmarks, only suppress writing
        4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
        .             {
        .                 ofstream out(output_file, ios::app);
        .                 if (!out)
        .                 {
        .                     cerr << "Failed to open " << output_file << endl;
        .                     return 1;
        .                 }
        .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
        .         
        .                 out << tree_type << "," << N << ","
        .                     << stats.insert_time << "," << stats.search_time << ","
        .                     << stats.update_time << "," << stats.delete_time << ","
        .                     << stats.pred_time << "," << stats.succ_time << ","
        .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
        .             }
        .         
        2 (0.0%)      report_memory_usage();
        .         
        1 (0.0%)      return 0;
       21 (0.0%)  }
        .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 189 ----------------------------------------
        .             swap(_Tp& __a, _Tp& __b)
        .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        .         				is_nothrow_move_assignable<_Tp>>::value)
        .             {
        .         #if __cplusplus < 201103L
        .               // concept requirements
        .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        .         #endif
  749,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
1,499,998 (0.2%)        __a = _GLIBCXX_MOVE(__b);
  749,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
        .             }
        .         
        .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           // DR 809. std::swap should be overloaded for array types.
        .           /// Swap the contents of two arrays.
        .           template<typename _Tp, size_t _Nm>
        .             _GLIBCXX20_CONSTEXPR
        .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/new_allocator.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 143 ----------------------------------------
        .         #if __cpp_aligned_new
        .         	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .         	  {
        .         	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        .         	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        .         							   __al));
        .         	  }
        .         #endif
        1 (0.0%)  	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        .               }
        .         
        .               // __p is not permitted to be a null pointer.
        .               void
        .               deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        .               {
        .         #if __cpp_sized_deallocation
        .         # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
-- line 159 ----------------------------------------
-- line 164 ----------------------------------------
        .         #if __cpp_aligned_new
        .         	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .         	  {
        .         	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        .         				     std::align_val_t(alignof(_Tp)));
        .         	    return;
        .         	  }
        .         #endif
1,974,624 (0.2%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        .               }
        .         
        .         #undef _GLIBCXX_SIZED_DEALLOC
        .         #undef _GLIBCXX_OPERATOR_DELETE
        .         #undef _GLIBCXX_OPERATOR_NEW
        .         
        .         #if __cplusplus <= 201703L
        .               __attribute__((__always_inline__))
-- line 180 ----------------------------------------
-- line 183 ----------------------------------------
        .               { return _M_max_size(); }
        .         
        .         #if __cplusplus >= 201103L
        .               template<typename _Up, typename... _Args>
        .         	__attribute__((__always_inline__))
        .         	void
        .         	construct(_Up* __p, _Args&&... __args)
        .         	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  884,694 (0.1%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        .         
        .               template<typename _Up>
        .         	__attribute__((__always_inline__))
        .         	void
        .         	destroy(_Up* __p)
        .         	noexcept(std::is_nothrow_destructible<_Up>::value)
        .         	{ __p->~_Up(); }
        .         #else
-- line 199 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 133 ----------------------------------------
        .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
        .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
        .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
        .               struct _Mod<_Tp, __m, __a, __c, true, __s>
        .               {
        .         	static _Tp
        .         	__calc(_Tp __x)
        .         	{
  750,062 (0.1%)  	  _Tp __res = __a * __x + __c;
        .         	  if (__m)
9,750,743 (1.2%)  	    __res %= __m;
        .         	  return __res;
        .         	}
        .               };
        .         
        .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
        .               inline _Tp
        .               __mod(_Tp __x)
        .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 3734 ----------------------------------------
        .            *  @return  Nothing.
        .            *
        .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
        .            *  provide random numbers.
        .           */
        .           template<typename _RandomAccessIterator,
        .         	   typename _UniformRandomNumberGenerator>
        .             void
        4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .         	    _UniformRandomNumberGenerator&& __g)
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
        .         	    _RandomAccessIterator>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
        2 (0.0%)        if (__first == __last)
        .         	return;
        .         
        .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
        .         	_DistanceType;
        .         
        .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
        .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
        .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
        .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
        .         	_Gen;
        .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
        .         	__uc_type;
        .         
        .               const __uc_type __urngrange = __g.max() - __g.min();
        .               const __uc_type __urange = __uc_type(__last - __first);
        .         
        6 (0.0%)        if (__urngrange / __urange >= __urange)
        .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
        .               {
        .         	_RandomAccessIterator __i = __first + 1;
        .         
        .         	// Since we know the range isn't empty, an even number of elements
        .         	// means an uneven number of elements /to swap/, in which case we
        .         	// do the first one up front:
        .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
        .         	  std::iter_swap(__i++, __first + __pospos.second);
        .         	}
        .         
        .         	return;
        .               }
        .         
        .               __distr_type __d;
        .         
2,249,999 (0.3%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
2,249,997 (0.3%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
        4 (0.0%)      }
        .         #endif // USE C99_STDINT
        .         
        .         #endif // C++11
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
        .         
        .           /**
        .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_function.h
--------------------------------------------------------------------------------
Ir_______________ 

-- line 400 ----------------------------------------
         .         
         .           /// One of the @link comparison_functors comparison functors@endlink.
         .           template<typename _Tp>
         .             struct less : public binary_function<_Tp, _Tp, bool>
         .             {
         .               _GLIBCXX14_CONSTEXPR
         .               bool
         .               operator()(const _Tp& __x, const _Tp& __y) const
23,055,555 (2.9%)        { return __x < __y; }
         .             };
         .         
         .           /// One of the @link comparison_functors comparison functors@endlink.
         .           template<typename _Tp>
         .             struct greater_equal : public binary_function<_Tp, _Tp, bool>
         .             {
         .               _GLIBCXX14_CONSTEXPR
         .               bool
-- line 416 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 1069 ----------------------------------------
        .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
        .         #endif
        .         
        .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
        .               : _M_current(_Iterator()) { }
        .         
        .               explicit _GLIBCXX20_CONSTEXPR
        .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
        7 (0.0%)        : _M_current(__i) { }
        .         
        .               // Allow iterator to const_iterator conversion
        .         #if __cplusplus >= 201103L
        .               template<typename _Iter, typename = __convertible_from<_Iter>>
        .         	_GLIBCXX20_CONSTEXPR
        .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
        .         	noexcept
        .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current += __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  750,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current -= __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
        .             { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
        .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
        .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
        .             _GLIBCXX_NOEXCEPT
2,250,004 (0.3%)      { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline __normal_iterator<_Iterator, _Container>
        .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
        .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
        .             _GLIBCXX_NOEXCEPT
        .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 89 ----------------------------------------
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .         				  _ForwardIterator>)
        .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
        .         	    typename iterator_traits<_ForwardIterator>::value_type>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
3,000,008 (0.4%)        for (; __first != __last; ++__first)
        .         	{
  750,000 (0.1%)  	  *__first = __value;
        .         	  ++__value;
        .         	}
        .             }
        .         #endif
        .         
        .         _GLIBCXX_END_NAMESPACE_VERSION
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_set.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 679 ----------------------------------------
        .                *  This function erases all the elements located by the given key from
        .                *  a %set.
        .                *  Note that this function only erases the element, and that if
        .                *  the element is itself a pointer, the pointed-to memory is not touched
        .                *  in any way.  Managing the pointer is the user's responsibility.
        .                */
        .               size_type
        .               erase(const key_type& __x)
1,575,000 (0.2%)        { return _M_t.erase(__x); }
        .         
        .         #if __cplusplus >= 201103L
        .               // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .               // DR 130. Associative erase should return an iterator.
        .               /**
        .                *  @brief Erases a [__first,__last) range of elements from a %set.
        .                *  @param  __first  Iterator pointing to the start of the range to be
        .                *                 erased.
-- line 695 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_tree.h
--------------------------------------------------------------------------------
Ir_______________ 

-- line 167 ----------------------------------------
         .           // Helper type to manage default initialization of node count and header.
         .           struct _Rb_tree_header
         .           {
         .             _Rb_tree_node_base	_M_header;
         .             size_t		_M_node_count; // Keeps track of size of tree.
         .         
         .             _Rb_tree_header() _GLIBCXX_NOEXCEPT
         .             {
         1 (0.0%)        _M_header._M_color = _S_red;
         .               _M_reset();
         .             }
         .         
         .         #if __cplusplus >= 201103L
         .             _Rb_tree_header(_Rb_tree_header&& __x) noexcept
         .             {
         .               if (__x._M_header._M_parent != nullptr)
         .         	_M_move_data(__x);
-- line 183 ----------------------------------------
-- line 200 ----------------------------------------
         .               _M_node_count = __from._M_node_count;
         .         
         .               __from._M_reset();
         .             }
         .         
         .             void
         .             _M_reset()
         .             {
         1 (0.0%)        _M_header._M_parent = 0;
         3 (0.0%)        _M_header._M_left = &_M_header;
         1 (0.0%)        _M_header._M_right = &_M_header;
         1 (0.0%)        _M_node_count = 0;
         .             }
         .           };
         .         
         .           template<typename _Val>
         .             struct _Rb_tree_node : public _Rb_tree_node_base
         .             {
         .               typedef _Rb_tree_node<_Val>* _Link_type;
         .         
-- line 219 ----------------------------------------
-- line 265 ----------------------------------------
         .               typedef _Rb_tree_iterator<_Tp>		_Self;
         .               typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
         .               typedef _Rb_tree_node<_Tp>*		_Link_type;
         .         
         .               _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
         .               : _M_node() { }
         .         
         .               explicit
 1,199,999 (0.1%)        _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
         .               : _M_node(__x) { }
         .         
         .               reference
         .               operator*() const _GLIBCXX_NOEXCEPT
         .               { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
         .         
         .               pointer
         .               operator->() const _GLIBCXX_NOEXCEPT
-- line 281 ----------------------------------------
-- line 294 ----------------------------------------
         .         	_Self __tmp = *this;
         .         	_M_node = _Rb_tree_increment(_M_node);
         .         	return __tmp;
         .               }
         .         
         .               _Self&
         .               operator--() _GLIBCXX_NOEXCEPT
         .               {
 1,958,868 (0.2%)  	_M_node = _Rb_tree_decrement(_M_node);
 1,305,922 (0.2%)  	return *this;
         .               }
         .         
         .               _Self
         .               operator--(int) _GLIBCXX_NOEXCEPT
         .               {
         .         	_Self __tmp = *this;
         .         	_M_node = _Rb_tree_decrement(_M_node);
         .         	return __tmp;
-- line 311 ----------------------------------------
-- line 368 ----------------------------------------
         .         	_M_node = _Rb_tree_increment(_M_node);
         .         	return *this;
         .               }
         .         
         .               _Self
         .               operator++(int) _GLIBCXX_NOEXCEPT
         .               {
         .         	_Self __tmp = *this;
 1,964,716 (0.2%)  	_M_node = _Rb_tree_increment(_M_node);
         .         	return __tmp;
         .               }
         .         
         .               _Self&
         .               operator--() _GLIBCXX_NOEXCEPT
         .               {
         .         	_M_node = _Rb_tree_decrement(_M_node);
         .         	return *this;
-- line 384 ----------------------------------------
-- line 729 ----------------------------------------
         .               { return this->_M_impl._M_header._M_right; }
         .         
         .               _Const_Base_ptr
         .               _M_rightmost() const _GLIBCXX_NOEXCEPT
         .               { return this->_M_impl._M_header._M_right; }
         .         
         .               _Link_type
         .               _M_mbegin() const _GLIBCXX_NOEXCEPT
 1,725,000 (0.2%)        { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
         .         
         .               _Link_type
         .               _M_begin() _GLIBCXX_NOEXCEPT
         .               { return _M_mbegin(); }
         .         
         .               _Const_Link_type
         .               _M_begin() const _GLIBCXX_NOEXCEPT
         .               {
         .         	return static_cast<_Const_Link_type>
         .         	  (this->_M_impl._M_header._M_parent);
         .               }
         .         
         .               _Base_ptr
         .               _M_end() _GLIBCXX_NOEXCEPT
   525,001 (0.1%)        { return &this->_M_impl._M_header; }
         .         
         .               _Const_Base_ptr
         .               _M_end() const _GLIBCXX_NOEXCEPT
         .               { return &this->_M_impl._M_header; }
         .         
         .               static const _Key&
         .               _S_key(_Const_Link_type __x)
         .               {
-- line 760 ----------------------------------------
-- line 773 ----------------------------------------
         .         	      "comparison object must be invocable as const");
         .         # endif // C++17
         .         #endif // C++11
         .         
         .         	return _KeyOfValue()(*__x->_M_valptr());
         .               }
         .         
         .               static _Link_type
    65,898 (0.0%)        _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 6,956,468 (0.9%)        { return static_cast<_Link_type>(__x->_M_left); }
         .         
         .               static _Const_Link_type
         .               _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
         .               { return static_cast<_Const_Link_type>(__x->_M_left); }
         .         
         .               static _Link_type
         .               _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
30,025,534 (3.7%)        { return static_cast<_Link_type>(__x->_M_right); }
         .         
         .               static _Const_Link_type
         .               _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
         .               { return static_cast<_Const_Link_type>(__x->_M_right); }
         .         
         .               static const _Key&
         .               _S_key(_Const_Base_ptr __x)
         .               { return _S_key(static_cast<_Const_Link_type>(__x)); }
-- line 798 ----------------------------------------
-- line 978 ----------------------------------------
         .         	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
         .         		 std::declval<typename _Alloc_traits::is_always_equal>())) )
         .               : _Rb_tree(std::move(__x), std::move(__a),
         .         		 typename _Alloc_traits::is_always_equal{})
         .               { }
         .         #endif
         .         
         .               ~_Rb_tree() _GLIBCXX_NOEXCEPT
         2 (0.0%)        { _M_erase(_M_begin()); }
         .         
         .               _Rb_tree&
         .               operator=(const _Rb_tree& __x);
         .         
         .               // Accessors.
         .               _Compare
         .               key_comp() const
         .               { return _M_impl._M_key_compare; }
-- line 994 ----------------------------------------
-- line 1819 ----------------------------------------
         .               _M_insert_(_Base_ptr __x, _Base_ptr __p,
         .         #if __cplusplus >= 201103L
         .         		 _Arg&& __v,
         .         #else
         .         		 const _Val& __v,
         .         #endif
         .         		 _NodeGen& __node_gen)
         .               {
 4,423,470 (0.6%)  	bool __insert_left = (__x != 0 || __p == _M_end()
 4,288,771 (0.5%)  			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
         .         							_S_key(__p)));
         .         
         .         	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
         .         
 3,538,776 (0.4%)  	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
         .         				      this->_M_impl._M_header);
   884,694 (0.1%)  	++_M_impl._M_node_count;
         .         	return iterator(__z);
         .               }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .         #if __cplusplus >= 201103L
         .             template<typename _Arg>
         .         #endif
-- line 1843 ----------------------------------------
-- line 1922 ----------------------------------------
         .         	    __throw_exception_again;
         .         	  }
         .         	return __top;
         .               }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             void
   527,192 (0.1%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_erase(_Link_type __x)
         .             {
         .               // Erase without rebalancing.
 1,994,403 (0.2%)        while (__x != 0)
         .         	{
   197,694 (0.0%)  	  _M_erase(_S_right(__x));
         .         	  _Link_type __y = _S_left(__x);
         .         	  _M_drop_node(__x);
         .         	  __x = __y;
         .         	}
   527,192 (0.1%)      }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         		      _Compare, _Alloc>::iterator
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_lower_bound(_Link_type __x, _Base_ptr __y,
         .         		   const _Key& __k)
         .             {
 3,374,459 (0.4%)        while (__x != 0)
 1,594,734 (0.2%)  	if (!_M_impl._M_key_compare(_S_key(__x), __k))
         .         	  __y = __x, __x = _S_left(__x);
         .         	else
   797,367 (0.1%)  	  __x = _S_right(__x);
         .               return iterator(__y);
         .             }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         		      _Compare, _Alloc>::const_iterator
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1963 ----------------------------------------
-- line 1975 ----------------------------------------
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         		      _Compare, _Alloc>::iterator
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_upper_bound(_Link_type __x, _Base_ptr __y,
         .         		   const _Key& __k)
         .             {
 2,926,055 (0.4%)        while (__x != 0)
 1,605,342 (0.2%)  	if (_M_impl._M_key_compare(__k, _S_key(__x)))
 1,605,342 (0.2%)  	  __y = __x, __x = _S_left(__x);
         .         	else
         .         	  __x = _S_right(__x);
         .               return iterator(__y);
         .             }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
-- line 1993 ----------------------------------------
-- line 2008 ----------------------------------------
         .         	   typename _Compare, typename _Alloc>
         .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::iterator,
         .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::iterator>
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             equal_range(const _Key& __k)
         .             {
 1,050,000 (0.1%)        _Link_type __x = _M_begin();
   525,000 (0.1%)        _Base_ptr __y = _M_end();
18,720,610 (2.3%)        while (__x != 0)
         .         	{
18,652,968 (2.3%)  	  if (_M_impl._M_key_compare(_S_key(__x), __k))
         .         	    __x = _S_right(__x);
 4,802,273 (0.6%)  	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
 8,622,188 (1.1%)  	    __y = __x, __x = _S_left(__x);
         .         	  else
         .         	    {
         .         	      _Link_type __xu(__x);
         .         	      _Base_ptr __yu(__y);
         .         	      __y = __x, __x = _S_left(__x);
         .         	      __xu = _S_right(__xu);
         .         	      return pair<iterator,
         .         			  iterator>(_M_lower_bound(__x, __y, __k),
-- line 2031 ----------------------------------------
-- line 2100 ----------------------------------------
         .             }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::_Base_ptr,
         .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::_Base_ptr>
 4,800,000 (0.6%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_get_insert_unique_pos(const key_type& __k)
         .             {
         .               typedef pair<_Base_ptr, _Base_ptr> _Res;
         .               _Link_type __x = _M_begin();
         .               _Base_ptr __y = _M_end();
         .               bool __comp = true;
68,407,799 (8.5%)        while (__x != 0)
         .         	{
         .         	  __y = __x;
         .         	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
67,207,797 (8.4%)  	  __x = __comp ? _S_left(__x) : _S_right(__x);
         .         	}
         .               iterator __j = iterator(__y);
 2,399,998 (0.3%)        if (__comp)
         .         	{
 1,305,932 (0.2%)  	  if (__j == begin())
         .         	    return _Res(__x, __y);
         .         	  else
         .         	    --__j;
         .         	}
 4,799,960 (0.6%)        if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
         .         	return _Res(__x, __y);
         .               return _Res(__j._M_node, 0);
 7,200,010 (0.9%)      }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::_Base_ptr,
         .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         			   _Compare, _Alloc>::_Base_ptr>
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2140 ----------------------------------------
-- line 2163 ----------------------------------------
         .         #if __cplusplus >= 201103L
         .             _M_insert_unique(_Arg&& __v)
         .         #else
         .             _M_insert_unique(const _Val& __v)
         .         #endif
         .             {
         .               typedef pair<iterator, bool> _Res;
         .               pair<_Base_ptr, _Base_ptr> __res
 3,600,000 (0.4%)  	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
         .         
 2,400,000 (0.3%)        if (__res.second)
         .         	{
         .         	  _Alloc_node __an(*this);
         .         	  return _Res(_M_insert_(__res.first, __res.second,
         .         				 _GLIBCXX_FORWARD(_Arg, __v), __an),
         .         		      true);
         .         	}
         .         
         .               return _Res(iterator(__res.first), false);
-- line 2181 ----------------------------------------
-- line 2486 ----------------------------------------
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             void
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_erase_aux(const_iterator __position)
         .             {
         .               _Link_type __y =
         .         	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
 1,964,716 (0.2%)  				(const_cast<_Base_ptr>(__position._M_node),
         .         				 this->_M_impl._M_header));
         .               _M_drop_node(__y);
   491,179 (0.1%)        --_M_impl._M_node_count;
         .             }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             void
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             _M_erase_aux(const_iterator __first, const_iterator __last)
         .             {
 1,185,286 (0.1%)        if (__first == begin() && __last == end())
         .         	clear();
         .               else
 1,964,717 (0.2%)  	while (__first != __last)
         .         	  _M_erase_aux(__first++);
         .             }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
 3,150,000 (0.4%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             erase(const _Key& __x)
         .             {
         .               pair<iterator, iterator> __p = equal_range(__x);
         .               const size_type __old_size = size();
         .               _M_erase_aux(__p.first, __p.second);
         .               return __old_size - size();
 3,150,000 (0.4%)      }
         .         
         .           template<typename _Key, typename _Val, typename _KeyOfValue,
         .         	   typename _Compare, typename _Alloc>
         .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .         		      _Compare, _Alloc>::iterator
         .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .             find(const _Key& __k)
         .             {
-- line 2531 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 279 ----------------------------------------
        .         	    }
        .         	  return __product >> _Up_traits::__digits;
        .         	}
        .             };
        .         
        .           template<typename _IntType>
        .             template<typename _UniformRandomBitGenerator>
        .               typename uniform_int_distribution<_IntType>::result_type
5,249,993 (0.7%)        uniform_int_distribution<_IntType>::
        .               operator()(_UniformRandomBitGenerator& __urng,
        .         		 const param_type& __param)
        .               {
        .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
        .         	typedef typename make_unsigned<result_type>::type __utype;
        .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
        .         
        .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
        .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
        .         	static_assert( __urngmin < __urngmax,
        .         	    "Uniform random bit generator must define min() < max()");
        .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
        .         
1,499,998 (0.2%)  	const __uctype __urange
        .         	  = __uctype(__param.b()) - __uctype(__param.a());
        .         
        .         	__uctype __ret;
1,499,998 (0.2%)  	if (__urngrange > __urange)
        .         	  {
        .         	    // downscaling
        .         
  749,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
        .         
        .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
        .         #if __SIZEOF_INT128__
        .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
        .         	      {
        .         		// __urng produces values that use exactly 64-bits,
        .         		// so use 128-bit integers to downscale to desired range.
        .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
        .         		// so use 64-bit integers to downscale to desired range.
        .         		__UINT32_TYPE__ __u32erange = __uerange;
        .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
        .         	      }
        .         	    else
        .         #endif
        .         	      {
        .         		// fallback case (2 divisions)
3,749,995 (0.5%)  		const __uctype __scaling = __urngrange / __uerange;
  749,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
        .         		do
  750,062 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
1,500,124 (0.2%)  		while (__ret >= __past);
2,249,997 (0.3%)  		__ret /= __scaling;
        .         	      }
        .         	  }
        .         	else if (__urngrange < __urange)
        .         	  {
        .         	    // upscaling
        .         	    /*
        .         	      Note that every value in [0, urange]
        .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
        .         			 (__urng, param_type(0, __urange / __uerngrange)));
        .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
        .         	      }
        .         	    while (__ret > __urange || __ret < __tmp);
        .         	  }
        .         	else
        .         	  __ret = __uctype(__urng()) - __urngmin;
        .         
  749,999 (0.1%)  	return __ret + __param.a();
4,499,994 (0.6%)        }
        .         
        .         
        .           template<typename _IntType>
        .             template<typename _ForwardIterator,
        .         	     typename _UniformRandomBitGenerator>
        .               void
        .               uniform_int_distribution<_IntType>::
        .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ 

391,995,797 (48.9%)    annotated: files known & above threshold & readable, line numbers known
          0            annotated: files known & above threshold & readable, line numbers unknown
          0          unannotated: files known & above threshold & two or more non-identical
301,566,995 (37.6%)  unannotated: files known & above threshold & unreadable 
  2,560,245  (0.3%)  unannotated: files known & below threshold
105,859,076 (13.2%)  unannotated: files unknown

