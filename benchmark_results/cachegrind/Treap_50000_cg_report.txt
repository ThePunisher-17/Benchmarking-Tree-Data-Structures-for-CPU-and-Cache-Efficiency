--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13582
Command:          ./benchmark Treap 50000 benchmark_results/csv/Treap_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir_________________ 

78,017,074 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________  file:function

< 53,549,078 (68.6%, 68.6%)  /home/pratik/Desktop/Details 3/main.cpp:
  37,384,995 (47.9%)           treap_insert(TreapNode*, int)
  15,468,215 (19.8%)           treap_delete(TreapNode*, int)
     630,084  (0.8%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

< 14,924,124 (19.1%, 87.8%)  ./malloc/./malloc/malloc.c:
   7,213,658  (9.2%)           _int_malloc
   2,655,484  (3.4%)           malloc
   2,271,108  (2.9%)           _int_free
   1,232,931  (1.6%)           malloc_consolidate
     918,604  (1.2%)           free
     431,121  (0.6%)           unlink_chunk.isra.0
     200,028  (0.3%)           alloc_perturb

<  1,656,421  (2.1%, 89.9%)  ./stdlib/./stdlib/random_r.c:
   1,650,209  (2.1%)           random_r

<  1,549,969  (2.0%, 91.9%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  1,357,112  (1.7%, 93.6%)  ./stdlib/./stdlib/random.c:
   1,357,092  (1.7%)           random

<    795,772  (1.0%, 94.6%)  ./elf/./elf/dl-lookup.c:
     497,744  (0.6%)           do_lookup_x
     185,267  (0.2%)           _dl_lookup_symbol_x
     112,761  (0.1%)           check_match

<    699,986  (0.9%, 95.5%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<    527,122  (0.7%, 96.2%)  ???:
     436,620  (0.6%)           ???

<    492,502  (0.6%, 96.8%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

<    354,024  (0.5%, 97.3%)  ./stdlib/./stdlib/rand.c:rand

<    300,012  (0.4%, 97.7%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    250,008  (0.3%, 98.0%)  /usr/include/c++/13/bits/stl_numeric.h:main

<    200,017  (0.3%, 98.3%)  /usr/include/c++/13/bits/stl_iterator.h:
     200,002  (0.3%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    200,013  (0.3%, 98.5%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<    199,996  (0.3%, 98.8%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    198,505  (0.3%, 99.0%)  ./malloc/./malloc/arena.c:
     100,015  (0.1%)           malloc
      98,418  (0.1%)           free

<    151,097  (0.2%, 99.2%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
     150,120  (0.2%)           __memcpy_avx_unaligned_erms

<    146,990  (0.2%, 99.4%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

<    118,533  (0.2%, 99.6%)  ./elf/../sysdeps/x86_64/dl-machine.h:
     118,396  (0.2%)           _dl_relocate_object

<    110,601  (0.1%, 99.7%)  ./elf/./elf/do-rel.h:
     110,545  (0.1%)           _dl_relocate_object

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________  function:file

> 37,384,995 (47.9%, 47.9%)  treap_insert(TreapNode*, int):/home/pratik/Desktop/Details 3/main.cpp

> 15,468,215 (19.8%, 67.7%)  treap_delete(TreapNode*, int):/home/pratik/Desktop/Details 3/main.cpp

>  7,213,658  (9.2%, 77.0%)  _int_malloc:./malloc/./malloc/malloc.c

>  2,755,499  (3.5%, 80.5%)  malloc:
   2,655,484  (3.4%)           ./malloc/./malloc/malloc.c
     100,015  (0.1%)           ./malloc/./malloc/arena.c

>  2,271,108  (2.9%, 83.4%)  _int_free:./malloc/./malloc/malloc.c

>  2,249,955  (2.9%, 86.3%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   1,549,969  (2.0%)           /usr/include/c++/13/bits/uniform_int_dist.h
     699,986  (0.9%)           /usr/include/c++/13/bits/random.h

>  1,650,209  (2.1%, 88.4%)  random_r:./stdlib/./stdlib/random_r.c

>  1,357,092  (1.7%, 90.2%)  random:./stdlib/./stdlib/random.c

>  1,232,931  (1.6%, 91.8%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  1,017,022  (1.3%, 93.1%)  free:
     918,604  (1.2%)           ./malloc/./malloc/malloc.c
      98,418  (0.1%)           ./malloc/./malloc/arena.c

>    700,010  (0.9%, 94.0%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
     300,012  (0.4%)           /usr/include/c++/13/bits/stl_algo.h
     200,002  (0.3%)           /usr/include/c++/13/bits/stl_iterator.h
     199,996  (0.3%)           /usr/include/c++/13/bits/move.h

>    677,769  (0.9%, 94.8%)  _dl_lookup_symbol_x:
     492,502  (0.6%)           ./elf/../sysdeps/generic/dl-new-hash.h
     185,267  (0.2%)           ./elf/./elf/dl-lookup.c

>    630,139  (0.8%, 95.6%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
     630,084  (0.8%)           /home/pratik/Desktop/Details 3/main.cpp

>    514,812  (0.7%, 96.3%)  do_lookup_x:
     497,744  (0.6%)           ./elf/./elf/dl-lookup.c

>    436,620  (0.6%, 96.9%)  ???:???

>    431,121  (0.6%, 97.4%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>    386,364  (0.5%, 97.9%)  _dl_relocate_object:
     146,990  (0.2%)           ./elf/./elf/dl-reloc.c
     118,396  (0.2%)           ./elf/../sysdeps/x86_64/dl-machine.h
     110,545  (0.1%)           ./elf/./elf/do-rel.h

>    354,024  (0.5%, 98.4%)  rand:./stdlib/./stdlib/rand.c

>    250,189  (0.3%, 98.7%)  main:
     250,008  (0.3%)           /usr/include/c++/13/bits/stl_numeric.h

>    200,028  (0.3%, 98.9%)  alloc_perturb:./malloc/./malloc/malloc.c

>    200,013  (0.3%, 99.2%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>    150,120  (0.2%, 99.4%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    112,761  (0.1%, 99.5%)  check_match:./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir_______________ 

-- line 15 ----------------------------------------
        .          using namespace std;
        .          using namespace chrono;
        .          
        .          // ================= Memory Profiler =================
        .          size_t current_allocated_bytes = 0;
        .          size_t peak_allocated_bytes = 0;
        .          
        .          void *operator new(std::size_t size) noexcept(false)
        1  (0.0%)  {
  177,030  (0.2%)      current_allocated_bytes += size;
  118,018  (0.2%)      if (current_allocated_bytes > peak_allocated_bytes)
   59,012  (0.1%)          peak_allocated_bytes = current_allocated_bytes;
  236,029  (0.3%)      return malloc(size);
        .          }
        .          
        .          void operator delete(void *ptr) noexcept
   32,807  (0.0%)  {
   32,807  (0.0%)      free(ptr);
        .          }
        .          
        .          long get_peak_rss_kb()
        .          {
        .              struct rusage r;
        3  (0.0%)      getrusage(RUSAGE_SELF, &r);
        .              return r.ru_maxrss;
        .          }
        .          
        .          void report_memory_usage(std::ostream &out = std::cout)
        7  (0.0%)  {
        .              out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
        .              out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
        2  (0.0%)  }
        .          
        .          // ================= Benchmark Struct =================
        .          struct OperationStats
        .          {
        .              double insert_time = 0;
        .              double search_time = 0;
        .              double update_time = 0;
        .              double delete_time = 0;
-- line 54 ----------------------------------------
-- line 295 ----------------------------------------
        .                  return avl_successor(root->left, key, root->key);
        .          }
        .          
        .          // ==================== Treap ====================
        .          struct TreapNode
        .          {
        .              int key, priority;
        .              TreapNode *left, *right;
  354,024  (0.5%)      TreapNode(int k) : key(k), priority(rand()), left(nullptr), right(nullptr) {}
        .          };
        .          
        .          TreapNode *treap_rotateRight(TreapNode *y)
        .          {
        .              TreapNode *x = y->left;
   75,036  (0.1%)      TreapNode *T2 = x->right;
   75,036  (0.1%)      x->right = y;
   75,036  (0.1%)      y->left = T2;
        .              return x;
        .          }
        .          
        .          TreapNode *treap_rotateLeft(TreapNode *x)
        .          {
        .              TreapNode *y = x->right;
   75,173  (0.1%)      TreapNode *T2 = y->left;
   75,173  (0.1%)      y->left = x;
   75,173  (0.1%)      x->right = T2;
   58,622  (0.1%)      return y;
        .          }
        .          
        .          TreapNode *treap_insert(TreapNode *root, int key)
8,026,037 (10.3%)  {
4,862,256  (6.2%)      if (!root)
        .                  return new TreapNode(key);
3,162,832  (4.1%)      if (key < root->key)
        .              {
2,905,796  (3.7%)          root->left = treap_insert(root->left, key);
2,179,347  (2.8%)          if (root->left->priority > root->priority)
        .                      root = treap_rotateRight(root);
        .              }
  854,967  (1.1%)      else if (key > root->key)
        .              {
3,335,884  (4.3%)          root->right = treap_insert(root->right, key);
2,501,913  (3.2%)          if (root->right->priority > root->priority)
        .                      root = treap_rotateLeft(root);
        .              }
        .              return root;
8,202,100 (10.5%)  }
        .          
        .          TreapNode *treap_delete(TreapNode *root, int key)
3,068,876  (3.9%)  {
2,299,459  (2.9%)      if (!root)
  703,465  (0.9%)          return root;
1,530,042  (2.0%)      if (key < root->key)
1,293,756  (1.7%)          root->left = treap_delete(root->left, key);
  441,582  (0.6%)      else if (key > root->key)
1,568,472  (2.0%)          root->right = treap_delete(root->right, key);
        .              else
        .              {
  197,856  (0.3%)          if (!root->left)
        .                  {
        .                      TreapNode *temp = root->right;
   43,650  (0.1%)              delete root;
   98,577  (0.1%)              return temp;
        .                  }
   88,254  (0.1%)          else if (!root->right)
        .                  {
        .                      TreapNode *temp = root->left;
   21,954  (0.0%)              delete root;
   10,977  (0.0%)              return temp;
        .                  }
        .                  else
        .                  {
   99,450  (0.1%)              if (root->left->priority > root->right->priority)
        .                      {
        .                          root = treap_rotateRight(root);
   33,198  (0.0%)                  root->right = treap_delete(root->right, key);
        .                      }
        .                      else
        .                      {
        .                          root = treap_rotateLeft(root);
   33,102  (0.0%)                  root->left = treap_delete(root->left, key);
        .                      }
        .                  }
        .              }
        .              return root;
3,836,095  (4.9%)  }
        .          
        .          bool treap_search(TreapNode *root, int key)
        .          {
        .              if (!root)
        .                  return false;
        .              if (root->key == key)
        .                  return true;
        .              return treap_search(key < root->key ? root->left : root->right, key);
-- line 388 ----------------------------------------
-- line 439 ----------------------------------------
        .          {
        .              auto it = tree.upper_bound(key);
        .              if (it == tree.end())
        .                  return -1;
        .              return *it;
        .          }
        .          
        .          // ==================== vEB Tree ====================
        4  (0.0%)  vector<int> vebTree;
        .          
        .          void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
        .          {
        .              if (low > high || index >= (int)vebTree.size())
        .                  return;
        .              int mid = (low + high) / 2;
        .              vebTree[index] = sorted[mid];
        .              build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
        .          }
        .          
        .          // ==================== Benchmark Dispatcher ====================
        .          OperationStats benchmark_tree(const string &tree_type,
        .                                        const vector<int> &data,
        .                                        const vector<int> &update_data,
        .                                        const vector<int> &delete_data,
        .                                        const vector<int> &pred_succ_data)
       16  (0.0%)  {
        4  (0.0%)      OperationStats stats;
        1  (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
        .          
        .              if (tree_type == "BST")
        .              {
        .                  BSTNode *root = nullptr;
        .                  t1 = high_resolution_clock::now();
        .                  for (int x : data)
        .                      root = bst_insert(root, x);
        .                  t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 561 ----------------------------------------
        .                  for (int x : pred_succ_data)
        .                      avl_successor(root, x);
        .                  t2 = high_resolution_clock::now();
        .                  stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
        .              }
        .          
        .              else if (tree_type == "Treap")
        .              {
        1  (0.0%)          TreapNode *root = nullptr;
        2  (0.0%)          t1 = high_resolution_clock::now();
  150,003  (0.2%)          for (int x : data)
  150,000  (0.2%)              root = treap_insert(root, x);
        1  (0.0%)          t2 = high_resolution_clock::now();
        3  (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
        .          
        2  (0.0%)          t1 = high_resolution_clock::now();
        .                  for (int x : data)
        .                      treap_search(root, x);
        1  (0.0%)          t2 = high_resolution_clock::now();
        3  (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
        .          
        2  (0.0%)          t1 = high_resolution_clock::now();
  120,005  (0.2%)          for (int x : update_data)
        .                  {
   90,000  (0.1%)              root = treap_delete(root, x);
   90,000  (0.1%)              root = treap_insert(root, x + 1);
        .                  }
        1  (0.0%)          t2 = high_resolution_clock::now();
        3  (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
        .          
        2  (0.0%)          t1 = high_resolution_clock::now();
   15,005  (0.0%)          for (int x : delete_data)
   15,000  (0.0%)              root = treap_delete(root, x);
        1  (0.0%)          t2 = high_resolution_clock::now();
        3  (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
        .          
        2  (0.0%)          t1 = high_resolution_clock::now();
        .                  for (int x : pred_succ_data)
        .                      treap_predecessor(root, x);
        1  (0.0%)          t2 = high_resolution_clock::now();
        3  (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
        .          
        2  (0.0%)          t1 = high_resolution_clock::now();
        .                  for (int x : pred_succ_data)
        .                      treap_successor(root, x);
        1  (0.0%)          t2 = high_resolution_clock::now();
        4  (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
        .              }
        .          
        .              else if (tree_type == "RB")
        .              {
        .                  RBTree tree;
        .                  t1 = high_resolution_clock::now();
        .                  for (int x : data)
        .                      rbtree_insert(tree, x);
-- line 615 ----------------------------------------
-- line 669 ----------------------------------------
        .          
        .                  stats.update_time = 0;
        .                  stats.delete_time = 0;
        .                  stats.pred_time = 0;
        .                  stats.succ_time = 0;
        .              }
        .          
        .              return stats;
       12  (0.0%)  }
        .          
        .          // =========================== MAIN ===============================
        .          int main(int argc, char **argv)
       13  (0.0%)  {
        2  (0.0%)      if (argc != 4)
        .              {
        .                  cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
        .                  return 1;
        .              }
        .          
        6  (0.0%)      string tree_type = argv[1];
        7  (0.0%)      int N = stoi(argv[2]);
        6  (0.0%)      string output_file = argv[3];
        .          
        2  (0.0%)      srand(42);
        .              vector<int> data(N);
        .              iota(data.begin(), data.end(), 0);
        4  (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
        .          
       10  (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
        9  (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
        9  (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
        .          
        8  (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
        .          
        .              // Always run benchmarks, only suppress writing
        4  (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
        .              {
        .                  ofstream out(output_file, ios::app);
        .                  if (!out)
        .                  {
        .                      cerr << "Failed to open " << output_file << endl;
        .                      return 1;
        .                  }
        .          
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
        .          
        .                  out << tree_type << "," << N << ","
        .                      << stats.insert_time << "," << stats.search_time << ","
        .                      << stats.update_time << "," << stats.delete_time << ","
        .                      << stats.pred_time << "," << stats.succ_time << ","
        .                      << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
        .              }
        .          
        2  (0.0%)      report_memory_usage();
        .          
        1  (0.0%)      return 0;
       21  (0.0%)  }
        .          

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 189 ----------------------------------------
     .             swap(_Tp& __a, _Tp& __b)
     .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
     .         				is_nothrow_move_assignable<_Tp>>::value)
     .             {
     .         #if __cplusplus < 201103L
     .               // concept requirements
     .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
     .         #endif
49,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
99,998 (0.1%)        __a = _GLIBCXX_MOVE(__b);
49,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
     .             }
     .         
     .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
     .           // DR 809. std::swap should be overloaded for array types.
     .           /// Swap the contents of two arrays.
     .           template<typename _Tp, size_t _Nm>
     .             _GLIBCXX20_CONSTEXPR
     .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 133 ----------------------------------------
      .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
      .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
      .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      .               struct _Mod<_Tp, __m, __a, __c, true, __s>
      .               {
      .         	static _Tp
      .         	__calc(_Tp __x)
      .         	{
 49,999 (0.1%)  	  _Tp __res = __a * __x + __c;
      .         	  if (__m)
649,987 (0.8%)  	    __res %= __m;
      .         	  return __res;
      .         	}
      .               };
      .         
      .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      .               inline _Tp
      .               __mod(_Tp __x)
      .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 3734 ----------------------------------------
      .            *  @return  Nothing.
      .            *
      .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
      .            *  provide random numbers.
      .           */
      .           template<typename _RandomAccessIterator,
      .         	   typename _UniformRandomNumberGenerator>
      .             void
      4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
      .         	    _UniformRandomNumberGenerator&& __g)
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
      .         	    _RandomAccessIterator>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
      2 (0.0%)        if (__first == __last)
      .         	return;
      .         
      .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
      .         	_DistanceType;
      .         
      .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
      .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
      .         	_Gen;
      .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
      .         	__uc_type;
      .         
      .               const __uc_type __urngrange = __g.max() - __g.min();
      .               const __uc_type __urange = __uc_type(__last - __first);
      .         
      6 (0.0%)        if (__urngrange / __urange >= __urange)
      .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
      .               {
      .         	_RandomAccessIterator __i = __first + 1;
      .         
      .         	// Since we know the range isn't empty, an even number of elements
      .         	// means an uneven number of elements /to swap/, in which case we
      .         	// do the first one up front:
      .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
      .         	  std::iter_swap(__i++, __first + __pospos.second);
      .         	}
      .         
      .         	return;
      .               }
      .         
      .               __distr_type __d;
      .         
149,999 (0.2%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
149,997 (0.2%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
      4 (0.0%)      }
      .         #endif // USE C99_STDINT
      .         
      .         #endif // C++11
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
      .         
      .           /**
      .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 1069 ----------------------------------------
      .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
      .         #endif
      .         
      .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      .               : _M_current(_Iterator()) { }
      .         
      .               explicit _GLIBCXX20_CONSTEXPR
      .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      6 (0.0%)        : _M_current(__i) { }
      .         
      .               // Allow iterator to const_iterator conversion
      .         #if __cplusplus >= 201103L
      .               template<typename _Iter, typename = __convertible_from<_Iter>>
      .         	_GLIBCXX20_CONSTEXPR
      .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
      .         	noexcept
      .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current += __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
      .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 50,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current -= __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
      .             { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
      .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
      .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
      .             _GLIBCXX_NOEXCEPT
150,004 (0.2%)      { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline __normal_iterator<_Iterator, _Container>
      .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
      .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
      .             _GLIBCXX_NOEXCEPT
      .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 89 ----------------------------------------
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
      .         				  _ForwardIterator>)
      .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
      .         	    typename iterator_traits<_ForwardIterator>::value_type>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
200,008 (0.3%)        for (; __first != __last; ++__first)
      .         	{
 50,000 (0.1%)  	  *__first = __value;
      .         	  ++__value;
      .         	}
      .             }
      .         #endif
      .         
      .         _GLIBCXX_END_NAMESPACE_VERSION
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 279 ----------------------------------------
      .         	    }
      .         	  return __product >> _Up_traits::__digits;
      .         	}
      .             };
      .         
      .           template<typename _IntType>
      .             template<typename _UniformRandomBitGenerator>
      .               typename uniform_int_distribution<_IntType>::result_type
349,993 (0.4%)        uniform_int_distribution<_IntType>::
      .               operator()(_UniformRandomBitGenerator& __urng,
      .         		 const param_type& __param)
      .               {
      .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
      .         	typedef typename make_unsigned<result_type>::type __utype;
      .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
      .         
      .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
      .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
      .         	static_assert( __urngmin < __urngmax,
      .         	    "Uniform random bit generator must define min() < max()");
      .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
      .         
 99,998 (0.1%)  	const __uctype __urange
      .         	  = __uctype(__param.b()) - __uctype(__param.a());
      .         
      .         	__uctype __ret;
 99,998 (0.1%)  	if (__urngrange > __urange)
      .         	  {
      .         	    // downscaling
      .         
 49,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
      .         
      .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
      .         #if __SIZEOF_INT128__
      .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
      .         	      {
      .         		// __urng produces values that use exactly 64-bits,
      .         		// so use 128-bit integers to downscale to desired range.
      .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
      .         		// so use 64-bit integers to downscale to desired range.
      .         		__UINT32_TYPE__ __u32erange = __uerange;
      .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
      .         	      }
      .         	    else
      .         #endif
      .         	      {
      .         		// fallback case (2 divisions)
249,995 (0.3%)  		const __uctype __scaling = __urngrange / __uerange;
 49,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
      .         		do
 49,999 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
 99,998 (0.1%)  		while (__ret >= __past);
149,997 (0.2%)  		__ret /= __scaling;
      .         	      }
      .         	  }
      .         	else if (__urngrange < __urange)
      .         	  {
      .         	    // upscaling
      .         	    /*
      .         	      Note that every value in [0, urange]
      .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
      .         			 (__urng, param_type(0, __urange / __uerngrange)));
      .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
      .         	      }
      .         	    while (__ret > __urange || __ret < __tmp);
      .         	  }
      .         	else
      .         	  __ret = __uctype(__urng()) - __urngmin;
      .         
 49,999 (0.1%)  	return __ret + __param.a();
299,994 (0.4%)        }
      .         
      .         
      .           template<typename _IntType>
      .             template<typename _ForwardIterator,
      .         	     typename _UniformRandomBitGenerator>
      .               void
      .               uniform_int_distribution<_IntType>::
      .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir________________ 

56,749,066 (72.7%)    annotated: files known & above threshold & readable, line numbers known
         0            annotated: files known & above threshold & readable, line numbers unknown
         0          unannotated: files known & above threshold & two or more non-identical
20,505,694 (26.3%)  unannotated: files known & above threshold & unreadable 
   235,192  (0.3%)  unannotated: files known & below threshold
   527,122  (0.7%)  unannotated: files unknown

