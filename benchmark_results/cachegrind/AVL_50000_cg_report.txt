--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13454
Command:          ./benchmark AVL 50000 benchmark_results/csv/AVL_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir_________________ 

84,698,185 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________  file:function

< 58,581,352 (69.2%, 69.2%)  /home/pratik/Desktop/Details 3/main.cpp:
  38,696,984 (45.7%)           avl_insert(AVLNode*, int)
  18,229,425 (21.5%)           avl_delete(AVLNode*, int)
     630,084  (0.7%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
     594,658  (0.7%)           rotateLeft(AVLNode*)
     364,417  (0.4%)           rotateRight(AVLNode*)

< 15,050,698 (17.8%, 86.9%)  ./malloc/./malloc/malloc.c:
   7,582,529  (9.0%)           _int_malloc
   2,655,484  (3.1%)           malloc
   2,271,108  (2.7%)           _int_free
   1,178,208  (1.4%)           malloc_consolidate
     918,604  (1.1%)           free
     243,543  (0.3%)           unlink_chunk.isra.0
     200,032  (0.2%)           alloc_perturb

<  5,001,617  (5.9%, 92.8%)  /usr/include/c++/13/bits/stl_algobase.h:
   3,387,849  (4.0%)           avl_insert(AVLNode*, int)
   1,492,138  (1.8%)           avl_delete(AVLNode*, int)

<  1,549,969  (1.8%, 94.7%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<    795,772  (0.9%, 95.6%)  ./elf/./elf/dl-lookup.c:
     497,744  (0.6%)           do_lookup_x
     185,267  (0.2%)           _dl_lookup_symbol_x
     112,761  (0.1%)           check_match

<    699,986  (0.8%, 96.4%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<    492,502  (0.6%, 97.0%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

<    409,114  (0.5%, 97.5%)  ???:
     318,612  (0.4%)           ???

<    300,012  (0.4%, 97.9%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    250,008  (0.3%, 98.1%)  /usr/include/c++/13/bits/stl_numeric.h:main

<    200,017  (0.2%, 98.4%)  /usr/include/c++/13/bits/stl_iterator.h:
     200,002  (0.2%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    200,013  (0.2%, 98.6%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<    199,996  (0.2%, 98.9%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    198,505  (0.2%, 99.1%)  ./malloc/./malloc/arena.c:
     100,015  (0.1%)           malloc
      98,418  (0.1%)           free

<    151,100  (0.2%, 99.3%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
     150,123  (0.2%)           __memcpy_avx_unaligned_erms

<    146,990  (0.2%, 99.4%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

<    118,533  (0.1%, 99.6%)  ./elf/../sysdeps/x86_64/dl-machine.h:
     118,396  (0.1%)           _dl_relocate_object

<    110,601  (0.1%, 99.7%)  ./elf/./elf/do-rel.h:
     110,545  (0.1%)           _dl_relocate_object

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________  function:file

> 42,084,833 (49.7%, 49.7%)  avl_insert(AVLNode*, int):
  38,696,984 (45.7%)           /home/pratik/Desktop/Details 3/main.cpp
   3,387,849  (4.0%)           /usr/include/c++/13/bits/stl_algobase.h

> 19,721,563 (23.3%, 73.0%)  avl_delete(AVLNode*, int):
  18,229,425 (21.5%)           /home/pratik/Desktop/Details 3/main.cpp
   1,492,138  (1.8%)           /usr/include/c++/13/bits/stl_algobase.h

>  7,582,529  (9.0%, 81.9%)  _int_malloc:./malloc/./malloc/malloc.c

>  2,755,499  (3.3%, 85.2%)  malloc:
   2,655,484  (3.1%)           ./malloc/./malloc/malloc.c
     100,015  (0.1%)           ./malloc/./malloc/arena.c

>  2,271,108  (2.7%, 87.9%)  _int_free:./malloc/./malloc/malloc.c

>  2,249,955  (2.7%, 90.5%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   1,549,969  (1.8%)           /usr/include/c++/13/bits/uniform_int_dist.h
     699,986  (0.8%)           /usr/include/c++/13/bits/random.h

>  1,178,208  (1.4%, 91.9%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  1,017,022  (1.2%, 93.1%)  free:
     918,604  (1.1%)           ./malloc/./malloc/malloc.c
      98,418  (0.1%)           ./malloc/./malloc/arena.c

>    700,010  (0.8%, 93.9%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
     300,012  (0.4%)           /usr/include/c++/13/bits/stl_algo.h
     200,002  (0.2%)           /usr/include/c++/13/bits/stl_iterator.h
     199,996  (0.2%)           /usr/include/c++/13/bits/move.h

>    677,769  (0.8%, 94.7%)  _dl_lookup_symbol_x:
     492,502  (0.6%)           ./elf/../sysdeps/generic/dl-new-hash.h
     185,267  (0.2%)           ./elf/./elf/dl-lookup.c

>    671,228  (0.8%, 95.5%)  rotateLeft(AVLNode*):
     594,658  (0.7%)           /home/pratik/Desktop/Details 3/main.cpp

>    630,139  (0.7%, 96.3%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
     630,084  (0.7%)           /home/pratik/Desktop/Details 3/main.cpp

>    514,812  (0.6%, 96.9%)  do_lookup_x:
     497,744  (0.6%)           ./elf/./elf/dl-lookup.c

>    409,453  (0.5%, 97.4%)  rotateRight(AVLNode*):
     364,417  (0.4%)           /home/pratik/Desktop/Details 3/main.cpp

>    386,364  (0.5%, 97.8%)  _dl_relocate_object:
     146,990  (0.2%)           ./elf/./elf/dl-reloc.c
     118,396  (0.1%)           ./elf/../sysdeps/x86_64/dl-machine.h
     110,545  (0.1%)           ./elf/./elf/do-rel.h

>    318,612  (0.4%, 98.2%)  ???:???

>    250,189  (0.3%, 98.5%)  main:
     250,008  (0.3%)           /usr/include/c++/13/bits/stl_numeric.h

>    243,543  (0.3%, 98.8%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>    200,032  (0.2%, 99.0%)  alloc_perturb:./malloc/./malloc/malloc.c

>    200,013  (0.2%, 99.2%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>    150,123  (0.2%, 99.4%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    112,761  (0.1%, 99.6%)  check_match:./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir________________ 

-- line 15 ----------------------------------------
         .          using namespace std;
         .          using namespace chrono;
         .          
         .          // ================= Memory Profiler =================
         .          size_t current_allocated_bytes = 0;
         .          size_t peak_allocated_bytes = 0;
         .          
         .          void *operator new(std::size_t size) noexcept(false)
         1  (0.0%)  {
   177,030  (0.2%)      current_allocated_bytes += size;
   118,018  (0.1%)      if (current_allocated_bytes > peak_allocated_bytes)
    59,012  (0.1%)          peak_allocated_bytes = current_allocated_bytes;
   118,021  (0.1%)      return malloc(size);
         .          }
         .          
         .          void operator delete(void *ptr) noexcept
    32,807  (0.0%)  {
    32,807  (0.0%)      free(ptr);
         .          }
         .          
         .          long get_peak_rss_kb()
         .          {
         .              struct rusage r;
         3  (0.0%)      getrusage(RUSAGE_SELF, &r);
         .              return r.ru_maxrss;
         .          }
         .          
         .          void report_memory_usage(std::ostream &out = std::cout)
         7  (0.0%)  {
         .              out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
         .              out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
         2  (0.0%)  }
         .          
         .          // ================= Benchmark Struct =================
         .          struct OperationStats
         .          {
         .              double insert_time = 0;
         .              double search_time = 0;
         .              double update_time = 0;
         .              double delete_time = 0;
-- line 54 ----------------------------------------
-- line 138 ----------------------------------------
         .                  return bst_successor(root->left, key, root->key);
         .          }
         .          
         .          // ==================== AVL Tree ====================
         .          struct AVLNode
         .          {
         .              int key, height;
         .              AVLNode *left, *right;
   236,016  (0.3%)      AVLNode(int k) : key(k), height(1), left(nullptr), right(nullptr) {}
         .          };
         .          
         .          int height(AVLNode *node)
         .          {
10,273,545 (12.1%)      return node ? node->height : 0;
         .          }
         .          
         .          int balanceFactor(AVLNode *node)
         .          {
 1,589,107  (1.9%)      return node ? height(node->left) - height(node->right) : 0;
         .          }
         .          
         .          void updateHeight(AVLNode *node)
         .          {
         .              if (node)
 5,134,330  (6.1%)          node->height = 1 + max(height(node->left), height(node->right));
         .          }
         .          
         .          AVLNode *rotateRight(AVLNode *y)
    16,309  (0.0%)  {
    16,309  (0.0%)      AVLNode *x = y->left;
    22,164  (0.0%)      AVLNode *T2 = x->right;
    24,055  (0.0%)      x->right = y;
    24,055  (0.0%)      y->left = T2;
         .              updateHeight(y);
         .              updateHeight(x);
         .              return x;
    32,618  (0.0%)  }
         .          
         .          AVLNode *rotateLeft(AVLNode *x)
    27,065  (0.0%)  {
    27,065  (0.0%)      AVLNode *y = x->right;
    27,065  (0.0%)      AVLNode *T2 = y->left;
    27,065  (0.0%)      y->left = x;
    27,065  (0.0%)      x->right = T2;
         .              updateHeight(x);
         .              updateHeight(y);
         .              return y;
    54,130  (0.1%)  }
         .          
         .          AVLNode *avl_insert(AVLNode *node, int key)
 5,974,995  (7.1%)  {
 3,525,993  (4.2%)      if (!node)
         .                  return new AVLNode(key);
 2,271,990  (2.7%)      if (key < node->key)
 1,649,859  (1.9%)          node->left = avl_insert(node->left, key);
   586,042  (0.7%)      else if (key > node->key)
 2,260,184  (2.7%)          node->right = avl_insert(node->right, key);
         .              else
 1,110,641  (1.3%)          return node;
         .          
         .              updateHeight(node);
         .              int balance = balanceFactor(node);
         .          
 2,255,638  (2.7%)      if (balance > 1 && key < node->left->key)
         .                  return rotateRight(node);
 2,229,426  (2.6%)      if (balance < -1 && key > node->right->key)
         .                  return rotateLeft(node);
     6,965  (0.0%)      if (balance > 1 && key > node->left->key)
         .              {
    20,895  (0.0%)          node->left = rotateLeft(node->left);
    13,930  (0.0%)          return rotateRight(node);
         .              }
     5,792  (0.0%)      if (balance < -1 && key < node->right->key)
         .              {
    11,584  (0.0%)          node->right = rotateRight(node->right);
    25,068  (0.0%)          return rotateLeft(node);
         .              }
         .          
         .              return node;
 4,760,497  (5.6%)  }
         .          
         .          AVLNode *minValueNode(AVLNode *node)
         .          {
    20,892  (0.0%)      AVLNode *current = node;
   201,356  (0.2%)      while (current->left != nullptr)
         .                  current = current->left;
         .              return current;
         .          }
         .          
         .          AVLNode *avl_delete(AVLNode *root, int key)
 2,143,752  (2.5%)  {
 1,605,616  (1.9%)      if (!root)
     4,396  (0.0%)          return root;
 1,067,480  (1.3%)      if (key < root->key)
 1,007,632  (1.2%)          root->left = avl_delete(root->left, key);
   281,832  (0.3%)      else if (key > root->key)
   281,832  (0.3%)          root->right = avl_delete(root->right, key);
         .              else
         .              {
   217,770  (0.3%)          if (!root->left || !root->right)
         .                  {
     1,497  (0.0%)              AVLNode *temp = root->left ? root->left : root->right;
    98,406  (0.1%)              delete root;
         .                      return temp;
         .                  }
         .                  AVLNode *temp = minValueNode(root->right);
    38,790  (0.0%)          root->key = temp->key;
   996,120  (1.2%)          root->right = avl_delete(root->right, temp->key);
         .              }
         .          
         .              updateHeight(root);
         .              int balance = balanceFactor(root);
         .          
   995,679  (1.2%)      if (balance > 1 && balanceFactor(root->left) >= 0)
         .                  return rotateRight(root);
     1,470  (0.0%)      if (balance > 1 && balanceFactor(root->left) < 0)
         .              {
     5,286  (0.0%)          root->left = rotateLeft(root->left);
     3,524  (0.0%)          return rotateRight(root);
         .              }
   999,887  (1.2%)      if (balance < -1 && balanceFactor(root->right) <= 0)
         .                  return rotateLeft(root);
     1,546  (0.0%)      if (balance < -1 && balanceFactor(root->right) > 0)
         .              {
     3,580  (0.0%)          root->right = rotateRight(root->right);
    11,608  (0.0%)          return rotateLeft(root);
         .              }
         .          
   491,481  (0.6%)      return root;
 2,664,558  (3.1%)  }
         .          
         .          bool avl_search(AVLNode *root, int key)
         .          {
         .              if (!root)
         .                  return false;
         .              if (root->key == key)
         .                  return true;
         .              return avl_search(key < root->key ? root->left : root->right, key);
-- line 275 ----------------------------------------
-- line 439 ----------------------------------------
         .          {
         .              auto it = tree.upper_bound(key);
         .              if (it == tree.end())
         .                  return -1;
         .              return *it;
         .          }
         .          
         .          // ==================== vEB Tree ====================
         4  (0.0%)  vector<int> vebTree;
         .          
         .          void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
         .          {
         .              if (low > high || index >= (int)vebTree.size())
         .                  return;
         .              int mid = (low + high) / 2;
         .              vebTree[index] = sorted[mid];
         .              build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
         .          }
         .          
         .          // ==================== Benchmark Dispatcher ====================
         .          OperationStats benchmark_tree(const string &tree_type,
         .                                        const vector<int> &data,
         .                                        const vector<int> &update_data,
         .                                        const vector<int> &delete_data,
         .                                        const vector<int> &pred_succ_data)
        16  (0.0%)  {
         4  (0.0%)      OperationStats stats;
         1  (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
         .          
         .              if (tree_type == "BST")
         .              {
         .                  BSTNode *root = nullptr;
         .                  t1 = high_resolution_clock::now();
         .                  for (int x : data)
         .                      root = bst_insert(root, x);
         .                  t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 518 ----------------------------------------
         .                  for (int x : pred_succ_data)
         .                      bst_successor(root, x);
         .                  t2 = high_resolution_clock::now();
         .                  stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
         .              }
         .          
         .              else if (tree_type == "AVL")
         .              {
         1  (0.0%)          AVLNode *root = nullptr;
         2  (0.0%)          t1 = high_resolution_clock::now();
   150,004  (0.2%)          for (int x : data)
   150,000  (0.2%)              root = avl_insert(root, x);
         1  (0.0%)          t2 = high_resolution_clock::now();
         3  (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         2  (0.0%)          t1 = high_resolution_clock::now();
         .                  for (int x : data)
         .                      avl_search(root, x);
         1  (0.0%)          t2 = high_resolution_clock::now();
         3  (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         2  (0.0%)          t1 = high_resolution_clock::now();
   120,005  (0.1%)          for (int x : update_data)
         .                  {
    90,000  (0.1%)              root = avl_delete(root, x);
    90,000  (0.1%)              root = avl_insert(root, x + 1);
         .                  }
         1  (0.0%)          t2 = high_resolution_clock::now();
         3  (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         2  (0.0%)          t1 = high_resolution_clock::now();
    15,004  (0.0%)          for (int x : delete_data)
    15,000  (0.0%)              root = avl_delete(root, x);
         .                  t2 = high_resolution_clock::now();
         .                  stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         .                  t1 = high_resolution_clock::now();
         .                  for (int x : pred_succ_data)
         .                      avl_predecessor(root, x);
         .                  t2 = high_resolution_clock::now();
         .                  stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
-- line 558 ----------------------------------------
-- line 586 ----------------------------------------
         .                      root = treap_insert(root, x + 1);
         .                  }
         .                  t2 = high_resolution_clock::now();
         .                  stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         .                  t1 = high_resolution_clock::now();
         .                  for (int x : delete_data)
         .                      root = treap_delete(root, x);
         1  (0.0%)          t2 = high_resolution_clock::now();
         3  (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         2  (0.0%)          t1 = high_resolution_clock::now();
         .                  for (int x : pred_succ_data)
         .                      treap_predecessor(root, x);
         1  (0.0%)          t2 = high_resolution_clock::now();
         3  (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
         .          
         2  (0.0%)          t1 = high_resolution_clock::now();
         .                  for (int x : pred_succ_data)
         .                      treap_successor(root, x);
         1  (0.0%)          t2 = high_resolution_clock::now();
         4  (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
         .              }
         .          
         .              else if (tree_type == "RB")
         .              {
         .                  RBTree tree;
         .                  t1 = high_resolution_clock::now();
         .                  for (int x : data)
         .                      rbtree_insert(tree, x);
-- line 615 ----------------------------------------
-- line 669 ----------------------------------------
         .          
         .                  stats.update_time = 0;
         .                  stats.delete_time = 0;
         .                  stats.pred_time = 0;
         .                  stats.succ_time = 0;
         .              }
         .          
         .              return stats;
        12  (0.0%)  }
         .          
         .          // =========================== MAIN ===============================
         .          int main(int argc, char **argv)
        13  (0.0%)  {
         2  (0.0%)      if (argc != 4)
         .              {
         .                  cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
         .                  return 1;
         .              }
         .          
         6  (0.0%)      string tree_type = argv[1];
         7  (0.0%)      int N = stoi(argv[2]);
         6  (0.0%)      string output_file = argv[3];
         .          
         2  (0.0%)      srand(42);
         .              vector<int> data(N);
         .              iota(data.begin(), data.end(), 0);
         4  (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
         .          
        10  (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
         9  (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
         9  (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
         .          
         8  (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
         .          
         .              // Always run benchmarks, only suppress writing
         4  (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
         .              {
         .                  ofstream out(output_file, ios::app);
         .                  if (!out)
         .                  {
         .                      cerr << "Failed to open " << output_file << endl;
         .                      return 1;
         .                  }
         .          
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
         .          
         .                  out << tree_type << "," << N << ","
         .                      << stats.insert_time << "," << stats.search_time << ","
         .                      << stats.update_time << "," << stats.delete_time << ","
         .                      << stats.pred_time << "," << stats.succ_time << ","
         .                      << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
         .              }
         .          
         2  (0.0%)      report_memory_usage();
         .          
         1  (0.0%)      return 0;
        21  (0.0%)  }
         .          

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 189 ----------------------------------------
     .             swap(_Tp& __a, _Tp& __b)
     .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
     .         				is_nothrow_move_assignable<_Tp>>::value)
     .             {
     .         #if __cplusplus < 201103L
     .               // concept requirements
     .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
     .         #endif
49,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
99,998 (0.1%)        __a = _GLIBCXX_MOVE(__b);
49,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
     .             }
     .         
     .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
     .           // DR 809. std::swap should be overloaded for array types.
     .           /// Swap the contents of two arrays.
     .           template<typename _Tp, size_t _Nm>
     .             _GLIBCXX20_CONSTEXPR
     .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 133 ----------------------------------------
      .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
      .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
      .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      .               struct _Mod<_Tp, __m, __a, __c, true, __s>
      .               {
      .         	static _Tp
      .         	__calc(_Tp __x)
      .         	{
 49,999 (0.1%)  	  _Tp __res = __a * __x + __c;
      .         	  if (__m)
649,987 (0.8%)  	    __res %= __m;
      .         	  return __res;
      .         	}
      .               };
      .         
      .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      .               inline _Tp
      .               __mod(_Tp __x)
      .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 3734 ----------------------------------------
      .            *  @return  Nothing.
      .            *
      .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
      .            *  provide random numbers.
      .           */
      .           template<typename _RandomAccessIterator,
      .         	   typename _UniformRandomNumberGenerator>
      .             void
      4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
      .         	    _UniformRandomNumberGenerator&& __g)
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
      .         	    _RandomAccessIterator>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
      2 (0.0%)        if (__first == __last)
      .         	return;
      .         
      .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
      .         	_DistanceType;
      .         
      .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
      .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
      .         	_Gen;
      .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
      .         	__uc_type;
      .         
      .               const __uc_type __urngrange = __g.max() - __g.min();
      .               const __uc_type __urange = __uc_type(__last - __first);
      .         
      6 (0.0%)        if (__urngrange / __urange >= __urange)
      .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
      .               {
      .         	_RandomAccessIterator __i = __first + 1;
      .         
      .         	// Since we know the range isn't empty, an even number of elements
      .         	// means an uneven number of elements /to swap/, in which case we
      .         	// do the first one up front:
      .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
      .         	  std::iter_swap(__i++, __first + __pospos.second);
      .         	}
      .         
      .         	return;
      .               }
      .         
      .               __distr_type __d;
      .         
149,999 (0.2%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
149,997 (0.2%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
      4 (0.0%)      }
      .         #endif // USE C99_STDINT
      .         
      .         #endif // C++11
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
      .         
      .           /**
      .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 254 ----------------------------------------
        .           template<typename _Tp>
        .             _GLIBCXX14_CONSTEXPR
        .             inline const _Tp&
        .             max(const _Tp& __a, const _Tp& __b)
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .               //return  __a < __b ? __b : __a;
5,001,593 (5.9%)        if (__a < __b)
        .         	return __b;
        .               return __a;
        .             }
        .         
        .           /**
        .            *  @brief This does what you think it does.
        .            *  @ingroup sorting_algorithms
        .            *  @param  __a  A thing of arbitrary type.
-- line 270 ----------------------------------------
-- line 428 ----------------------------------------
        .             struct __copy_move<_IsMove, true, random_access_iterator_tag>
        .             {
        .               template<typename _Tp, typename _Up>
        .         	_GLIBCXX20_CONSTEXPR
        .         	static _Up*
        .         	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
        .         	{
        .         	  const ptrdiff_t _Num = __last - __first;
        6 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
        9 (0.0%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
        .         	  else if (_Num == 1)
        .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
        .         	      __assign_one(__result, __first);
        .         	  return __result + _Num;
        .         	}
        .             };
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
-- line 445 ----------------------------------------
-- line 922 ----------------------------------------
        .           template<typename _ForwardIterator, typename _Tp>
        .             _GLIBCXX20_CONSTEXPR
        .             inline typename
        .             __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
        .             __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
        .         	      const _Tp& __value)
        .             {
        .               const _Tp __tmp = __value;
        2 (0.0%)        for (; __first != __last; ++__first)
        5 (0.0%)  	*__first = __tmp;
        .             }
        .         
        .           // Specialization: for char types we can use memset.
        .           template<typename _Tp>
        .             _GLIBCXX20_CONSTEXPR
        .             inline typename
        .             __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
        .             __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
-- line 939 ----------------------------------------
-- line 1115 ----------------------------------------
        .             _GLIBCXX20_CONSTEXPR
        .             inline _OutputIterator
        .             __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        .         	       std::random_access_iterator_tag)
        .             {
        .         #if __cplusplus >= 201103L
        .               static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
        .         #endif
        2 (0.0%)        if (__n <= 0)
        .         	return __first;
        .         
        .               __glibcxx_requires_can_increment(__first, __n);
        .         
        .               std::__fill_a(__first, __first + __n, __value);
        .               return __first + __n;
        .             }
        .         
-- line 1131 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 1069 ----------------------------------------
      .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
      .         #endif
      .         
      .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      .               : _M_current(_Iterator()) { }
      .         
      .               explicit _GLIBCXX20_CONSTEXPR
      .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      6 (0.0%)        : _M_current(__i) { }
      .         
      .               // Allow iterator to const_iterator conversion
      .         #if __cplusplus >= 201103L
      .               template<typename _Iter, typename = __convertible_from<_Iter>>
      .         	_GLIBCXX20_CONSTEXPR
      .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
      .         	noexcept
      .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current += __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
      .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 50,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current -= __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
      .             { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
      .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
      .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
      .             _GLIBCXX_NOEXCEPT
150,004 (0.2%)      { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline __normal_iterator<_Iterator, _Container>
      .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
      .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
      .             _GLIBCXX_NOEXCEPT
      .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 89 ----------------------------------------
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
      .         				  _ForwardIterator>)
      .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
      .         	    typename iterator_traits<_ForwardIterator>::value_type>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
200,008 (0.2%)        for (; __first != __last; ++__first)
      .         	{
 50,000 (0.1%)  	  *__first = __value;
      .         	  ++__value;
      .         	}
      .             }
      .         #endif
      .         
      .         _GLIBCXX_END_NAMESPACE_VERSION
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 279 ----------------------------------------
      .         	    }
      .         	  return __product >> _Up_traits::__digits;
      .         	}
      .             };
      .         
      .           template<typename _IntType>
      .             template<typename _UniformRandomBitGenerator>
      .               typename uniform_int_distribution<_IntType>::result_type
349,993 (0.4%)        uniform_int_distribution<_IntType>::
      .               operator()(_UniformRandomBitGenerator& __urng,
      .         		 const param_type& __param)
      .               {
      .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
      .         	typedef typename make_unsigned<result_type>::type __utype;
      .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
      .         
      .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
      .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
      .         	static_assert( __urngmin < __urngmax,
      .         	    "Uniform random bit generator must define min() < max()");
      .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
      .         
 99,998 (0.1%)  	const __uctype __urange
      .         	  = __uctype(__param.b()) - __uctype(__param.a());
      .         
      .         	__uctype __ret;
 99,998 (0.1%)  	if (__urngrange > __urange)
      .         	  {
      .         	    // downscaling
      .         
 49,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
      .         
      .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
      .         #if __SIZEOF_INT128__
      .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
      .         	      {
      .         		// __urng produces values that use exactly 64-bits,
      .         		// so use 128-bit integers to downscale to desired range.
      .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
      .         		// so use 64-bit integers to downscale to desired range.
      .         		__UINT32_TYPE__ __u32erange = __uerange;
      .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
      .         	      }
      .         	    else
      .         #endif
      .         	      {
      .         		// fallback case (2 divisions)
249,995 (0.3%)  		const __uctype __scaling = __urngrange / __uerange;
 49,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
      .         		do
 49,999 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
 99,998 (0.1%)  		while (__ret >= __past);
149,997 (0.2%)  		__ret /= __scaling;
      .         	      }
      .         	  }
      .         	else if (__urngrange < __urange)
      .         	  {
      .         	    // upscaling
      .         	    /*
      .         	      Note that every value in [0, urange]
      .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
      .         			 (__urng, param_type(0, __urange / __uerngrange)));
      .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
      .         	      }
      .         	    while (__ret > __urange || __ret < __tmp);
      .         	  }
      .         	else
      .         	  __ret = __uctype(__urng()) - __urngmin;
      .         
 49,999 (0.1%)  	return __ret + __param.a();
299,994 (0.4%)        }
      .         
      .         
      .           template<typename _IntType>
      .             template<typename _ForwardIterator,
      .         	     typename _UniformRandomBitGenerator>
      .               void
      .               uniform_int_distribution<_IntType>::
      .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir________________ 

66,782,957 (78.8%)    annotated: files known & above threshold & readable, line numbers known
         0            annotated: files known & above threshold & readable, line numbers unknown
         0          unannotated: files known & above threshold & two or more non-identical
17,264,714 (20.4%)  unannotated: files known & above threshold & unreadable 
   241,400  (0.3%)  unannotated: files known & below threshold
   409,114  (0.5%)  unannotated: files unknown

