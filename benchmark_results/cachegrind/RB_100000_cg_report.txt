--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13718
Command:          ./benchmark RB 100000 benchmark_results/csv/RB_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ 

103,738,455 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________  file:function

< 39,258,994 (37.8%, 37.8%)  ./malloc/./malloc/malloc.c:
  13,905,176 (13.4%)           _int_malloc
   8,470,722  (8.2%)           _int_free
   5,633,193  (5.4%)           malloc_consolidate
   5,309,224  (5.1%)           malloc
   3,303,484  (3.2%)           free
   2,235,993  (2.2%)           unlink_chunk.isra.0
     400,028  (0.4%)           alloc_perturb

< 35,421,577 (34.1%, 72.0%)  /usr/include/c++/13/bits/stl_tree.h:
  21,248,099 (20.5%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]
  11,039,445 (10.6%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]
   2,551,668  (2.5%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
     582,365  (0.6%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]

< 14,151,233 (13.6%, 85.6%)  ???:
   5,489,715  (5.3%)           std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
   4,118,389  (4.0%)           std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
   1,619,998  (1.6%)           ???
   1,595,305  (1.5%)           std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
   1,066,976  (1.0%)           std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
     235,960  (0.2%)           operator delete(void*, unsigned long)

<  3,099,972  (3.0%, 88.6%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  2,601,157  (2.5%, 91.1%)  /usr/include/c++/13/bits/stl_function.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]

<  2,145,971  (2.1%, 93.2%)  /home/pratik/Desktop/Details 3/main.cpp:
   1,909,839  (1.8%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
     235,962  (0.2%)           operator delete(void*)

<  1,399,999  (1.3%, 94.5%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<    795,772  (0.8%, 95.3%)  ./elf/./elf/dl-lookup.c:
     497,744  (0.5%)           do_lookup_x
     185,267  (0.2%)           _dl_lookup_symbol_x
     112,761  (0.1%)           check_match

<    600,012  (0.6%, 95.9%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    554,024  (0.5%, 96.4%)  ./malloc/./malloc/arena.c:
     353,937  (0.3%)           free
     200,015  (0.2%)           malloc

<    500,008  (0.5%, 96.9%)  /usr/include/c++/13/bits/stl_numeric.h:main

<    492,502  (0.5%, 97.4%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

<    400,018  (0.4%, 97.8%)  /usr/include/c++/13/bits/stl_iterator.h:
     400,002  (0.4%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    400,013  (0.4%, 98.2%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<    399,996  (0.4%, 98.5%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<    387,393  (0.4%, 98.9%)  /usr/include/c++/13/bits/new_allocator.h:
     138,392  (0.1%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]
     131,016  (0.1%)           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]
     117,976  (0.1%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

<    301,084  (0.3%, 99.2%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
     300,107  (0.3%)           __memcpy_avx_unaligned_erms

<    210,000  (0.2%, 99.4%)  /usr/include/c++/13/bits/stl_set.h:benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

<    146,990  (0.1%, 99.5%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

<    118,533  (0.1%, 99.7%)  ./elf/../sysdeps/x86_64/dl-machine.h:
     118,396  (0.1%)           _dl_relocate_object

<    110,601  (0.1%, 99.8%)  ./elf/./elf/do-rel.h:
     110,545  (0.1%)           _dl_relocate_object

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________  function:file

> 23,849,256 (23.0%, 23.0%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&) [clone .isra.0]:
  21,248,099 (20.5%)           /usr/include/c++/13/bits/stl_tree.h
   2,601,157  (2.5%)           /usr/include/c++/13/bits/stl_function.h

> 13,905,176 (13.4%, 36.4%)  _int_malloc:./malloc/./malloc/malloc.c

> 11,170,461 (10.8%, 47.2%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase(int const&) [clone .isra.0]:
  11,039,445 (10.6%)           /usr/include/c++/13/bits/stl_tree.h
     131,016  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>  8,470,722  (8.2%, 55.3%)  _int_free:./malloc/./malloc/malloc.c

>  5,633,193  (5.4%, 60.8%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  5,509,239  (5.3%, 66.1%)  malloc:
   5,309,224  (5.1%)           ./malloc/./malloc/malloc.c
     200,015  (0.2%)           ./malloc/./malloc/arena.c

>  5,489,715  (5.3%, 71.4%)  std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&):???

>  4,789,544  (4.6%, 76.0%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
   2,551,668  (2.5%)           /usr/include/c++/13/bits/stl_tree.h
   1,909,839  (1.8%)           /home/pratik/Desktop/Details 3/main.cpp
     210,000  (0.2%)           /usr/include/c++/13/bits/stl_set.h
     117,976  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>  4,499,971  (4.3%, 80.3%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   3,099,972  (3.0%)           /usr/include/c++/13/bits/uniform_int_dist.h
   1,399,999  (1.3%)           /usr/include/c++/13/bits/random.h

>  4,118,389  (4.0%, 84.3%)  std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&):???

>  3,657,421  (3.5%, 87.8%)  free:
   3,303,484  (3.2%)           ./malloc/./malloc/malloc.c
     353,937  (0.3%)           ./malloc/./malloc/arena.c

>  2,235,993  (2.2%, 90.0%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>  1,619,998  (1.6%, 91.5%)  ???:???

>  1,595,305  (1.5%, 93.1%)  std::_Rb_tree_decrement(std::_Rb_tree_node_base*):???

>  1,400,010  (1.3%, 94.4%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
     600,012  (0.6%)           /usr/include/c++/13/bits/stl_algo.h
     400,002  (0.4%)           /usr/include/c++/13/bits/stl_iterator.h
     399,996  (0.4%)           /usr/include/c++/13/bits/move.h

>  1,066,976  (1.0%, 95.4%)  std::_Rb_tree_increment(std::_Rb_tree_node_base const*):???

>    720,757  (0.7%, 96.1%)  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [clone .isra.0]:
     582,365  (0.6%)           /usr/include/c++/13/bits/stl_tree.h
     138,392  (0.1%)           /usr/include/c++/13/bits/new_allocator.h

>    677,769  (0.7%, 96.8%)  _dl_lookup_symbol_x:
     492,502  (0.5%)           ./elf/../sysdeps/generic/dl-new-hash.h
     185,267  (0.2%)           ./elf/./elf/dl-lookup.c

>    514,812  (0.5%, 97.3%)  do_lookup_x:
     497,744  (0.5%)           ./elf/./elf/dl-lookup.c

>    500,189  (0.5%, 97.8%)  main:
     500,008  (0.5%)           /usr/include/c++/13/bits/stl_numeric.h

>    400,028  (0.4%, 98.2%)  alloc_perturb:./malloc/./malloc/malloc.c

>    400,013  (0.4%, 98.5%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>    386,364  (0.4%, 98.9%)  _dl_relocate_object:
     146,990  (0.1%)           ./elf/./elf/dl-reloc.c
     118,396  (0.1%)           ./elf/../sysdeps/x86_64/dl-machine.h
     110,545  (0.1%)           ./elf/./elf/do-rel.h

>    300,107  (0.3%, 99.2%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    235,962  (0.2%, 99.4%)  operator delete(void*):/home/pratik/Desktop/Details 3/main.cpp

>    235,960  (0.2%, 99.7%)  operator delete(void*, unsigned long):???

>    112,761  (0.1%, 99.8%)  check_match:./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir____________ 

-- line 15 ----------------------------------------
      .         using namespace std;
      .         using namespace chrono;
      .         
      .         // ================= Memory Profiler =================
      .         size_t current_allocated_bytes = 0;
      .         size_t peak_allocated_bytes = 0;
      .         
      .         void *operator new(std::size_t size) noexcept(false)
      1 (0.0%)  {
353,946 (0.3%)      current_allocated_bytes += size;
235,962 (0.2%)      if (current_allocated_bytes > peak_allocated_bytes)
117,984 (0.1%)          peak_allocated_bytes = current_allocated_bytes;
471,917 (0.5%)      return malloc(size);
      .         }
      .         
      .         void operator delete(void *ptr) noexcept
117,981 (0.1%)  {
117,981 (0.1%)      free(ptr);
      .         }
      .         
      .         long get_peak_rss_kb()
      .         {
      .             struct rusage r;
      3 (0.0%)      getrusage(RUSAGE_SELF, &r);
      .             return r.ru_maxrss;
      .         }
      .         
      .         void report_memory_usage(std::ostream &out = std::cout)
      7 (0.0%)  {
      .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
      .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
      2 (0.0%)  }
      .         
      .         // ================= Benchmark Struct =================
      .         struct OperationStats
      .         {
      .             double insert_time = 0;
      .             double search_time = 0;
      .             double update_time = 0;
      .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 439 ----------------------------------------
      .         {
      .             auto it = tree.upper_bound(key);
      .             if (it == tree.end())
      .                 return -1;
      .             return *it;
      .         }
      .         
      .         // ==================== vEB Tree ====================
      4 (0.0%)  vector<int> vebTree;
      .         
      .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
      .         {
      .             if (low > high || index >= (int)vebTree.size())
      .                 return;
      .             int mid = (low + high) / 2;
      .             vebTree[index] = sorted[mid];
      .             build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
      .         }
      .         
      .         // ==================== Benchmark Dispatcher ====================
      .         OperationStats benchmark_tree(const string &tree_type,
      .                                       const vector<int> &data,
      .                                       const vector<int> &update_data,
      .                                       const vector<int> &delete_data,
      .                                       const vector<int> &pred_succ_data)
     16 (0.0%)  {
      4 (0.0%)      OperationStats stats;
      1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
      .         
      .             if (tree_type == "BST")
      .             {
      .                 BSTNode *root = nullptr;
      .                 t1 = high_resolution_clock::now();
      .                 for (int x : data)
      .                     root = bst_insert(root, x);
      .                 t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 605 ----------------------------------------
      .                     treap_successor(root, x);
      .                 t2 = high_resolution_clock::now();
      .                 stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
      .             }
      .         
      .             else if (tree_type == "RB")
      .             {
      .                 RBTree tree;
      3 (0.0%)          t1 = high_resolution_clock::now();
400,003 (0.4%)          for (int x : data)
      .                     rbtree_insert(tree, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : data)
      .                     rbtree_search(tree, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      3 (0.0%)          t1 = high_resolution_clock::now();
240,002 (0.2%)          for (int x : update_data)
      .                 {
      .                     rbtree_delete(tree, x);
 60,000 (0.1%)              rbtree_insert(tree, x + 1);
      .                 }
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
 30,003 (0.0%)          for (int x : delete_data)
      .                     rbtree_delete(tree, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : pred_succ_data)
      .                     rbtree_predecessor(tree, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
      .         
      2 (0.0%)          t1 = high_resolution_clock::now();
      .                 for (int x : pred_succ_data)
      .                     rbtree_successor(tree, x);
      1 (0.0%)          t2 = high_resolution_clock::now();
      3 (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
      .             }
      .         
      .             else if (tree_type == "vEB")
      .             {
      .                 vector<int> sorted = data;
      .                 sort(sorted.begin(), sorted.end());
      .                 vebTree.assign(sorted.size(), -1);
      .         
-- line 658 ----------------------------------------
-- line 669 ----------------------------------------
      .         
      .                 stats.update_time = 0;
      .                 stats.delete_time = 0;
      .                 stats.pred_time = 0;
      .                 stats.succ_time = 0;
      .             }
      .         
      .             return stats;
     12 (0.0%)  }
      .         
      .         // =========================== MAIN ===============================
      .         int main(int argc, char **argv)
     13 (0.0%)  {
      2 (0.0%)      if (argc != 4)
      .             {
      .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
      .                 return 1;
      .             }
      .         
      6 (0.0%)      string tree_type = argv[1];
      7 (0.0%)      int N = stoi(argv[2]);
      6 (0.0%)      string output_file = argv[3];
      .         
      2 (0.0%)      srand(42);
      .             vector<int> data(N);
      .             iota(data.begin(), data.end(), 0);
      4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
      .         
     10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
      9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
      9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
      .         
      8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
      .         
      .             // Always run benchmarks, only suppress writing
      4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
      .             {
      .                 ofstream out(output_file, ios::app);
      .                 if (!out)
      .                 {
      .                     cerr << "Failed to open " << output_file << endl;
      .                     return 1;
      .                 }
      .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
      .         
      .                 out << tree_type << "," << N << ","
      .                     << stats.insert_time << "," << stats.search_time << ","
      .                     << stats.update_time << "," << stats.delete_time << ","
      .                     << stats.pred_time << "," << stats.succ_time << ","
      .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
      .             }
      .         
      2 (0.0%)      report_memory_usage();
      .         
      1 (0.0%)      return 0;
     21 (0.0%)  }
      .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 189 ----------------------------------------
      .             swap(_Tp& __a, _Tp& __b)
      .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
      .         				is_nothrow_move_assignable<_Tp>>::value)
      .             {
      .         #if __cplusplus < 201103L
      .               // concept requirements
      .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
      .         #endif
 99,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
199,998 (0.2%)        __a = _GLIBCXX_MOVE(__b);
 99,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
      .             }
      .         
      .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .           // DR 809. std::swap should be overloaded for array types.
      .           /// Swap the contents of two arrays.
      .           template<typename _Tp, size_t _Nm>
      .             _GLIBCXX20_CONSTEXPR
      .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/new_allocator.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 143 ----------------------------------------
      .         #if __cpp_aligned_new
      .         	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .         	  {
      .         	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
      .         	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
      .         							   __al));
      .         	  }
      .         #endif
      1 (0.0%)  	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      .               }
      .         
      .               // __p is not permitted to be a null pointer.
      .               void
      .               deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      .               {
      .         #if __cpp_sized_deallocation
      .         # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
-- line 159 ----------------------------------------
-- line 164 ----------------------------------------
      .         #if __cpp_aligned_new
      .         	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .         	  {
      .         	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
      .         				     std::align_val_t(alignof(_Tp)));
      .         	    return;
      .         	  }
      .         #endif
269,416 (0.3%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      .               }
      .         
      .         #undef _GLIBCXX_SIZED_DEALLOC
      .         #undef _GLIBCXX_OPERATOR_DELETE
      .         #undef _GLIBCXX_OPERATOR_NEW
      .         
      .         #if __cplusplus <= 201703L
      .               __attribute__((__always_inline__))
-- line 180 ----------------------------------------
-- line 183 ----------------------------------------
      .               { return _M_max_size(); }
      .         
      .         #if __cplusplus >= 201103L
      .               template<typename _Up, typename... _Args>
      .         	__attribute__((__always_inline__))
      .         	void
      .         	construct(_Up* __p, _Args&&... __args)
      .         	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
117,976 (0.1%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      .         
      .               template<typename _Up>
      .         	__attribute__((__always_inline__))
      .         	void
      .         	destroy(_Up* __p)
      .         	noexcept(std::is_nothrow_destructible<_Up>::value)
      .         	{ __p->~_Up(); }
      .         #else
-- line 199 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 133 ----------------------------------------
        .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
        .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
        .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
        .               struct _Mod<_Tp, __m, __a, __c, true, __s>
        .               {
        .         	static _Tp
        .         	__calc(_Tp __x)
        .         	{
  100,000 (0.1%)  	  _Tp __res = __a * __x + __c;
        .         	  if (__m)
1,299,999 (1.3%)  	    __res %= __m;
        .         	  return __res;
        .         	}
        .               };
        .         
        .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
        .               inline _Tp
        .               __mod(_Tp __x)
        .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 3734 ----------------------------------------
      .            *  @return  Nothing.
      .            *
      .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
      .            *  provide random numbers.
      .           */
      .           template<typename _RandomAccessIterator,
      .         	   typename _UniformRandomNumberGenerator>
      .             void
      4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
      .         	    _UniformRandomNumberGenerator&& __g)
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
      .         	    _RandomAccessIterator>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
      2 (0.0%)        if (__first == __last)
      .         	return;
      .         
      .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
      .         	_DistanceType;
      .         
      .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
      .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
      .         	_Gen;
      .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
      .         	__uc_type;
      .         
      .               const __uc_type __urngrange = __g.max() - __g.min();
      .               const __uc_type __urange = __uc_type(__last - __first);
      .         
      6 (0.0%)        if (__urngrange / __urange >= __urange)
      .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
      .               {
      .         	_RandomAccessIterator __i = __first + 1;
      .         
      .         	// Since we know the range isn't empty, an even number of elements
      .         	// means an uneven number of elements /to swap/, in which case we
      .         	// do the first one up front:
      .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
      .         	  std::iter_swap(__i++, __first + __pospos.second);
      .         	}
      .         
      .         	return;
      .               }
      .         
      .               __distr_type __d;
      .         
299,999 (0.3%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
299,997 (0.3%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
      4 (0.0%)      }
      .         #endif // USE C99_STDINT
      .         
      .         #endif // C++11
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
      .         
      .           /**
      .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_function.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 400 ----------------------------------------
        .         
        .           /// One of the @link comparison_functors comparison functors@endlink.
        .           template<typename _Tp>
        .             struct less : public binary_function<_Tp, _Tp, bool>
        .             {
        .               _GLIBCXX14_CONSTEXPR
        .               bool
        .               operator()(const _Tp& __x, const _Tp& __y) const
2,601,157 (2.5%)        { return __x < __y; }
        .             };
        .         
        .           /// One of the @link comparison_functors comparison functors@endlink.
        .           template<typename _Tp>
        .             struct greater_equal : public binary_function<_Tp, _Tp, bool>
        .             {
        .               _GLIBCXX14_CONSTEXPR
        .               bool
-- line 416 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 1069 ----------------------------------------
      .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
      .         #endif
      .         
      .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      .               : _M_current(_Iterator()) { }
      .         
      .               explicit _GLIBCXX20_CONSTEXPR
      .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      7 (0.0%)        : _M_current(__i) { }
      .         
      .               // Allow iterator to const_iterator conversion
      .         #if __cplusplus >= 201103L
      .               template<typename _Iter, typename = __convertible_from<_Iter>>
      .         	_GLIBCXX20_CONSTEXPR
      .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
      .         	noexcept
      .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current += __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
      .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
100,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator&
      .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
      .               { _M_current -= __n; return *this; }
      .         
      .               _GLIBCXX20_CONSTEXPR
      .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
      .             { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
      .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
      .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
      .             _GLIBCXX_NOEXCEPT
300,004 (0.3%)      { return __lhs.base() - __rhs.base(); }
      .         
      .           template<typename _Iterator, typename _Container>
      .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .             inline __normal_iterator<_Iterator, _Container>
      .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
      .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
      .             _GLIBCXX_NOEXCEPT
      .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 89 ----------------------------------------
      .             {
      .               // concept requirements
      .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
      .         				  _ForwardIterator>)
      .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
      .         	    typename iterator_traits<_ForwardIterator>::value_type>)
      .               __glibcxx_requires_valid_range(__first, __last);
      .         
400,008 (0.4%)        for (; __first != __last; ++__first)
      .         	{
100,000 (0.1%)  	  *__first = __value;
      .         	  ++__value;
      .         	}
      .             }
      .         #endif
      .         
      .         _GLIBCXX_END_NAMESPACE_VERSION
      .         
      .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_set.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 679 ----------------------------------------
      .                *  This function erases all the elements located by the given key from
      .                *  a %set.
      .                *  Note that this function only erases the element, and that if
      .                *  the element is itself a pointer, the pointed-to memory is not touched
      .                *  in any way.  Managing the pointer is the user's responsibility.
      .                */
      .               size_type
      .               erase(const key_type& __x)
210,000 (0.2%)        { return _M_t.erase(__x); }
      .         
      .         #if __cplusplus >= 201103L
      .               // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .               // DR 130. Associative erase should return an iterator.
      .               /**
      .                *  @brief Erases a [__first,__last) range of elements from a %set.
      .                *  @param  __first  Iterator pointing to the start of the range to be
      .                *                 erased.
-- line 695 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_tree.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 167 ----------------------------------------
        .           // Helper type to manage default initialization of node count and header.
        .           struct _Rb_tree_header
        .           {
        .             _Rb_tree_node_base	_M_header;
        .             size_t		_M_node_count; // Keeps track of size of tree.
        .         
        .             _Rb_tree_header() _GLIBCXX_NOEXCEPT
        .             {
        1 (0.0%)        _M_header._M_color = _S_red;
        .               _M_reset();
        .             }
        .         
        .         #if __cplusplus >= 201103L
        .             _Rb_tree_header(_Rb_tree_header&& __x) noexcept
        .             {
        .               if (__x._M_header._M_parent != nullptr)
        .         	_M_move_data(__x);
-- line 183 ----------------------------------------
-- line 200 ----------------------------------------
        .               _M_node_count = __from._M_node_count;
        .         
        .               __from._M_reset();
        .             }
        .         
        .             void
        .             _M_reset()
        .             {
        1 (0.0%)        _M_header._M_parent = 0;
        3 (0.0%)        _M_header._M_left = &_M_header;
        1 (0.0%)        _M_header._M_right = &_M_header;
        1 (0.0%)        _M_node_count = 0;
        .             }
        .           };
        .         
        .           template<typename _Val>
        .             struct _Rb_tree_node : public _Rb_tree_node_base
        .             {
        .               typedef _Rb_tree_node<_Val>* _Link_type;
        .         
-- line 219 ----------------------------------------
-- line 265 ----------------------------------------
        .               typedef _Rb_tree_iterator<_Tp>		_Self;
        .               typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
        .               typedef _Rb_tree_node<_Tp>*		_Link_type;
        .         
        .               _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
        .               : _M_node() { }
        .         
        .               explicit
  159,999 (0.2%)        _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
        .               : _M_node(__x) { }
        .         
        .               reference
        .               operator*() const _GLIBCXX_NOEXCEPT
        .               { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
        .         
        .               pointer
        .               operator->() const _GLIBCXX_NOEXCEPT
-- line 281 ----------------------------------------
-- line 294 ----------------------------------------
        .         	_Self __tmp = *this;
        .         	_M_node = _Rb_tree_increment(_M_node);
        .         	return __tmp;
        .               }
        .         
        .               _Self&
        .               operator--() _GLIBCXX_NOEXCEPT
        .               {
  261,621 (0.3%)  	_M_node = _Rb_tree_decrement(_M_node);
  174,423 (0.2%)  	return *this;
        .               }
        .         
        .               _Self
        .               operator--(int) _GLIBCXX_NOEXCEPT
        .               {
        .         	_Self __tmp = *this;
        .         	_M_node = _Rb_tree_decrement(_M_node);
        .         	return __tmp;
-- line 311 ----------------------------------------
-- line 368 ----------------------------------------
        .         	_M_node = _Rb_tree_increment(_M_node);
        .         	return *this;
        .               }
        .         
        .               _Self
        .               operator++(int) _GLIBCXX_NOEXCEPT
        .               {
        .         	_Self __tmp = *this;
  262,032 (0.3%)  	_M_node = _Rb_tree_increment(_M_node);
        .         	return __tmp;
        .               }
        .         
        .               _Self&
        .               operator--() _GLIBCXX_NOEXCEPT
        .               {
        .         	_M_node = _Rb_tree_decrement(_M_node);
        .         	return *this;
-- line 384 ----------------------------------------
-- line 729 ----------------------------------------
        .               { return this->_M_impl._M_header._M_right; }
        .         
        .               _Const_Base_ptr
        .               _M_rightmost() const _GLIBCXX_NOEXCEPT
        .               { return this->_M_impl._M_header._M_right; }
        .         
        .               _Link_type
        .               _M_mbegin() const _GLIBCXX_NOEXCEPT
  230,000 (0.2%)        { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
        .         
        .               _Link_type
        .               _M_begin() _GLIBCXX_NOEXCEPT
        .               { return _M_mbegin(); }
        .         
        .               _Const_Link_type
        .               _M_begin() const _GLIBCXX_NOEXCEPT
        .               {
        .         	return static_cast<_Const_Link_type>
        .         	  (this->_M_impl._M_header._M_parent);
        .               }
        .         
        .               _Base_ptr
        .               _M_end() _GLIBCXX_NOEXCEPT
   70,001 (0.1%)        { return &this->_M_impl._M_header; }
        .         
        .               _Const_Base_ptr
        .               _M_end() const _GLIBCXX_NOEXCEPT
        .               { return &this->_M_impl._M_header; }
        .         
        .               static const _Key&
        .               _S_key(_Const_Link_type __x)
        .               {
-- line 760 ----------------------------------------
-- line 773 ----------------------------------------
        .         	      "comparison object must be invocable as const");
        .         # endif // C++17
        .         #endif // C++11
        .         
        .         	return _KeyOfValue()(*__x->_M_valptr());
        .               }
        .         
        .               static _Link_type
    8,962 (0.0%)        _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
  829,455 (0.8%)        { return static_cast<_Link_type>(__x->_M_left); }
        .         
        .               static _Const_Link_type
        .               _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        .               { return static_cast<_Const_Link_type>(__x->_M_left); }
        .         
        .               static _Link_type
        .               _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
3,411,112 (3.3%)        { return static_cast<_Link_type>(__x->_M_right); }
        .         
        .               static _Const_Link_type
        .               _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        .               { return static_cast<_Const_Link_type>(__x->_M_right); }
        .         
        .               static const _Key&
        .               _S_key(_Const_Base_ptr __x)
        .               { return _S_key(static_cast<_Const_Link_type>(__x)); }
-- line 798 ----------------------------------------
-- line 978 ----------------------------------------
        .         	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
        .         		 std::declval<typename _Alloc_traits::is_always_equal>())) )
        .               : _Rb_tree(std::move(__x), std::move(__a),
        .         		 typename _Alloc_traits::is_always_equal{})
        .               { }
        .         #endif
        .         
        .               ~_Rb_tree() _GLIBCXX_NOEXCEPT
        2 (0.0%)        { _M_erase(_M_begin()); }
        .         
        .               _Rb_tree&
        .               operator=(const _Rb_tree& __x);
        .         
        .               // Accessors.
        .               _Compare
        .               key_comp() const
        .               { return _M_impl._M_key_compare; }
-- line 994 ----------------------------------------
-- line 1819 ----------------------------------------
        .               _M_insert_(_Base_ptr __x, _Base_ptr __p,
        .         #if __cplusplus >= 201103L
        .         		 _Arg&& __v,
        .         #else
        .         		 const _Val& __v,
        .         #endif
        .         		 _NodeGen& __node_gen)
        .               {
  589,880 (0.6%)  	bool __insert_left = (__x != 0 || __p == _M_end()
  571,899 (0.6%)  			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
        .         							_S_key(__p)));
        .         
        .         	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
        .         
  471,904 (0.5%)  	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        .         				      this->_M_impl._M_header);
  117,976 (0.1%)  	++_M_impl._M_node_count;
        .         	return iterator(__z);
        .               }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .         #if __cplusplus >= 201103L
        .             template<typename _Arg>
        .         #endif
-- line 1843 ----------------------------------------
-- line 1922 ----------------------------------------
        .         	    __throw_exception_again;
        .         	  }
        .         	return __top;
        .               }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             void
   71,704 (0.1%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_erase(_Link_type __x)
        .             {
        .               // Erase without rebalancing.
  271,597 (0.3%)        while (__x != 0)
        .         	{
   26,886 (0.0%)  	  _M_erase(_S_right(__x));
        .         	  _Link_type __y = _S_left(__x);
        .         	  _M_drop_node(__x);
        .         	  __x = __y;
        .         	}
   71,704 (0.1%)      }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         		      _Compare, _Alloc>::iterator
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_lower_bound(_Link_type __x, _Base_ptr __y,
        .         		   const _Key& __k)
        .             {
  451,362 (0.4%)        while (__x != 0)
  213,564 (0.2%)  	if (!_M_impl._M_key_compare(_S_key(__x), __k))
        .         	  __y = __x, __x = _S_left(__x);
        .         	else
  106,782 (0.1%)  	  __x = _S_right(__x);
        .               return iterator(__y);
        .             }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         		      _Compare, _Alloc>::const_iterator
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1963 ----------------------------------------
-- line 1975 ----------------------------------------
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         		      _Compare, _Alloc>::iterator
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_upper_bound(_Link_type __x, _Base_ptr __y,
        .         		   const _Key& __k)
        .             {
  390,896 (0.4%)        while (__x != 0)
  214,616 (0.2%)  	if (_M_impl._M_key_compare(__k, _S_key(__x)))
  214,616 (0.2%)  	  __y = __x, __x = _S_left(__x);
        .         	else
        .         	  __x = _S_right(__x);
        .               return iterator(__y);
        .             }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
-- line 1993 ----------------------------------------
-- line 2008 ----------------------------------------
        .         	   typename _Compare, typename _Alloc>
        .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::iterator,
        .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::iterator>
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             equal_range(const _Key& __k)
        .             {
  140,000 (0.1%)        _Link_type __x = _M_begin();
   70,000 (0.1%)        _Base_ptr __y = _M_end();
2,080,802 (2.0%)        while (__x != 0)
        .         	{
2,071,818 (2.0%)  	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        .         	    __x = _S_right(__x);
  543,776 (0.5%)  	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
  956,536 (0.9%)  	    __y = __x, __x = _S_left(__x);
        .         	  else
        .         	    {
        .         	      _Link_type __xu(__x);
        .         	      _Base_ptr __yu(__y);
        .         	      __y = __x, __x = _S_left(__x);
        .         	      __xu = _S_right(__xu);
        .         	      return pair<iterator,
        .         			  iterator>(_M_lower_bound(__x, __y, __k),
-- line 2031 ----------------------------------------
-- line 2100 ----------------------------------------
        .             }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::_Base_ptr,
        .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::_Base_ptr>
  640,000 (0.6%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_get_insert_unique_pos(const key_type& __k)
        .             {
        .               typedef pair<_Base_ptr, _Base_ptr> _Res;
        .               _Link_type __x = _M_begin();
        .               _Base_ptr __y = _M_end();
        .               bool __comp = true;
7,701,852 (7.4%)        while (__x != 0)
        .         	{
        .         	  __y = __x;
        .         	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
7,541,850 (7.3%)  	  __x = __comp ? _S_left(__x) : _S_right(__x);
        .         	}
        .               iterator __j = iterator(__y);
  319,998 (0.3%)        if (__comp)
        .         	{
  174,432 (0.2%)  	  if (__j == begin())
        .         	    return _Res(__x, __y);
        .         	  else
        .         	    --__j;
        .         	}
  639,964 (0.6%)        if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
        .         	return _Res(__x, __y);
        .               return _Res(__j._M_node, 0);
  960,009 (0.9%)      }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::_Base_ptr,
        .         	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         			   _Compare, _Alloc>::_Base_ptr>
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2140 ----------------------------------------
-- line 2163 ----------------------------------------
        .         #if __cplusplus >= 201103L
        .             _M_insert_unique(_Arg&& __v)
        .         #else
        .             _M_insert_unique(const _Val& __v)
        .         #endif
        .             {
        .               typedef pair<iterator, bool> _Res;
        .               pair<_Base_ptr, _Base_ptr> __res
  480,000 (0.5%)  	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
        .         
  320,000 (0.3%)        if (__res.second)
        .         	{
        .         	  _Alloc_node __an(*this);
        .         	  return _Res(_M_insert_(__res.first, __res.second,
        .         				 _GLIBCXX_FORWARD(_Arg, __v), __an),
        .         		      true);
        .         	}
        .         
        .               return _Res(iterator(__res.first), false);
-- line 2181 ----------------------------------------
-- line 2486 ----------------------------------------
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             void
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_erase_aux(const_iterator __position)
        .             {
        .               _Link_type __y =
        .         	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
  262,032 (0.3%)  				(const_cast<_Base_ptr>(__position._M_node),
        .         				 this->_M_impl._M_header));
        .               _M_drop_node(__y);
   65,508 (0.1%)        --_M_impl._M_node_count;
        .             }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             void
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             _M_erase_aux(const_iterator __first, const_iterator __last)
        .             {
  157,968 (0.2%)        if (__first == begin() && __last == end())
        .         	clear();
        .               else
  262,032 (0.3%)  	while (__first != __last)
        .         	  _M_erase_aux(__first++);
        .             }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
  420,000 (0.4%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             erase(const _Key& __x)
        .             {
        .               pair<iterator, iterator> __p = equal_range(__x);
        .               const size_type __old_size = size();
        .               _M_erase_aux(__p.first, __p.second);
        .               return __old_size - size();
  420,000 (0.4%)      }
        .         
        .           template<typename _Key, typename _Val, typename _KeyOfValue,
        .         	   typename _Compare, typename _Alloc>
        .             typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .         		      _Compare, _Alloc>::iterator
        .             _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .             find(const _Key& __k)
        .             {
-- line 2531 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir____________ 

-- line 279 ----------------------------------------
      .         	    }
      .         	  return __product >> _Up_traits::__digits;
      .         	}
      .             };
      .         
      .           template<typename _IntType>
      .             template<typename _UniformRandomBitGenerator>
      .               typename uniform_int_distribution<_IntType>::result_type
699,993 (0.7%)        uniform_int_distribution<_IntType>::
      .               operator()(_UniformRandomBitGenerator& __urng,
      .         		 const param_type& __param)
      .               {
      .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
      .         	typedef typename make_unsigned<result_type>::type __utype;
      .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
      .         
      .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
      .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
      .         	static_assert( __urngmin < __urngmax,
      .         	    "Uniform random bit generator must define min() < max()");
      .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
      .         
199,998 (0.2%)  	const __uctype __urange
      .         	  = __uctype(__param.b()) - __uctype(__param.a());
      .         
      .         	__uctype __ret;
199,998 (0.2%)  	if (__urngrange > __urange)
      .         	  {
      .         	    // downscaling
      .         
 99,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
      .         
      .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
      .         #if __SIZEOF_INT128__
      .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
      .         	      {
      .         		// __urng produces values that use exactly 64-bits,
      .         		// so use 128-bit integers to downscale to desired range.
      .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
      .         		// so use 64-bit integers to downscale to desired range.
      .         		__UINT32_TYPE__ __u32erange = __uerange;
      .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
      .         	      }
      .         	    else
      .         #endif
      .         	      {
      .         		// fallback case (2 divisions)
499,995 (0.5%)  		const __uctype __scaling = __urngrange / __uerange;
 99,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
      .         		do
100,000 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
200,000 (0.2%)  		while (__ret >= __past);
299,997 (0.3%)  		__ret /= __scaling;
      .         	      }
      .         	  }
      .         	else if (__urngrange < __urange)
      .         	  {
      .         	    // upscaling
      .         	    /*
      .         	      Note that every value in [0, urange]
      .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
      .         			 (__urng, param_type(0, __urange / __uerngrange)));
      .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
      .         	      }
      .         	    while (__ret > __urange || __ret < __tmp);
      .         	  }
      .         	else
      .         	  __ret = __uctype(__urng()) - __urngmin;
      .         
 99,999 (0.1%)  	return __ret + __param.a();
599,994 (0.6%)        }
      .         
      .         
      .           template<typename _IntType>
      .             template<typename _ForwardIterator,
      .         	     typename _UniformRandomBitGenerator>
      .               void
      .               uniform_int_distribution<_IntType>::
      .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir________________ 

47,166,103 (45.5%)    annotated: files known & above threshold & readable, line numbers known
         0            annotated: files known & above threshold & readable, line numbers unknown
         0          unannotated: files known & above threshold & two or more non-identical
42,178,513 (40.7%)  unannotated: files known & above threshold & unreadable 
   242,606  (0.2%)  unannotated: files known & below threshold
14,151,233 (13.6%)  unannotated: files unknown

