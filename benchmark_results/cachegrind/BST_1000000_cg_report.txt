--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13395
Command:          ./benchmark BST 1000000 benchmark_results/csv/BST_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir____________________ 

1,397,392,459 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir__________________________  file:function

< 1,025,917,699 (73.4%, 73.4%)  /home/pratik/Desktop/Details 3/main.cpp:
    664,290,873 (47.5%)           bst_insert(BSTNode*, int)
    347,716,491 (24.9%)           bst_delete(BSTNode*, int)
     12,600,085  (0.9%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

<   289,102,589 (20.7%, 94.1%)  ./malloc/./malloc/malloc.c:
    139,640,286 (10.0%)           _int_malloc
     53,105,389  (3.8%)           malloc
     45,345,159  (3.2%)           _int_free
     23,662,385  (1.7%)           malloc_consolidate
     18,341,152  (1.3%)           free
      5,005,770  (0.4%)           unlink_chunk.isra.0
      4,000,032  (0.3%)           alloc_perturb

<    31,000,317  (2.2%, 96.3%)  /usr/include/c++/13/bits/uniform_int_dist.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<    14,001,494  (1.0%, 97.3%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<     7,629,210  (0.5%, 97.9%)  ???:
      6,294,242  (0.5%)           ???

<     6,000,012  (0.4%, 98.3%)  /usr/include/c++/13/bits/stl_algo.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<     5,000,008  (0.4%, 98.7%)  /usr/include/c++/13/bits/stl_numeric.h:main

<     4,000,017  (0.3%, 98.9%)  /usr/include/c++/13/bits/stl_iterator.h:
      4,000,002  (0.3%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<     4,000,013  (0.3%, 99.2%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<     3,999,996  (0.3%, 99.5%)  /usr/include/c++/13/bits/move.h:void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<     3,965,195  (0.3%, 99.8%)  ./malloc/./malloc/arena.c:
      2,000,015  (0.1%)           malloc
      1,965,108  (0.1%)           free

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________  function:file

> 664,290,873 (47.5%, 47.5%)  bst_insert(BSTNode*, int):/home/pratik/Desktop/Details 3/main.cpp

> 347,716,491 (24.9%, 72.4%)  bst_delete(BSTNode*, int):/home/pratik/Desktop/Details 3/main.cpp

> 139,640,286 (10.0%, 82.4%)  _int_malloc:./malloc/./malloc/malloc.c

>  55,105,404  (3.9%, 86.4%)  malloc:
   53,105,389  (3.8%)           ./malloc/./malloc/malloc.c
    2,000,015  (0.1%)           ./malloc/./malloc/arena.c

>  45,345,159  (3.2%, 89.6%)  _int_free:./malloc/./malloc/malloc.c

>  45,001,811  (3.2%, 92.8%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   31,000,317  (2.2%)           /usr/include/c++/13/bits/uniform_int_dist.h
   14,001,494  (1.0%)           /usr/include/c++/13/bits/random.h

>  23,662,385  (1.7%, 94.5%)  malloc_consolidate:./malloc/./malloc/malloc.c

>  20,306,260  (1.5%, 96.0%)  free:
   18,341,152  (1.3%)           ./malloc/./malloc/malloc.c
    1,965,108  (0.1%)           ./malloc/./malloc/arena.c

>  14,000,010  (1.0%, 97.0%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
    6,000,012  (0.4%)           /usr/include/c++/13/bits/stl_algo.h
    4,000,002  (0.3%)           /usr/include/c++/13/bits/stl_iterator.h
    3,999,996  (0.3%)           /usr/include/c++/13/bits/move.h

>  12,600,138  (0.9%, 97.9%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
   12,600,085  (0.9%)           /home/pratik/Desktop/Details 3/main.cpp

>   6,294,242  (0.5%, 98.3%)  ???:???

>   5,005,770  (0.4%, 98.7%)  unlink_chunk.isra.0:./malloc/./malloc/malloc.c

>   5,000,189  (0.4%, 99.0%)  main:
    5,000,008  (0.4%)           /usr/include/c++/13/bits/stl_numeric.h

>   4,000,032  (0.3%, 99.3%)  alloc_perturb:./malloc/./malloc/malloc.c

>   4,000,013  (0.3%, 99.6%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/arena.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/arena.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir________________ 

-- line 15 ----------------------------------------
          .         using namespace std;
          .         using namespace chrono;
          .         
          .         // ================= Memory Profiler =================
          .         size_t current_allocated_bytes = 0;
          .         size_t peak_allocated_bytes = 0;
          .         
          .         void *operator new(std::size_t size) noexcept(false)
          1 (0.0%)  {
  3,540,357 (0.3%)      current_allocated_bytes += size;
  2,360,236 (0.2%)      if (current_allocated_bytes > peak_allocated_bytes)
  1,180,121 (0.1%)          peak_allocated_bytes = current_allocated_bytes;
  3,540,352 (0.3%)      return malloc(size);
          .         }
          .         
          .         void operator delete(void *ptr) noexcept
    655,040 (0.0%)  {
    655,040 (0.0%)      free(ptr);
          .         }
          .         
          .         long get_peak_rss_kb()
          .         {
          .             struct rusage r;
          3 (0.0%)      getrusage(RUSAGE_SELF, &r);
          .             return r.ru_maxrss;
          .         }
          .         
          .         void report_memory_usage(std::ostream &out = std::cout)
          7 (0.0%)  {
          .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
          .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
          2 (0.0%)  }
          .         
          .         // ================= Benchmark Struct =================
          .         struct OperationStats
          .         {
          .             double insert_time = 0;
          .             double search_time = 0;
          .             double update_time = 0;
          .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 56 ----------------------------------------
          .             double succ_time = 0;
          .         };
          .         
          .         // ==================== BST ====================
          .         struct BSTNode
          .         {
          .             int key;
          .             BSTNode *left = nullptr, *right = nullptr;
  4,720,452 (0.3%)      BSTNode(int k) : key(k) {}
          .         };
          .         
          .         BSTNode *bst_insert(BSTNode *root, int key)
119,983,734 (8.6%)  {
118,803,621 (8.5%)      if (!root)
          .                 return new BSTNode(key);
 77,628,930 (5.6%)      if (key < root->key)
 74,631,428 (5.3%)          root->left = bst_insert(root->left, key);
 20,156,608 (1.4%)      else if (key > root->key)
 78,946,884 (5.6%)          root->right = bst_insert(root->right, key);
 38,814,465 (2.8%)      return root;
119,983,734 (8.6%)  }
          .         
          .         bool bst_search(BSTNode *root, int key)
          .         {
          .             if (!root)
          .                 return false;
          .             if (root->key == key)
          .                 return true;
          .             return bst_search(key < root->key ? root->left : root->right, key);
          .         }
          .         
          .         BSTNode *bst_delete(BSTNode *root, int key)
 69,365,352 (5.0%)  {
 51,979,049 (3.7%)      if (!root)
     89,930 (0.0%)          return nullptr;
 34,592,746 (2.5%)      if (key < root->key)
 32,736,228 (2.3%)          root->left = bst_delete(root->left, key);
  9,112,316 (0.7%)      else if (key > root->key)
  9,112,316 (0.7%)          root->right = bst_delete(root->right, key);
          .             else
          .             {
  3,191,436 (0.2%)          if (!root->left)
          .                 {
          .                     BSTNode *temp = root->right;
  1,135,860 (0.1%)              delete root;
    567,930 (0.0%)              return temp;
          .                 }
  1,400,541 (0.1%)          else if (!root->right)
          .                 {
          .                     BSTNode *temp = root->left;
    174,210 (0.0%)              delete root;
    174,210 (0.0%)              return temp;
          .                 }
          .                 else
          .                 {
    495,882 (0.0%)              BSTNode *succ = root->right;
  4,051,060 (0.3%)              while (succ->left)
          .                         succ = succ->left;
    817,554 (0.1%)              root->key = succ->key;
 25,371,843 (1.8%)              root->right = bst_delete(root->right, succ->key);
          .                 }
          .             }
 16,641,338 (1.2%)      return root;
 86,706,690 (6.2%)  }
          .         
          .         int bst_predecessor(BSTNode *root, int key, int pred = -1)
          .         {
          .             if (!root)
          .                 return pred;
          .             if (key <= root->key)
          .                 return bst_predecessor(root->left, key, pred);
          .             else
-- line 127 ----------------------------------------
-- line 439 ----------------------------------------
          .         {
          .             auto it = tree.upper_bound(key);
          .             if (it == tree.end())
          .                 return -1;
          .             return *it;
          .         }
          .         
          .         // ==================== vEB Tree ====================
          4 (0.0%)  vector<int> vebTree;
          .         
          .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
          .         {
          .             if (low > high || index >= (int)vebTree.size())
          .                 return;
          .             int mid = (low + high) / 2;
          .             vebTree[index] = sorted[mid];
          .             build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
-- line 455 ----------------------------------------
-- line 469 ----------------------------------------
          .         }
          .         
          .         // ==================== Benchmark Dispatcher ====================
          .         OperationStats benchmark_tree(const string &tree_type,
          .                                       const vector<int> &data,
          .                                       const vector<int> &update_data,
          .                                       const vector<int> &delete_data,
          .                                       const vector<int> &pred_succ_data)
         16 (0.0%)  {
          4 (0.0%)      OperationStats stats;
          1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
          .         
          .             if (tree_type == "BST")
          .             {
          1 (0.0%)          BSTNode *root = nullptr;
          2 (0.0%)          t1 = high_resolution_clock::now();
  3,000,004 (0.2%)          for (int x : data)
  3,000,000 (0.2%)              root = bst_insert(root, x);
          1 (0.0%)          t2 = high_resolution_clock::now();
          3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          2 (0.0%)          t1 = high_resolution_clock::now();
          .                 for (int x : data)
          .                     bst_search(root, x);
          1 (0.0%)          t2 = high_resolution_clock::now();
          3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          2 (0.0%)          t1 = high_resolution_clock::now();
  2,400,005 (0.2%)          for (int x : update_data)
          .                 {
  1,800,000 (0.1%)              root = bst_delete(root, x);
  1,800,000 (0.1%)              root = bst_insert(root, x + 1);
          .                 }
          1 (0.0%)          t2 = high_resolution_clock::now();
          3 (0.0%)          stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          2 (0.0%)          t1 = high_resolution_clock::now();
    300,005 (0.0%)          for (int x : delete_data)
    300,000 (0.0%)              root = bst_delete(root, x);
          .                 t2 = high_resolution_clock::now();
          .                 stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          .                 t1 = high_resolution_clock::now();
          .                 for (int x : pred_succ_data)
          .                     bst_predecessor(root, x);
          .                 t2 = high_resolution_clock::now();
          .                 stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
-- line 515 ----------------------------------------
-- line 586 ----------------------------------------
          .                     root = treap_insert(root, x + 1);
          .                 }
          .                 t2 = high_resolution_clock::now();
          .                 stats.update_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          .                 t1 = high_resolution_clock::now();
          .                 for (int x : delete_data)
          .                     root = treap_delete(root, x);
          1 (0.0%)          t2 = high_resolution_clock::now();
          3 (0.0%)          stats.delete_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          2 (0.0%)          t1 = high_resolution_clock::now();
          .                 for (int x : pred_succ_data)
          .                     treap_predecessor(root, x);
          1 (0.0%)          t2 = high_resolution_clock::now();
          3 (0.0%)          stats.pred_time = duration_cast<milliseconds>(t2 - t1).count();
          .         
          2 (0.0%)          t1 = high_resolution_clock::now();
          .                 for (int x : pred_succ_data)
          .                     treap_successor(root, x);
          1 (0.0%)          t2 = high_resolution_clock::now();
          4 (0.0%)          stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
          .             }
          .         
          .             else if (tree_type == "RB")
          .             {
          .                 RBTree tree;
          .                 t1 = high_resolution_clock::now();
          .                 for (int x : data)
          .                     rbtree_insert(tree, x);
-- line 615 ----------------------------------------
-- line 669 ----------------------------------------
          .         
          .                 stats.update_time = 0;
          .                 stats.delete_time = 0;
          .                 stats.pred_time = 0;
          .                 stats.succ_time = 0;
          .             }
          .         
          .             return stats;
         12 (0.0%)  }
          .         
          .         // =========================== MAIN ===============================
          .         int main(int argc, char **argv)
         13 (0.0%)  {
          2 (0.0%)      if (argc != 4)
          .             {
          .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
          .                 return 1;
          .             }
          .         
          6 (0.0%)      string tree_type = argv[1];
          7 (0.0%)      int N = stoi(argv[2]);
          6 (0.0%)      string output_file = argv[3];
          .         
          2 (0.0%)      srand(42);
          .             vector<int> data(N);
          .             iota(data.begin(), data.end(), 0);
          4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
          .         
         10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
          9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
          9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
          .         
          8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
          .         
          .             // Always run benchmarks, only suppress writing
          4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
          .             {
          .                 ofstream out(output_file, ios::app);
          .                 if (!out)
          .                 {
          .                     cerr << "Failed to open " << output_file << endl;
          .                     return 1;
          .                 }
          .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
          .         
          .                 out << tree_type << "," << N << ","
          .                     << stats.insert_time << "," << stats.search_time << ","
          .                     << stats.update_time << "," << stats.delete_time << ","
          .                     << stats.pred_time << "," << stats.succ_time << ","
          .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
          .             }
          .         
          2 (0.0%)      report_memory_usage();
          .         
          1 (0.0%)      return 0;
         21 (0.0%)  }
          .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 189 ----------------------------------------
        .             swap(_Tp& __a, _Tp& __b)
        .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        .         				is_nothrow_move_assignable<_Tp>>::value)
        .             {
        .         #if __cplusplus < 201103L
        .               // concept requirements
        .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        .         #endif
  999,999 (0.1%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
1,999,998 (0.1%)        __a = _GLIBCXX_MOVE(__b);
  999,999 (0.1%)        __b = _GLIBCXX_MOVE(__tmp);
        .             }
        .         
        .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           // DR 809. std::swap should be overloaded for array types.
        .           /// Swap the contents of two arrays.
        .           template<typename _Tp, size_t _Nm>
        .             _GLIBCXX20_CONSTEXPR
        .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir_______________ 

-- line 133 ----------------------------------------
         .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
         .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
         .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
         .               struct _Mod<_Tp, __m, __a, __c, true, __s>
         .               {
         .         	static _Tp
         .         	__calc(_Tp __x)
         .         	{
 1,000,115 (0.1%)  	  _Tp __res = __a * __x + __c;
         .         	  if (__m)
13,001,379 (0.9%)  	    __res %= __m;
         .         	  return __res;
         .         	}
         .               };
         .         
         .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
         .               inline _Tp
         .               __mod(_Tp __x)
         .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 3734 ----------------------------------------
        .            *  @return  Nothing.
        .            *
        .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
        .            *  provide random numbers.
        .           */
        .           template<typename _RandomAccessIterator,
        .         	   typename _UniformRandomNumberGenerator>
        .             void
        4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .         	    _UniformRandomNumberGenerator&& __g)
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
        .         	    _RandomAccessIterator>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
        2 (0.0%)        if (__first == __last)
        .         	return;
        .         
        .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
        .         	_DistanceType;
        .         
        .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
        .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
        .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
        .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
        .         	_Gen;
        .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
        .         	__uc_type;
        .         
        .               const __uc_type __urngrange = __g.max() - __g.min();
        .               const __uc_type __urange = __uc_type(__last - __first);
        .         
        6 (0.0%)        if (__urngrange / __urange >= __urange)
        .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
        .               {
        .         	_RandomAccessIterator __i = __first + 1;
        .         
        .         	// Since we know the range isn't empty, an even number of elements
        .         	// means an uneven number of elements /to swap/, in which case we
        .         	// do the first one up front:
        .         
-- line 3776 ----------------------------------------
-- line 3795 ----------------------------------------
        .         	  std::iter_swap(__i++, __first + __pospos.second);
        .         	}
        .         
        .         	return;
        .               }
        .         
        .               __distr_type __d;
        .         
2,999,999 (0.2%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
2,999,997 (0.2%)  	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
        4 (0.0%)      }
        .         #endif // USE C99_STDINT
        .         
        .         #endif // C++11
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
        .         
        .           /**
        .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 1069 ----------------------------------------
        .               using iterator_concept = std::__detail::__iter_concept<_Iterator>;
        .         #endif
        .         
        .               _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
        .               : _M_current(_Iterator()) { }
        .         
        .               explicit _GLIBCXX20_CONSTEXPR
        .               __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
        6 (0.0%)        : _M_current(__i) { }
        .         
        .               // Allow iterator to const_iterator conversion
        .         #if __cplusplus >= 201103L
        .               template<typename _Iter, typename = __convertible_from<_Iter>>
        .         	_GLIBCXX20_CONSTEXPR
        .         	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
        .         	noexcept
        .         #else
-- line 1085 ----------------------------------------
-- line 1140 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current += __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
        .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1,000,007 (0.1%)        { return __normal_iterator(_M_current + __n); }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator&
        .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        .               { _M_current -= __n; return *this; }
        .         
        .               _GLIBCXX20_CONSTEXPR
        .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
        .             { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
        .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
        .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
        .             _GLIBCXX_NOEXCEPT
3,000,004 (0.2%)      { return __lhs.base() - __rhs.base(); }
        .         
        .           template<typename _Iterator, typename _Container>
        .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .             inline __normal_iterator<_Iterator, _Container>
        .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
        .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
        .             _GLIBCXX_NOEXCEPT
        .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 89 ----------------------------------------
        .             {
        .               // concept requirements
        .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .         				  _ForwardIterator>)
        .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
        .         	    typename iterator_traits<_ForwardIterator>::value_type>)
        .               __glibcxx_requires_valid_range(__first, __last);
        .         
4,000,008 (0.3%)        for (; __first != __last; ++__first)
        .         	{
1,000,000 (0.1%)  	  *__first = __value;
        .         	  ++__value;
        .         	}
        .             }
        .         #endif
        .         
        .         _GLIBCXX_END_NAMESPACE_VERSION
        .         
        .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir______________ 

-- line 279 ----------------------------------------
        .         	    }
        .         	  return __product >> _Up_traits::__digits;
        .         	}
        .             };
        .         
        .           template<typename _IntType>
        .             template<typename _UniformRandomBitGenerator>
        .               typename uniform_int_distribution<_IntType>::result_type
6,999,993 (0.5%)        uniform_int_distribution<_IntType>::
        .               operator()(_UniformRandomBitGenerator& __urng,
        .         		 const param_type& __param)
        .               {
        .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
        .         	typedef typename make_unsigned<result_type>::type __utype;
        .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
        .         
        .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
        .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
        .         	static_assert( __urngmin < __urngmax,
        .         	    "Uniform random bit generator must define min() < max()");
        .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
        .         
1,999,998 (0.1%)  	const __uctype __urange
        .         	  = __uctype(__param.b()) - __uctype(__param.a());
        .         
        .         	__uctype __ret;
1,999,998 (0.1%)  	if (__urngrange > __urange)
        .         	  {
        .         	    // downscaling
        .         
  999,999 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
        .         
        .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
        .         #if __SIZEOF_INT128__
        .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
        .         	      {
        .         		// __urng produces values that use exactly 64-bits,
        .         		// so use 128-bit integers to downscale to desired range.
        .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
        .         		// so use 64-bit integers to downscale to desired range.
        .         		__UINT32_TYPE__ __u32erange = __uerange;
        .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
        .         	      }
        .         	    else
        .         #endif
        .         	      {
        .         		// fallback case (2 divisions)
4,999,995 (0.4%)  		const __uctype __scaling = __urngrange / __uerange;
  999,999 (0.1%)  		const __uctype __past = __uerange * __scaling;
        .         		do
1,000,115 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
2,000,230 (0.1%)  		while (__ret >= __past);
2,999,997 (0.2%)  		__ret /= __scaling;
        .         	      }
        .         	  }
        .         	else if (__urngrange < __urange)
        .         	  {
        .         	    // upscaling
        .         	    /*
        .         	      Note that every value in [0, urange]
        .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
        .         			 (__urng, param_type(0, __urange / __uerngrange)));
        .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
        .         	      }
        .         	    while (__ret > __urange || __ret < __tmp);
        .         	  }
        .         	else
        .         	  __ret = __uctype(__urng()) - __urngmin;
        .         
  999,999 (0.1%)  	return __ret + __param.a();
5,999,994 (0.4%)        }
        .         
        .         
        .           template<typename _IntType>
        .             template<typename _ForwardIterator,
        .         	     typename _UniformRandomBitGenerator>
        .               void
        .               uniform_int_distribution<_IntType>::
        .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir___________________ 

1,089,919,543 (78.0%)    annotated: files known & above threshold & readable, line numbers known
            0            annotated: files known & above threshold & readable, line numbers unknown
            0          unannotated: files known & above threshold & two or more non-identical
  297,067,797 (21.3%)  unannotated: files known & above threshold & unreadable 
    2,775,909  (0.2%)  unannotated: files known & below threshold
    7,629,210  (0.5%)  unannotated: files unknown

