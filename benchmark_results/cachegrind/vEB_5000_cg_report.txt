--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.13800
Command:          ./benchmark vEB 5000 benchmark_results/csv/vEB_results.csv
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir________________ 

2,844,442 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir____________________  file:function

< 795,772 (28.0%, 28.0%)  ./elf/./elf/dl-lookup.c:
  497,744 (17.5%)           do_lookup_x
  185,267  (6.5%)           _dl_lookup_symbol_x
  112,761  (4.0%)           check_match

< 492,502 (17.3%, 45.3%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

< 300,620 (10.6%, 55.9%)  /usr/include/c++/13/bits/stl_algo.h:
  205,801  (7.2%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   77,057  (2.7%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
   17,515  (0.6%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

< 146,990  (5.2%, 61.0%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

< 146,496  (5.2%, 66.2%)  /home/pratik/Desktop/Details 3/main.cpp:
  146,241  (5.1%)           build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int)

< 121,046  (4.3%, 70.4%)  /usr/include/c++/13/bits/predefined_ops.h:
  102,272  (3.6%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   18,682  (0.7%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)

< 118,533  (4.2%, 74.6%)  ./elf/../sysdeps/x86_64/dl-machine.h:
  118,396  (4.2%)           _dl_relocate_object

< 110,601  (3.9%, 78.5%)  ./elf/./elf/do-rel.h:
  110,545  (3.9%)           _dl_relocate_object

<  87,512  (3.1%, 81.6%)  /usr/include/c++/13/bits/uniform_int_dist.h:
   77,512  (2.7%)           unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]
   10,000  (0.4%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<  72,828  (2.6%, 84.1%)  /usr/include/c++/13/bits/stl_iterator.h:
   37,365  (1.3%)           benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&)
   22,868  (0.8%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
   12,503  (0.4%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)

<  68,077  (2.4%, 86.5%)  ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S:
   68,045  (2.4%)           strcmp

<  43,777  (1.5%, 88.1%)  /usr/include/c++/13/bits/move.h:
   22,496  (0.8%)           void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&)
   21,281  (0.7%)           void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]

<  35,052  (1.2%, 89.3%)  /usr/include/c++/13/bits/random.h:unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]

<  33,422  (1.2%, 90.5%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
   32,445  (1.1%)           __memcpy_avx_unaligned_erms

<  31,565  (1.1%, 91.6%)  ./elf/./elf/dl-tunables.c:
   30,377  (1.1%)           __GI___tunables_init

<  28,526  (1.0%, 92.6%)  ???:
   12,192  (0.4%)           std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)
    3,752  (0.1%)           ???

<  25,008  (0.9%, 93.5%)  /usr/include/c++/13/bits/stl_numeric.h:main

<  20,013  (0.7%, 94.2%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms

<  19,914  (0.7%, 94.9%)  ./elf/../sysdeps/generic/ldsodefs.h:
   10,433  (0.4%)           _dl_relocate_object
    9,475  (0.3%)           do_lookup_x

<  16,447  (0.6%, 95.4%)  ./elf/./elf/dl-version.c:
   16,336  (0.6%)           _dl_check_map_versions

<  12,559  (0.4%, 95.9%)  /usr/include/c++/13/bits/stl_algobase.h:
   12,500  (0.4%)           std::vector<int, std::allocator<int> >::_M_fill_assign(unsigned long, int const&)

<   9,216  (0.3%, 96.2%)  ./wcsmbs/./wcsmbs/btowc.c:btowc

<   8,669  (0.3%, 96.5%)  ./elf/./elf/dl-load.c:
    3,856  (0.1%)           _dl_map_object_from_fd

<   8,363  (0.3%, 96.8%)  /usr/include/c++/13/bits/stl_vector.h:
    8,192  (0.3%)           build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int)

<   7,580  (0.3%, 97.1%)  ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x

<   7,031  (0.2%, 97.3%)  ./elf/./elf/dl-runtime.c:_dl_fixup

<   6,212  (0.2%, 97.5%)  ./stdlib/./stdlib/random_r.c:srandom_r

<   4,800  (0.2%, 97.7%)  ./elf/./elf/dl-cache.c:
    3,403  (0.1%)           _dl_cache_libcmp

<   4,294  (0.2%, 97.9%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:
    3,322  (0.1%)           intel_check_word.constprop.0

<   3,656  (0.1%, 98.0%)  ./elf/./elf/dl-tunables.h:
    3,631  (0.1%)           __GI___tunables_init

<   3,412  (0.1%, 98.1%)  ./elf/./elf/dl-misc.c:
    3,208  (0.1%)           _dl_name_match_p

<   3,200  (0.1%, 98.2%)  ./wcsmbs/./wcsmbs/wctob.c:wctob

<   2,911  (0.1%, 98.3%)  ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir____________________  function:file

> 677,769 (23.8%, 23.8%)  _dl_lookup_symbol_x:
  492,502 (17.3%)           ./elf/../sysdeps/generic/dl-new-hash.h
  185,267  (6.5%)           ./elf/./elf/dl-lookup.c

> 514,812 (18.1%, 41.9%)  do_lookup_x:
  497,744 (17.5%)           ./elf/./elf/dl-lookup.c
    9,475  (0.3%)           ./elf/../sysdeps/generic/ldsodefs.h
    7,580  (0.3%)           ./elf/../sysdeps/generic/dl-protected.h

> 386,364 (13.6%, 55.5%)  _dl_relocate_object:
  146,990  (5.2%)           ./elf/./elf/dl-reloc.c
  118,396  (4.2%)           ./elf/../sysdeps/x86_64/dl-machine.h
  110,545  (3.9%)           ./elf/./elf/do-rel.h
   10,433  (0.4%)           ./elf/../sysdeps/generic/ldsodefs.h

> 352,222 (12.4%, 67.9%)  void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]:
  205,801  (7.2%)           /usr/include/c++/13/bits/stl_algo.h
  102,272  (3.6%)           /usr/include/c++/13/bits/predefined_ops.h
   22,868  (0.8%)           /usr/include/c++/13/bits/stl_iterator.h
   21,281  (0.7%)           /usr/include/c++/13/bits/move.h

> 154,433  (5.4%, 73.3%)  build_veb_layout(std::vector<int, std::allocator<int> > const&, int, int, int):
  146,241  (5.1%)           /home/pratik/Desktop/Details 3/main.cpp
    8,192  (0.3%)           /usr/include/c++/13/bits/stl_vector.h

> 133,232  (4.7%, 78.0%)  benchmark_tree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&):
   77,057  (2.7%)           /usr/include/c++/13/bits/stl_algo.h
   37,365  (1.3%)           /usr/include/c++/13/bits/stl_iterator.h
   18,682  (0.7%)           /usr/include/c++/13/bits/predefined_ops.h

> 112,761  (4.0%, 82.0%)  check_match:./elf/./elf/dl-lookup.c

> 112,564  (4.0%, 85.9%)  unsigned long std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned long>::param_type const&) [clone .isra.0]:
   77,512  (2.7%)           /usr/include/c++/13/bits/uniform_int_dist.h
   35,052  (1.2%)           /usr/include/c++/13/bits/random.h

>  68,067  (2.4%, 88.3%)  strcmp:
   68,045  (2.4%)           ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S

>  62,514  (2.2%, 90.5%)  void std::shuffle<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&&):
   22,496  (0.8%)           /usr/include/c++/13/bits/move.h
   17,515  (0.6%)           /usr/include/c++/13/bits/stl_algo.h
   12,503  (0.4%)           /usr/include/c++/13/bits/stl_iterator.h
   10,000  (0.4%)           /usr/include/c++/13/bits/uniform_int_dist.h

>  34,008  (1.2%, 91.7%)  __GI___tunables_init:
   30,377  (1.1%)           ./elf/./elf/dl-tunables.c
    3,631  (0.1%)           ./elf/./elf/dl-tunables.h

>  32,445  (1.1%, 92.9%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>  25,189  (0.9%, 93.7%)  main:
   25,008  (0.9%)           /usr/include/c++/13/bits/stl_numeric.h

>  20,013  (0.7%, 94.4%)  __memset_avx2_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>  16,390  (0.6%, 95.0%)  _dl_check_map_versions:
   16,336  (0.6%)           ./elf/./elf/dl-version.c

>  12,544  (0.4%, 95.5%)  std::vector<int, std::allocator<int> >::_M_fill_assign(unsigned long, int const&):
   12,500  (0.4%)           /usr/include/c++/13/bits/stl_algobase.h

>  12,192  (0.4%, 95.9%)  std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*):???

>   9,728  (0.3%, 96.2%)  btowc:
    9,216  (0.3%)           ./wcsmbs/./wcsmbs/btowc.c

>   7,174  (0.3%, 96.5%)  _dl_fixup:
    7,031  (0.2%)           ./elf/./elf/dl-runtime.c

>   6,597  (0.2%, 96.7%)  _dl_map_object_from_fd:
    3,856  (0.1%)           ./elf/./elf/dl-load.c

>   6,212  (0.2%, 96.9%)  srandom_r:./stdlib/./stdlib/random_r.c

>   5,590  (0.2%, 97.1%)  intel_check_word.constprop.0:
    3,322  (0.1%)           ./elf/../sysdeps/x86/dl-cacheinfo.h

>   3,752  (0.1%, 97.3%)  ???:???

>   3,403  (0.1%, 97.4%)  _dl_cache_libcmp:./elf/./elf/dl-cache.c

>   3,208  (0.1%, 97.5%)  _dl_name_match_p:./elf/./elf/dl-misc.c

>   3,200  (0.1%, 97.6%)  wctob:./wcsmbs/./wcsmbs/wctob.c

>   2,911  (0.1%, 97.7%)  _dl_runtime_resolve_xsave:./elf/../sysdeps/x86_64/dl-trampoline.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-protected.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-protected.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/ldsodefs.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/ldsodefs.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86/dl-cacheinfo.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86/dl-cacheinfo.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-trampoline.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-trampoline.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-cache.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-cache.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-load.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-load.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-misc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-misc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-runtime.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-runtime.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-version.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-version.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./wcsmbs/./wcsmbs/btowc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./wcsmbs/./wcsmbs/btowc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./wcsmbs/./wcsmbs/wctob.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./wcsmbs/./wcsmbs/wctob.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/pratik/Desktop/Details 3/main.cpp
--------------------------------------------------------------------------------
Ir___________ 

-- line 15 ----------------------------------------
     .         using namespace std;
     .         using namespace chrono;
     .         
     .         // ================= Memory Profiler =================
     .         size_t current_allocated_bytes = 0;
     .         size_t peak_allocated_bytes = 0;
     .         
     .         void *operator new(std::size_t size) noexcept(false)
     1 (0.0%)  {
    24 (0.0%)      current_allocated_bytes += size;
    14 (0.0%)      if (current_allocated_bytes > peak_allocated_bytes)
    11 (0.0%)          peak_allocated_bytes = current_allocated_bytes;
    19 (0.0%)      return malloc(size);
     .         }
     .         
     .         void operator delete(void *ptr) noexcept
     7 (0.0%)  {
     7 (0.0%)      free(ptr);
     .         }
     .         
     .         long get_peak_rss_kb()
     .         {
     .             struct rusage r;
     3 (0.0%)      getrusage(RUSAGE_SELF, &r);
     .             return r.ru_maxrss;
     .         }
     .         
     .         void report_memory_usage(std::ostream &out = std::cout)
     7 (0.0%)  {
     .             out << "[Memory] Peak Allocated Bytes (C++ counters): " << peak_allocated_bytes << " bytes\n";
     .             out << "[Memory] Peak RSS (Resident Set Size): " << get_peak_rss_kb() << " KB\n";
     2 (0.0%)  }
     .         
     .         // ================= Benchmark Struct =================
     .         struct OperationStats
     .         {
     .             double insert_time = 0;
     .             double search_time = 0;
     .             double update_time = 0;
     .             double delete_time = 0;
-- line 54 ----------------------------------------
-- line 439 ----------------------------------------
     .         {
     .             auto it = tree.upper_bound(key);
     .             if (it == tree.end())
     .                 return -1;
     .             return *it;
     .         }
     .         
     .         // ==================== vEB Tree ====================
     4 (0.0%)  vector<int> vebTree;
     .         
     .         void build_veb_layout(const vector<int> &sorted, int low, int high, int index)
24,774 (0.9%)  {
29,856 (1.0%)      if (low > high || index >= (int)vebTree.size())
     .                 return;
21,465 (0.8%)      int mid = (low + high) / 2;
21,465 (0.8%)      vebTree[index] = sorted[mid];
21,465 (0.8%)      build_veb_layout(sorted, low, mid - 1, 2 * index + 1);
 8,586 (0.3%)      build_veb_layout(sorted, mid + 1, high, 2 * index + 2);
18,630 (0.7%)  }
     .         
     .         bool veb_search(int key)
     .         {
     .             int i = 0, n = vebTree.size();
     .             while (i < n && vebTree[i] != -1)
     .             {
     .                 if (vebTree[i] == key)
     .                     return true;
-- line 465 ----------------------------------------
-- line 469 ----------------------------------------
     .         }
     .         
     .         // ==================== Benchmark Dispatcher ====================
     .         OperationStats benchmark_tree(const string &tree_type,
     .                                       const vector<int> &data,
     .                                       const vector<int> &update_data,
     .                                       const vector<int> &delete_data,
     .                                       const vector<int> &pred_succ_data)
    16 (0.0%)  {
     4 (0.0%)      OperationStats stats;
     1 (0.0%)      auto t1 = high_resolution_clock::now(), t2 = t1;
     .         
     .             if (tree_type == "BST")
     .             {
     .                 BSTNode *root = nullptr;
     .                 t1 = high_resolution_clock::now();
     .                 for (int x : data)
     .                     root = bst_insert(root, x);
     .                 t2 = high_resolution_clock::now();
-- line 487 ----------------------------------------
-- line 649 ----------------------------------------
     .                 t2 = high_resolution_clock::now();
     .                 stats.succ_time = duration_cast<milliseconds>(t2 - t1).count();
     .             }
     .         
     .             else if (tree_type == "vEB")
     .             {
     .                 vector<int> sorted = data;
     .                 sort(sorted.begin(), sorted.end());
     1 (0.0%)          vebTree.assign(sorted.size(), -1);
     .         
     2 (0.0%)          t1 = high_resolution_clock::now();
     5 (0.0%)          build_veb_layout(sorted, 0, sorted.size() - 1, 0);
     1 (0.0%)          t2 = high_resolution_clock::now();
     3 (0.0%)          stats.insert_time = duration_cast<milliseconds>(t2 - t1).count();
     .         
     2 (0.0%)          t1 = high_resolution_clock::now();
     .                 for (int x : data)
     .                     veb_search(x);
     1 (0.0%)          t2 = high_resolution_clock::now();
     3 (0.0%)          stats.search_time = duration_cast<milliseconds>(t2 - t1).count();
     .         
     .                 stats.update_time = 0;
     .                 stats.delete_time = 0;
     .                 stats.pred_time = 0;
     .                 stats.succ_time = 0;
     .             }
     .         
     1 (0.0%)      return stats;
    12 (0.0%)  }
     .         
     .         // =========================== MAIN ===============================
     .         int main(int argc, char **argv)
    13 (0.0%)  {
     2 (0.0%)      if (argc != 4)
     .             {
     .                 cerr << "Usage: " << argv[0] << " <TreeType> <Size> <OutputCSV>\n";
     .                 return 1;
     .             }
     .         
     6 (0.0%)      string tree_type = argv[1];
     7 (0.0%)      int N = stoi(argv[2]);
     6 (0.0%)      string output_file = argv[3];
     .         
     2 (0.0%)      srand(42);
     .             vector<int> data(N);
     .             iota(data.begin(), data.end(), 0);
     4 (0.0%)      shuffle(data.begin(), data.end(), default_random_engine(42));
     .         
    10 (0.0%)      vector<int> update_data(data.begin(), data.begin() + N * 60 / 100);
     9 (0.0%)      vector<int> delete_data(data.begin(), data.begin() + N * 10 / 100);
     9 (0.0%)      vector<int> pred_succ_data(data.begin(), data.begin() + N * 5 / 100);
     .         
     8 (0.0%)      OperationStats stats = benchmark_tree(tree_type, data, update_data, delete_data, pred_succ_data);
     .         
     .             // Always run benchmarks, only suppress writing
     4 (0.0%)      if (getenv("DISABLE_CSV_WRITE") == nullptr)
     .             {
     .                 ofstream out(output_file, ios::app);
     .                 if (!out)
     .                 {
     .                     cerr << "Failed to open " << output_file << endl;
     .                     return 1;
     .                 }
     .         
-- line 712 ----------------------------------------
-- line 715 ----------------------------------------
     .         
     .                 out << tree_type << "," << N << ","
     .                     << stats.insert_time << "," << stats.search_time << ","
     .                     << stats.update_time << "," << stats.delete_time << ","
     .                     << stats.pred_time << "," << stats.succ_time << ","
     .                     << peak_allocated_bytes << "," << get_peak_rss_kb() << "\n";
     .             }
     .         
     2 (0.0%)      report_memory_usage();
     .         
     1 (0.0%)      return 0;
    21 (0.0%)  }
     .         

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/move.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 189 ----------------------------------------
     .             swap(_Tp& __a, _Tp& __b)
     .             _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
     .         				is_nothrow_move_assignable<_Tp>>::value)
     .             {
     .         #if __cplusplus < 201103L
     .               // concept requirements
     .               __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
     .         #endif
 7,498 (0.3%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
20,803 (0.7%)        __a = _GLIBCXX_MOVE(__b);
15,476 (0.5%)        __b = _GLIBCXX_MOVE(__tmp);
     .             }
     .         
     .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
     .           // DR 809. std::swap should be overloaded for array types.
     .           /// Swap the contents of two arrays.
     .           template<typename _Tp, size_t _Nm>
     .             _GLIBCXX20_CONSTEXPR
     .             inline
-- line 207 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 36 ----------------------------------------
     .         {
     .         namespace __ops
     .         {
     .           struct _Iter_less_iter
     .           {
     .             template<typename _Iterator1, typename _Iterator2>
     .               _GLIBCXX14_CONSTEXPR
     .               bool
32,915 (1.2%)        operator()(_Iterator1 __it1, _Iterator2 __it2) const
69,402 (2.4%)        { return *__it1 < *__it2; }
     .           };
     .         
     .           _GLIBCXX14_CONSTEXPR
     .           inline _Iter_less_iter
     .           __iter_less_iter()
     .           { return _Iter_less_iter(); }
     .         
     .           struct _Iter_less_val
-- line 53 ----------------------------------------
-- line 90 ----------------------------------------
     .             _GLIBCXX20_CONSTEXPR
     .             explicit
     .             _Val_less_iter(_Iter_less_iter) { }
     .         
     .             template<typename _Value, typename _Iterator>
     .               _GLIBCXX20_CONSTEXPR
     .               bool
     .               operator()(_Value& __val, _Iterator __it) const
18,729 (0.7%)        { return __val < *__it; }
     .           };
     .         
     .           _GLIBCXX20_CONSTEXPR
     .           inline _Val_less_iter
     .           __val_less_iter()
     .           { return _Val_less_iter(); }
     .         
     .           _GLIBCXX20_CONSTEXPR
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/random.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 133 ----------------------------------------
     .             // - for m == 2^n or m == 0, unsigned integer overflow is safe.
     .             // - a * (m - 1) + c fits in _Tp, there is no overflow.
     .             template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
     .               struct _Mod<_Tp, __m, __a, __c, true, __s>
     .               {
     .         	static _Tp
     .         	__calc(_Tp __x)
     .         	{
 2,504 (0.1%)  	  _Tp __res = __a * __x + __c;
     .         	  if (__m)
32,548 (1.1%)  	    __res %= __m;
     .         	  return __res;
     .         	}
     .               };
     .         
     .             template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
     .               inline _Tp
     .               __mod(_Tp __x)
     .               {
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 80 ----------------------------------------
     .         
     .           /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
     .           template<typename _Iterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             void
     .             __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
     .         			   _Iterator __c, _Compare __comp)
     .             {
 1,032 (0.0%)        if (__comp(__a, __b))
     .         	{
   534 (0.0%)  	  if (__comp(__b, __c))
     .         	    std::iter_swap(__result, __b);
   300 (0.0%)  	  else if (__comp(__a, __c))
     .         	    std::iter_swap(__result, __c);
     .         	  else
     .         	    std::iter_swap(__result, __a);
     .         	}
   498 (0.0%)        else if (__comp(__a, __c))
     .         	std::iter_swap(__result, __a);
   276 (0.0%)        else if (__comp(__b, __c))
     .         	std::iter_swap(__result, __c);
     .               else
     .         	std::iter_swap(__result, __b);
     .             }
     .         
     .           /// Provided for stable_partition to use.
     .           template<typename _InputIterator, typename _Predicate>
     .             _GLIBCXX20_CONSTEXPR
-- line 107 ----------------------------------------
-- line 1788 ----------------------------------------
     .           /// This is a helper function for the sort routine.
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             void
     .             __unguarded_linear_insert(_RandomAccessIterator __last,
     .         			      _Compare __comp)
     .             {
     .               typename iterator_traits<_RandomAccessIterator>::value_type
 4,984 (0.2%)  	__val = _GLIBCXX_MOVE(*__last);
     .               _RandomAccessIterator __next = __last;
     .               --__next;
43,516 (1.5%)        while (__comp(__val, __next))
     .         	{
13,733 (0.5%)  	  *__last = _GLIBCXX_MOVE(*__next);
     .         	  __last = __next;
     .         	  --__next;
     .         	}
 4,996 (0.2%)        *__last = _GLIBCXX_MOVE(__val);
     .             }
     .         
     .           /// This is a helper function for the sort routine.
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             void
     7 (0.0%)      __insertion_sort(_RandomAccessIterator __first,
     .         		     _RandomAccessIterator __last, _Compare __comp)
     .             {
     2 (0.0%)        if (__first == __last) return;
     .         
    47 (0.0%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
     .         	{
    30 (0.0%)  	  if (__comp(__i, __first))
     .         	    {
     .         	      typename iterator_traits<_RandomAccessIterator>::value_type
     .         		__val = _GLIBCXX_MOVE(*__i);
     .         	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
     3 (0.0%)  	      *__first = _GLIBCXX_MOVE(__val);
     .         	    }
     .         	  else
     .         	    std::__unguarded_linear_insert(__i,
     .         				__gnu_cxx::__ops::__val_comp_iter(__comp));
     .         	}
     6 (0.0%)      }
     .         
     .           /// This is a helper function for the sort routine.
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             inline void
     .             __unguarded_insertion_sort(_RandomAccessIterator __first,
     .         			       _RandomAccessIterator __last, _Compare __comp)
     .             {
 9,971 (0.4%)        for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
     .         	std::__unguarded_linear_insert(__i,
     .         				__gnu_cxx::__ops::__val_comp_iter(__comp));
     .             }
     .         
     .           /**
     .            *  @doctodo
     .            *  This controls some aspect of the sort routines.
     .           */
-- line 1847 ----------------------------------------
-- line 1849 ----------------------------------------
     .         
     .           /// This is a helper function for the sort routine.
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             void
     .             __final_insertion_sort(_RandomAccessIterator __first,
     .         			   _RandomAccessIterator __last, _Compare __comp)
     .             {
     2 (0.0%)        if (__last - __first > int(_S_threshold))
     .         	{
     3 (0.0%)  	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
     .         	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
     .         					  __comp);
     .         	}
     .               else
     .         	std::__insertion_sort(__first, __last, __comp);
     .             }
     .         
     .           /// This is a helper function...
-- line 1867 ----------------------------------------
-- line 1869 ----------------------------------------
     .             _GLIBCXX20_CONSTEXPR
     .             _RandomAccessIterator
     .             __unguarded_partition(_RandomAccessIterator __first,
     .         			  _RandomAccessIterator __last,
     .         			  _RandomAccessIterator __pivot, _Compare __comp)
     .             {
     .               while (true)
     .         	{
78,641 (2.8%)  	  while (__comp(__first, __pivot))
     .         	    ++__first;
     .         	  --__last;
92,437 (3.2%)  	  while (__comp(__pivot, __last))
     .         	    --__last;
21,568 (0.8%)  	  if (!(__first < __last))
     .         	    return __first;
     .         	  std::iter_swap(__first, __last);
     .         	  ++__first;
     .         	}
     .             }
     .         
     .           /// This is a helper function...
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             inline _RandomAccessIterator
     .             __unguarded_partition_pivot(_RandomAccessIterator __first,
     .         				_RandomAccessIterator __last, _Compare __comp)
     .             {
   516 (0.0%)        _RandomAccessIterator __mid = __first + (__last - __first) / 2;
     .               std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
     .         				  __comp);
     .               return std::__unguarded_partition(__first + 1, __last, __first, __comp);
     .             }
     .         
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             inline void
-- line 1904 ----------------------------------------
-- line 1910 ----------------------------------------
     .               std::__heap_select(__first, __middle, __last, __comp);
     .               std::__sort_heap(__first, __middle, __comp);
     .             }
     .         
     .           /// This is a helper function for the sort routine.
     .           template<typename _RandomAccessIterator, typename _Size, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             void
 2,016 (0.1%)      __introsort_loop(_RandomAccessIterator __first,
     .         		     _RandomAccessIterator __last,
     .         		     _Size __depth_limit, _Compare __comp)
     .             {
 2,066 (0.1%)        while (__last - __first > int(_S_threshold))
     .         	{
 1,560 (0.1%)  	  if (__depth_limit == 0)
     .         	    {
     .         	      std::__partial_sort(__first, __last, __last, __comp);
     .         	      return;
     .         	    }
   516 (0.0%)  	  --__depth_limit;
     .         	  _RandomAccessIterator __cut =
     .         	    std::__unguarded_partition_pivot(__first, __last, __comp);
 2,064 (0.1%)  	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
     .         	  __last = __cut;
     .         	}
 1,777 (0.1%)      }
     .         
     .           // sort
     .         
     .           template<typename _RandomAccessIterator, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
     .             inline void
     .             __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
     .         	   _Compare __comp)
     .             {
     .               if (__first != __last)
     .         	{
     4 (0.0%)  	  std::__introsort_loop(__first, __last,
     .         				std::__lg(__last - __first) * 2,
     .         				__comp);
     .         	  std::__final_insertion_sort(__first, __last, __comp);
     .         	}
     .             }
     .         
     .           template<typename _RandomAccessIterator, typename _Size, typename _Compare>
     .             _GLIBCXX20_CONSTEXPR
-- line 1955 ----------------------------------------
-- line 3715 ----------------------------------------
     .            *  invocation, and significantly reduce the waste.
     .           */
     .           template<typename _IntType, typename _UniformRandomBitGenerator>
     .             pair<_IntType, _IntType>
     .             __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
     .         			   _UniformRandomBitGenerator&& __g)
     .             {
     .               _IntType __x
 4,998 (0.2%)  	= uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
     .               return std::make_pair(__x / __b1, __x % __b1);
     .             }
     .         
     .           /**
     .            *  @brief Shuffle the elements of a sequence using a uniform random
     .            *         number generator.
     .            *  @ingroup mutating_algorithms
     .            *  @param  __first   A forward iterator.
-- line 3731 ----------------------------------------
-- line 3734 ----------------------------------------
     .            *  @return  Nothing.
     .            *
     .            *  Reorders the elements in the range @p [__first,__last) using @p __g to
     .            *  provide random numbers.
     .           */
     .           template<typename _RandomAccessIterator,
     .         	   typename _UniformRandomNumberGenerator>
     .             void
     4 (0.0%)      shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     .         	    _UniformRandomNumberGenerator&& __g)
     .             {
     .               // concept requirements
     .               __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
     .         	    _RandomAccessIterator>)
     .               __glibcxx_requires_valid_range(__first, __last);
     .         
     2 (0.0%)        if (__first == __last)
     .         	return;
     .         
     .               typedef typename iterator_traits<_RandomAccessIterator>::difference_type
     .         	_DistanceType;
     .         
     .               typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
     .               typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
     .               typedef typename __distr_type::param_type __p_type;
-- line 3758 ----------------------------------------
-- line 3760 ----------------------------------------
     .               typedef typename remove_reference<_UniformRandomNumberGenerator>::type
     .         	_Gen;
     .               typedef typename common_type<typename _Gen::result_type, __ud_type>::type
     .         	__uc_type;
     .         
     .               const __uc_type __urngrange = __g.max() - __g.min();
     .               const __uc_type __urange = __uc_type(__last - __first);
     .         
     7 (0.0%)        if (__urngrange / __urange >= __urange)
     .                 // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
     .               {
     .         	_RandomAccessIterator __i = __first + 1;
     .         
     .         	// Since we know the range isn't empty, an even number of elements
     .         	// means an uneven number of elements /to swap/, in which case we
     .         	// do the first one up front:
     .         
     2 (0.0%)  	if ((__urange % 2) == 0)
     .         	{
     .         	  __distr_type __d{0, 1};
     .         	  std::iter_swap(__i++, __first + __d(__g));
     .         	}
     .         
     .         	// Now we know that __last - __i is even, so we do the rest in pairs,
     .         	// using a single distribution invocation to produce swap positions
     .         	// for two successive elements at a time:
     .         
 7,500 (0.3%)  	while (__i != __last)
     .         	{
 2,499 (0.1%)  	  const __uc_type __swap_range = __uc_type(__i - __first) + 1;
     .         
     .         	  const pair<__uc_type, __uc_type> __pospos =
 2,499 (0.1%)  	    __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);
     .         
     .         	  std::iter_swap(__i++, __first + __pospos.first);
     .         	  std::iter_swap(__i++, __first + __pospos.second);
     .         	}
     .         
     .         	return;
     .               }
     .         
     .               __distr_type __d;
     .         
     .               for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
     .         	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
     4 (0.0%)      }
     .         #endif // USE C99_STDINT
     .         
     .         #endif // C++11
     .         
     .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
     .         
     .           /**
     .            *  @brief Apply a function to every element of a sequence.
-- line 3813 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 415 ----------------------------------------
    .         	      ++__result;
    .         	    }
    .         	  return __result;
    .         	}
    .         
    .               template<typename _Tp, typename _Up>
    .         	static void
    .         	__assign_one(_Tp* __to, _Up* __from)
    2 (0.0%)  	{ *__to = std::move(*__from); }
    .             };
    .         #endif
    .         
    .           template<bool _IsMove>
    .             struct __copy_move<_IsMove, true, random_access_iterator_tag>
    .             {
    .               template<typename _Tp, typename _Up>
    .         	_GLIBCXX20_CONSTEXPR
    .         	static _Up*
    .         	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
    .         	{
    .         	  const ptrdiff_t _Num = __last - __first;
    8 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
   13 (0.0%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    .         	  else if (_Num == 1)
    .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
    .         	      __assign_one(__result, __first);
    .         	  return __result + _Num;
    .         	}
    .             };
    .         
    .         _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
-- line 445 ----------------------------------------
-- line 738 ----------------------------------------
    .           template<bool _IsMove>
    .             struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    .             {
    .               template<typename _Tp, typename _Up>
    .         	_GLIBCXX20_CONSTEXPR
    .         	static _Up*
    .         	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
    .         	{
    6 (0.0%)  	  const ptrdiff_t _Num = __last - __first;
    6 (0.0%)  	  if (__builtin_expect(_Num > 1, true))
   12 (0.0%)  	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    1 (0.0%)  	  else if (_Num == 1)
    .         	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
    .         	      __assign_one(__result - 1, __first);
    .         	  return __result - _Num;
    .         	}
    .             };
    .         
    .           template<bool _IsMove, typename _BI1, typename _BI2>
    .             _GLIBCXX20_CONSTEXPR
-- line 757 ----------------------------------------
-- line 922 ----------------------------------------
    .           template<typename _ForwardIterator, typename _Tp>
    .             _GLIBCXX20_CONSTEXPR
    .             inline typename
    .             __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    .             __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    .         	      const _Tp& __value)
    .             {
    .               const _Tp __tmp = __value;
7,502 (0.3%)        for (; __first != __last; ++__first)
5,005 (0.2%)  	*__first = __tmp;
    .             }
    .         
    .           // Specialization: for char types we can use memset.
    .           template<typename _Tp>
    .             _GLIBCXX20_CONSTEXPR
    .             inline typename
    .             __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    .             __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
-- line 939 ----------------------------------------
-- line 1115 ----------------------------------------
    .             _GLIBCXX20_CONSTEXPR
    .             inline _OutputIterator
    .             __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    .         	       std::random_access_iterator_tag)
    .             {
    .         #if __cplusplus >= 201103L
    .               static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
    .         #endif
    2 (0.0%)        if (__n <= 0)
    .         	return __first;
    .         
    .               __glibcxx_requires_can_increment(__first, __n);
    .         
    .               std::__fill_a(__first, __first + __n, __value);
    .               return __first + __n;
    .             }
    .         
-- line 1131 ----------------------------------------
-- line 1510 ----------------------------------------
    .         
    .           /// This is a helper function for the sort routines and for random.tcc.
    .           //  Precondition: __n > 0.
    .           template<typename _Tp>
    .             inline _GLIBCXX_CONSTEXPR _Tp
    .             __lg(_Tp __n)
    .             {
    .         #if __cplusplus >= 201402L
    2 (0.0%)        return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
    .         #else
    .               // Use +__n so it promotes to at least int.
    .               return (sizeof(+__n) * __CHAR_BIT__ - 1)
    .         	       - (sizeof(+__n) == sizeof(long long)
    .         		    ? __builtin_clzll(+__n)
    .         		    : (sizeof(+__n) == sizeof(long)
    .         			 ? __builtin_clzl(+__n)
    .         			 : __builtin_clz(+__n)));
-- line 1526 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 1103 ----------------------------------------
     .               pointer
     .               operator->() const _GLIBCXX_NOEXCEPT
     .               { return _M_current; }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator&
     .               operator++() _GLIBCXX_NOEXCEPT
     .               {
20,130 (0.7%)  	++_M_current;
     .         	return *this;
     .               }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator
     .               operator++(int) _GLIBCXX_NOEXCEPT
     1 (0.0%)        { return __normal_iterator(_M_current++); }
     .         
     .               // Bidirectional iterator requirements
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator&
13,733 (0.5%)        operator--() _GLIBCXX_NOEXCEPT
     .               {
23,617 (0.8%)  	--_M_current;
     .         	return *this;
     .               }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator
     .               operator--(int) _GLIBCXX_NOEXCEPT
     .               { return __normal_iterator(_M_current--); }
     .         
-- line 1133 ----------------------------------------
-- line 1140 ----------------------------------------
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator&
     .               operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
     .               { _M_current += __n; return *this; }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator
     .               operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 5,777 (0.2%)        { return __normal_iterator(_M_current + __n); }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator&
     .               operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
     .               { _M_current -= __n; return *this; }
     .         
     .               _GLIBCXX20_CONSTEXPR
     .               __normal_iterator
-- line 1156 ----------------------------------------
-- line 1329 ----------------------------------------
     .             { return __lhs.base() - __rhs.base(); }
     .         
     .           template<typename _Iterator, typename _Container>
     .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
     .             inline typename __normal_iterator<_Iterator, _Container>::difference_type
     .             operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
     .         	      const __normal_iterator<_Iterator, _Container>& __rhs)
     .             _GLIBCXX_NOEXCEPT
 9,570 (0.3%)      { return __lhs.base() - __rhs.base(); }
     .         
     .           template<typename _Iterator, typename _Container>
     .             _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
     .             inline __normal_iterator<_Iterator, _Container>
     .             operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
     .         	      __n, const __normal_iterator<_Iterator, _Container>& __i)
     .             _GLIBCXX_NOEXCEPT
     .             { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 89 ----------------------------------------
     .             {
     .               // concept requirements
     .               __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
     .         				  _ForwardIterator>)
     .               __glibcxx_function_requires(_ConvertibleConcept<_Tp,
     .         	    typename iterator_traits<_ForwardIterator>::value_type>)
     .               __glibcxx_requires_valid_range(__first, __last);
     .         
20,008 (0.7%)        for (; __first != __last; ++__first)
     .         	{
 5,000 (0.2%)  	  *__first = __value;
     .         	  ++__value;
     .         	}
     .             }
     .         #endif
     .         
     .         _GLIBCXX_END_NAMESPACE_VERSION
     .         
     .         _GLIBCXX_BEGIN_NAMESPACE_ALGO
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir__________ 

-- line 92 ----------------------------------------
    .               struct _Vector_impl_data
    .               {
    .         	pointer _M_start;
    .         	pointer _M_finish;
    .         	pointer _M_end_of_storage;
    .         
    .         	_GLIBCXX20_CONSTEXPR
    .         	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   17 (0.0%)  	: _M_start(), _M_finish(), _M_end_of_storage()
    .         	{ }
    .         
    .         #if __cplusplus >= 201103L
    .         	_GLIBCXX20_CONSTEXPR
    .         	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
    .         	: _M_start(__x._M_start), _M_finish(__x._M_finish),
    .         	  _M_end_of_storage(__x._M_end_of_storage)
    .         	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
    .         #endif
    .         
    .         	_GLIBCXX20_CONSTEXPR
    .         	void
    .         	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
    .         	{
    1 (0.0%)  	  _M_start = __x._M_start;
    1 (0.0%)  	  _M_finish = __x._M_finish;
    1 (0.0%)  	  _M_end_of_storage = __x._M_end_of_storage;
    .         	}
    .         
    .         	_GLIBCXX20_CONSTEXPR
    .         	void
    .         	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
    .         	{
    .         	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
    .         	  // information used by TBAA.
-- line 125 ----------------------------------------
-- line 362 ----------------------------------------
    .               : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
    .               { }
    .         #endif
    .         
    .               _GLIBCXX20_CONSTEXPR
    .               ~_Vector_base() _GLIBCXX_NOEXCEPT
    .               {
    .         	_M_deallocate(_M_impl._M_start,
   18 (0.0%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
    .               }
    .         
    .             public:
    .               _Vector_impl _M_impl;
    .         
    .               _GLIBCXX20_CONSTEXPR
    .               pointer
    .               _M_allocate(size_t __n)
    .               {
    .         	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
    9 (0.0%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    .               }
    .         
    .               _GLIBCXX20_CONSTEXPR
    .               void
    .               _M_deallocate(pointer __p, size_t __n)
    .               {
    .         	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   14 (0.0%)  	if (__p)
    .         	  _Tr::deallocate(_M_impl, __p, __n);
    .               }
    .         
    .             protected:
    .               _GLIBCXX20_CONSTEXPR
    .               void
    .               _M_create_storage(size_t __n)
    .               {
    6 (0.0%)  	this->_M_impl._M_start = this->_M_allocate(__n);
    .         	this->_M_impl._M_finish = this->_M_impl._M_start;
    7 (0.0%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    .               }
    .             };
    .         
    .           /**
    .            *  @brief A standard container which offers fixed time access to
    .            *  individual elements in any order.
    .            *
    .            *  @ingroup sequences
-- line 408 ----------------------------------------
-- line 597 ----------------------------------------
    .                *  The newly-created %vector uses a copy of the allocator object used
    .                *  by @a __x (unless the allocator traits dictate a different object).
    .                */
    .               _GLIBCXX20_CONSTEXPR
    .               vector(const vector& __x)
    .               : _Base(__x.size(),
    .         	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    .               {
    1 (0.0%)  	this->_M_impl._M_finish =
    .         	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
    .         				      this->_M_impl._M_start,
    .         				      _M_get_Tp_allocator());
    .               }
    .         
    .         #if __cplusplus >= 201103L
    .               /**
    .                *  @brief  %Vector move constructor.
-- line 613 ----------------------------------------
-- line 699 ----------------------------------------
    .                *  no memory reallocation.  But if only input iterators are
    .                *  used, then this will do at most 2N calls to the copy
    .                *  constructor, and logN memory reallocations.
    .                */
    .         #if __cplusplus >= 201103L
    .               template<typename _InputIterator,
    .         	       typename = std::_RequireInputIter<_InputIterator>>
    .         	_GLIBCXX20_CONSTEXPR
   21 (0.0%)  	vector(_InputIterator __first, _InputIterator __last,
    .         	       const allocator_type& __a = allocator_type())
    .         	: _Base(__a)
    .         	{
    .         	  _M_range_initialize(__first, __last,
    .         			      std::__iterator_category(__first));
   18 (0.0%)  	}
    .         #else
    .               template<typename _InputIterator>
    .         	vector(_InputIterator __first, _InputIterator __last,
    .         	       const allocator_type& __a = allocator_type())
    .         	: _Base(__a)
    .         	{
    .         	  // Check whether it's an integral type.  If so, it's not an iterator.
    .         	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
-- line 721 ----------------------------------------
-- line 725 ----------------------------------------
    .         
    .               /**
    .                *  The dtor only erases the elements, and note that if the
    .                *  elements themselves are pointers, the pointed-to memory is
    .                *  not touched in any way.  Managing the pointer is the user's
    .                *  responsibility.
    .                */
    .               _GLIBCXX20_CONSTEXPR
    5 (0.0%)        ~vector() _GLIBCXX_NOEXCEPT
    .               {
    .         	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    .         		      _M_get_Tp_allocator());
    .         	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
    .               }
    .         
    .               /**
    .                *  @brief  %Vector assignment operator.
-- line 741 ----------------------------------------
-- line 801 ----------------------------------------
    .                *  This function fills a %vector with @a __n copies of the given
    .                *  value.  Note that the assignment completely changes the
    .                *  %vector and that the resulting %vector's size is the same as
    .                *  the number of elements assigned.
    .                */
    .               _GLIBCXX20_CONSTEXPR
    .               void
    .               assign(size_type __n, const value_type& __val)
    3 (0.0%)        { _M_fill_assign(__n, __val); }
    .         
    .               /**
    .                *  @brief  Assigns a range to a %vector.
    .                *  @param  __first  An input iterator.
    .                *  @param  __last   An input iterator.
    .                *
    .                *  This function fills a %vector with copies of the elements in the
    .                *  range [__first,__last).
-- line 817 ----------------------------------------
-- line 985 ----------------------------------------
    .               { return const_reverse_iterator(begin()); }
    .         #endif
    .         
    .               // [23.2.4.2] capacity
    .               /**  Returns the number of elements in the %vector.  */
    .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    .               size_type
    .               size() const _GLIBCXX_NOEXCEPT
8,204 (0.3%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    .         
    .               /**  Returns the size() of the largest possible %vector.  */
    .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    .               size_type
    .               max_size() const _GLIBCXX_NOEXCEPT
    .               { return _S_max_size(_M_get_Tp_allocator()); }
    .         
    .         #if __cplusplus >= 201103L
-- line 1001 ----------------------------------------
-- line 1072 ----------------------------------------
    .               /**
    .                *  Returns the total number of elements that the %vector can
    .                *  hold before needing to allocate more memory.
    .                */
    .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    .               size_type
    .               capacity() const _GLIBCXX_NOEXCEPT
    .               { return size_type(this->_M_impl._M_end_of_storage
    5 (0.0%)  			 - this->_M_impl._M_start); }
    .         
    .               /**
    .                *  Returns true if the %vector is empty.  (Thus begin() would
    .                *  equal end().)
    .                */
    .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    .               bool
    .               empty() const _GLIBCXX_NOEXCEPT
-- line 1088 ----------------------------------------
-- line 1684 ----------------------------------------
    .               template<typename _ForwardIterator>
    .         	_GLIBCXX20_CONSTEXPR
    .         	void
    .         	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
    .         			    std::forward_iterator_tag)
    .         	{
    .         	  const size_type __n = std::distance(__first, __last);
    .         	  this->_M_impl._M_start
    3 (0.0%)  	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    6 (0.0%)  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    3 (0.0%)  	  this->_M_impl._M_finish =
    .         	    std::__uninitialized_copy_a(__first, __last,
    .         					this->_M_impl._M_start,
    .         					_M_get_Tp_allocator());
    .         	}
    .         
    .               // Called by the first initialize_dispatch above and by the
    .               // vector(n,value,a) constructor.
    .               _GLIBCXX20_CONSTEXPR
    .               void
    1 (0.0%)        _M_fill_initialize(size_type __n, const value_type& __value)
    .               {
    .         	this->_M_impl._M_finish =
    .         	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
    .         					_M_get_Tp_allocator());
    .               }
    .         
    .         #if __cplusplus >= 201103L
    .               // Called by the vector(n) constructor.
    .               _GLIBCXX20_CONSTEXPR
    .               void
    .               _M_default_initialize(size_type __n)
    .               {
    1 (0.0%)  	this->_M_impl._M_finish =
    .         	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    .         					   _M_get_Tp_allocator());
    .               }
    .         #endif
    .         
    .               // Internal assign functions follow.  The *_aux functions do the actual
    .               // assignment work for the range versions.
    .         
-- line 1725 ----------------------------------------
-- line 1901 ----------------------------------------
    .         	const size_type __len = size() + (std::max)(size(), __n);
    .         	return (__len < size() || __len > max_size()) ? max_size() : __len;
    .               }
    .         
    .               // Called by constructors to check initial size.
    .               static _GLIBCXX20_CONSTEXPR size_type
    .               _S_check_init_len(size_type __n, const allocator_type& __a)
    .               {
   18 (0.0%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    .         	  __throw_length_error(
    .         	      __N("cannot create std::vector larger than max_size()"));
    .         	return __n;
    .               }
    .         
    .               static _GLIBCXX20_CONSTEXPR size_type
    .               _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    .               {
-- line 1917 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /usr/include/c++/13/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir___________ 

-- line 196 ----------------------------------------
     .               { return this->b(); }
     .         
     .               /**
     .                * @brief Generating functions.
     .                */
     .               template<typename _UniformRandomBitGenerator>
     .         	result_type
     .         	operator()(_UniformRandomBitGenerator& __urng)
10,000 (0.4%)          { return this->operator()(__urng, _M_param); }
     .         
     .               template<typename _UniformRandomBitGenerator>
     .         	result_type
     .         	operator()(_UniformRandomBitGenerator& __urng,
     .         		   const param_type& __p);
     .         
     .               template<typename _ForwardIterator,
     .         	       typename _UniformRandomBitGenerator>
-- line 212 ----------------------------------------
-- line 279 ----------------------------------------
     .         	    }
     .         	  return __product >> _Up_traits::__digits;
     .         	}
     .             };
     .         
     .           template<typename _IntType>
     .             template<typename _UniformRandomBitGenerator>
     .               typename uniform_int_distribution<_IntType>::result_type
17,500 (0.6%)        uniform_int_distribution<_IntType>::
     .               operator()(_UniformRandomBitGenerator& __urng,
     .         		 const param_type& __param)
     .               {
     .         	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
     .         	typedef typename make_unsigned<result_type>::type __utype;
     .         	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
     .         
     .         	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
     .         	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
     .         	static_assert( __urngmin < __urngmax,
     .         	    "Uniform random bit generator must define min() < max()");
     .         	constexpr __uctype __urngrange = __urngmax - __urngmin;
     .         
 5,000 (0.2%)  	const __uctype __urange
     .         	  = __uctype(__param.b()) - __uctype(__param.a());
     .         
     .         	__uctype __ret;
 5,000 (0.2%)  	if (__urngrange > __urange)
     .         	  {
     .         	    // downscaling
     .         
 2,500 (0.1%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
     .         
     .         #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
     .         #if __SIZEOF_INT128__
     .         	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
     .         	      {
     .         		// __urng produces values that use exactly 64-bits,
     .         		// so use 128-bit integers to downscale to desired range.
     .         		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 326 ----------------------------------------
     .         		// so use 64-bit integers to downscale to desired range.
     .         		__UINT32_TYPE__ __u32erange = __uerange;
     .         		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
     .         	      }
     .         	    else
     .         #endif
     .         	      {
     .         		// fallback case (2 divisions)
12,500 (0.4%)  		const __uctype __scaling = __urngrange / __uerange;
 2,500 (0.1%)  		const __uctype __past = __uerange * __scaling;
     .         		do
 2,504 (0.1%)  		  __ret = __uctype(__urng()) - __urngmin;
 5,008 (0.2%)  		while (__ret >= __past);
 7,500 (0.3%)  		__ret /= __scaling;
     .         	      }
     .         	  }
     .         	else if (__urngrange < __urange)
     .         	  {
     .         	    // upscaling
     .         	    /*
     .         	      Note that every value in [0, urange]
     .         	      can be written uniquely as
-- line 347 ----------------------------------------
-- line 364 ----------------------------------------
     .         			 (__urng, param_type(0, __urange / __uerngrange)));
     .         		__ret = __tmp + (__uctype(__urng()) - __urngmin);
     .         	      }
     .         	    while (__ret > __urange || __ret < __tmp);
     .         	  }
     .         	else
     .         	  __ret = __uctype(__urng()) - __urngmin;
     .         
 2,500 (0.1%)  	return __ret + __param.a();
15,000 (0.5%)        }
     .         
     .         
     .           template<typename _IntType>
     .             template<typename _ForwardIterator,
     .         	     typename _UniformRandomBitGenerator>
     .               void
     .               uniform_int_distribution<_IntType>::
     .               __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_______________ 

  853,261 (30.0%)    annotated: files known & above threshold & readable, line numbers known
        0            annotated: files known & above threshold & readable, line numbers unknown
        0          unannotated: files known & above threshold & two or more non-identical
1,914,817 (67.3%)  unannotated: files known & above threshold & unreadable 
   47,838  (1.7%)  unannotated: files known & below threshold
   28,526  (1.0%)  unannotated: files unknown

